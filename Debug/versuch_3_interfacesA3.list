
versuch_3_interfacesA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006918  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aec  08006aec  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006af4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000009cc  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a34  20000a34  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163af  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c81  00000000  00000000  0001e447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000210c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea2  00000000  00000000  00022390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002783c  00000000  00000000  00023232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001726e  00000000  00000000  0004aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecec8  00000000  00000000  00061cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014eba4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f8  00000000  00000000  0014ebe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001542e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006aac 	.word	0x08006aac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	08006aac 	.word	0x08006aac

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9b5 	b.w	8000578 <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b96a 	b.w	8000578 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14e      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002c8:	4694      	mov	ip, r2
 80002ca:	458c      	cmp	ip, r1
 80002cc:	4686      	mov	lr, r0
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	d962      	bls.n	800039a <__udivmoddi4+0xde>
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0320 	rsb	r3, r2, #32
 80002da:	4091      	lsls	r1, r2
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e4:	4319      	orrs	r1, r3
 80002e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f f68c 	uxth.w	r6, ip
 80002f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb07 1114 	mls	r1, r7, r4, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb04 f106 	mul.w	r1, r4, r6
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000312:	f080 8112 	bcs.w	800053a <__udivmoddi4+0x27e>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 810f 	bls.w	800053a <__udivmoddi4+0x27e>
 800031c:	3c02      	subs	r4, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb1 f0f7 	udiv	r0, r1, r7
 800032a:	fb07 1110 	mls	r1, r7, r0, r1
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	fb00 f606 	mul.w	r6, r0, r6
 8000336:	429e      	cmp	r6, r3
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x94>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000342:	f080 80fc 	bcs.w	800053e <__udivmoddi4+0x282>
 8000346:	429e      	cmp	r6, r3
 8000348:	f240 80f9 	bls.w	800053e <__udivmoddi4+0x282>
 800034c:	4463      	add	r3, ip
 800034e:	3802      	subs	r0, #2
 8000350:	1b9b      	subs	r3, r3, r6
 8000352:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa6>
 800035a:	40d3      	lsrs	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xba>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb4>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa6>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x150>
 800037e:	42a3      	cmp	r3, r4
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xcc>
 8000382:	4290      	cmp	r0, r2
 8000384:	f0c0 80f0 	bcc.w	8000568 <__udivmoddi4+0x2ac>
 8000388:	1a86      	subs	r6, r0, r2
 800038a:	eb64 0303 	sbc.w	r3, r4, r3
 800038e:	2001      	movs	r0, #1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e6      	beq.n	8000362 <__udivmoddi4+0xa6>
 8000394:	e9c5 6300 	strd	r6, r3, [r5]
 8000398:	e7e3      	b.n	8000362 <__udivmoddi4+0xa6>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x204>
 80003a0:	eba1 040c 	sub.w	r4, r1, ip
 80003a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b6:	fb08 4416 	mls	r4, r8, r6, r4
 80003ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003be:	fb07 f006 	mul.w	r0, r7, r6
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x11c>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x11a>
 80003d0:	4298      	cmp	r0, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2b4>
 80003d6:	4626      	mov	r6, r4
 80003d8:	1a1c      	subs	r4, r3, r0
 80003da:	fa1f f38e 	uxth.w	r3, lr
 80003de:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e2:	fb08 4410 	mls	r4, r8, r0, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	429f      	cmp	r7, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x148>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x146>
 80003fc:	429f      	cmp	r7, r3
 80003fe:	f200 80b0 	bhi.w	8000562 <__udivmoddi4+0x2a6>
 8000402:	4620      	mov	r0, r4
 8000404:	1bdb      	subs	r3, r3, r7
 8000406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x9c>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa20 fc06 	lsr.w	ip, r0, r6
 800041c:	fa04 f301 	lsl.w	r3, r4, r1
 8000420:	ea43 030c 	orr.w	r3, r3, ip
 8000424:	40f4      	lsrs	r4, r6
 8000426:	fa00 f801 	lsl.w	r8, r0, r1
 800042a:	0c38      	lsrs	r0, r7, #16
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb4 fef0 	udiv	lr, r4, r0
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	fb00 441e 	mls	r4, r0, lr, r4
 800043c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000440:	fb0e f90c 	mul.w	r9, lr, ip
 8000444:	45a1      	cmp	r9, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x1a6>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	f080 8084 	bcs.w	800055e <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8081 	bls.w	800055e <__udivmoddi4+0x2a2>
 800045c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000460:	443c      	add	r4, r7
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f0 	udiv	r3, r4, r0
 800046e:	fb00 4413 	mls	r4, r0, r3, r4
 8000472:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000476:	fb03 fc0c 	mul.w	ip, r3, ip
 800047a:	45a4      	cmp	ip, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x1d2>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 30ff 	add.w	r0, r3, #4294967295
 8000484:	d267      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d965      	bls.n	8000556 <__udivmoddi4+0x29a>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000492:	fba0 9302 	umull	r9, r3, r0, r2
 8000496:	eba4 040c 	sub.w	r4, r4, ip
 800049a:	429c      	cmp	r4, r3
 800049c:	46ce      	mov	lr, r9
 800049e:	469c      	mov	ip, r3
 80004a0:	d351      	bcc.n	8000546 <__udivmoddi4+0x28a>
 80004a2:	d04e      	beq.n	8000542 <__udivmoddi4+0x286>
 80004a4:	b155      	cbz	r5, 80004bc <__udivmoddi4+0x200>
 80004a6:	ebb8 030e 	subs.w	r3, r8, lr
 80004aa:	eb64 040c 	sbc.w	r4, r4, ip
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431e      	orrs	r6, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	e9c5 6400 	strd	r6, r4, [r5]
 80004bc:	2100      	movs	r1, #0
 80004be:	e750      	b.n	8000362 <__udivmoddi4+0xa6>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f103 	lsr.w	r1, r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa24 f303 	lsr.w	r3, r4, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	430c      	orrs	r4, r1
 80004d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e4:	fb08 3110 	mls	r1, r8, r0, r3
 80004e8:	0c23      	lsrs	r3, r4, #16
 80004ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ee:	fb00 f107 	mul.w	r1, r0, r7
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x24c>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fe:	d22c      	bcs.n	800055a <__udivmoddi4+0x29e>
 8000500:	4299      	cmp	r1, r3
 8000502:	d92a      	bls.n	800055a <__udivmoddi4+0x29e>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000510:	fb08 3311 	mls	r3, r8, r1, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb01 f307 	mul.w	r3, r1, r7
 800051c:	42a3      	cmp	r3, r4
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x276>
 8000520:	eb1c 0404 	adds.w	r4, ip, r4
 8000524:	f101 36ff 	add.w	r6, r1, #4294967295
 8000528:	d213      	bcs.n	8000552 <__udivmoddi4+0x296>
 800052a:	42a3      	cmp	r3, r4
 800052c:	d911      	bls.n	8000552 <__udivmoddi4+0x296>
 800052e:	3902      	subs	r1, #2
 8000530:	4464      	add	r4, ip
 8000532:	1ae4      	subs	r4, r4, r3
 8000534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000538:	e739      	b.n	80003ae <__udivmoddi4+0xf2>
 800053a:	4604      	mov	r4, r0
 800053c:	e6f0      	b.n	8000320 <__udivmoddi4+0x64>
 800053e:	4608      	mov	r0, r1
 8000540:	e706      	b.n	8000350 <__udivmoddi4+0x94>
 8000542:	45c8      	cmp	r8, r9
 8000544:	d2ae      	bcs.n	80004a4 <__udivmoddi4+0x1e8>
 8000546:	ebb9 0e02 	subs.w	lr, r9, r2
 800054a:	eb63 0c07 	sbc.w	ip, r3, r7
 800054e:	3801      	subs	r0, #1
 8000550:	e7a8      	b.n	80004a4 <__udivmoddi4+0x1e8>
 8000552:	4631      	mov	r1, r6
 8000554:	e7ed      	b.n	8000532 <__udivmoddi4+0x276>
 8000556:	4603      	mov	r3, r0
 8000558:	e799      	b.n	800048e <__udivmoddi4+0x1d2>
 800055a:	4630      	mov	r0, r6
 800055c:	e7d4      	b.n	8000508 <__udivmoddi4+0x24c>
 800055e:	46d6      	mov	lr, sl
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1a6>
 8000562:	4463      	add	r3, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74d      	b.n	8000404 <__udivmoddi4+0x148>
 8000568:	4606      	mov	r6, r0
 800056a:	4623      	mov	r3, r4
 800056c:	4608      	mov	r0, r1
 800056e:	e70f      	b.n	8000390 <__udivmoddi4+0xd4>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	e730      	b.n	80003d8 <__udivmoddi4+0x11c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2203      	movs	r2, #3
 8000588:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2203      	movs	r2, #3
 8000594:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2203      	movs	r2, #3
 800059a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2203      	movs	r2, #3
 80005a0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2203      	movs	r2, #3
 80005a6:	715a      	strb	r2, [r3, #5]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <spi_select_chip>:

void spi_select_chip()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//TODO select the chip using SPI chip select line
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <spi_select_chip+0x14>)
 80005be:	f002 fe2b 	bl	8003218 <HAL_GPIO_WritePin>

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <spi_deselect_chip>:

void spi_deselect_chip()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	//TODO undo spi_select_chip()
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <spi_deselect_chip+0x14>)
 80005d6:	f002 fe1f 	bl	8003218 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <read_register16>:


static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	460b      	mov	r3, r1
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	72fb      	strb	r3, [r7, #11]
	spi_select_chip();
 80005f2:	f7ff ffdf 	bl	80005b4 <spi_select_chip>
	//TODO read a 16-bit register from the bmp280
	//read the BMP280's datasheet
	uint8_t data[2];
	HAL_SPI_Transmit(dev->spi, &addr, 1, HAL_MAX_DELAY);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80005fa:	f107 010b 	add.w	r1, r7, #11
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	f004 fa99 	bl	8004b3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi, data, 2, HAL_MAX_DELAY);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800060c:	f107 0114 	add.w	r1, r7, #20
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2202      	movs	r2, #2
 8000616:	f004 fbd4 	bl	8004dc2 <HAL_SPI_Receive>
	//
	//read the HAL documentation about the generic SPI driver on how to communicate using SPI.
	//SPI is a full-duplex protocol. The bmp280 doesn't use that capability.
	//You can simply send what you need to send and receive your answer afterwards.
	//Write the result into *value.
	spi_deselect_chip();
 800061a:	f7ff ffd7 	bl	80005cc <spi_deselect_chip>
	*value = (data[0] << 8) | data[1];
 800061e:	7d3b      	ldrb	r3, [r7, #20]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	7d7b      	ldrb	r3, [r7, #21]
 8000626:	b21b      	sxth	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b21b      	sxth	r3, r3
 800062c:	b29a      	uxth	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	801a      	strh	r2, [r3, #0]
	return true;
 8000632:	2301      	movs	r3, #1
	//return true if it worked, false if an error was encountered
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	461a      	mov	r2, r3
 8000648:	460b      	mov	r3, r1
 800064a:	72fb      	strb	r3, [r7, #11]
 800064c:	4613      	mov	r3, r2
 800064e:	72bb      	strb	r3, [r7, #10]
	spi_select_chip();
 8000650:	f7ff ffb0 	bl	80005b4 <spi_select_chip>
	//TODO read len bytes of data from the bmp280, and put them into *value
	HAL_SPI_Transmit(dev->spi, &addr, 1, HAL_MAX_DELAY);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000658:	f107 010b 	add.w	r1, r7, #11
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2201      	movs	r2, #1
 8000662:	f004 fa6a 	bl	8004b3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi, value, len, HAL_MAX_DELAY);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800066a:	7abb      	ldrb	r3, [r7, #10]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f004 fba5 	bl	8004dc2 <HAL_SPI_Receive>
	spi_deselect_chip();
 8000678:	f7ff ffa8 	bl	80005cc <spi_deselect_chip>
	return 0;
 800067c:	2300      	movs	r3, #0
	//return 0 if it worked, and 1 if you encountered an error
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	70fb      	strb	r3, [r7, #3]
 8000692:	4613      	mov	r3, r2
 8000694:	70bb      	strb	r3, [r7, #2]
	spi_select_chip();
 8000696:	f7ff ff8d 	bl	80005b4 <spi_select_chip>
	//TODO write value into the register addr of the bmp280
	uint8_t data[2] = {addr, value};
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	78bb      	ldrb	r3, [r7, #2]
 80006a0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(dev->spi, data, 2, HAL_MAX_DELAY);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80006a6:	f107 010c 	add.w	r1, r7, #12
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	2202      	movs	r2, #2
 80006b0:	f004 fa43 	bl	8004b3a <HAL_SPI_Transmit>
	spi_deselect_chip();
 80006b4:	f7ff ff8a 	bl	80005cc <spi_deselect_chip>
	//return 0 if it worked, and 1 if you encountered an error
	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	461a      	mov	r2, r3
 80006ce:	2188      	movs	r1, #136	@ 0x88
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff87 	bl	80005e4 <read_register16>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d06f      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3302      	adds	r3, #2
 80006e0:	461a      	mov	r2, r3
 80006e2:	218a      	movs	r1, #138	@ 0x8a
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff7d 	bl	80005e4 <read_register16>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d065      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3304      	adds	r3, #4
 80006f4:	461a      	mov	r2, r3
 80006f6:	218c      	movs	r1, #140	@ 0x8c
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff73 	bl	80005e4 <read_register16>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d05b      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3306      	adds	r3, #6
 8000708:	461a      	mov	r2, r3
 800070a:	218e      	movs	r1, #142	@ 0x8e
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff69 	bl	80005e4 <read_register16>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d051      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3308      	adds	r3, #8
 800071c:	461a      	mov	r2, r3
 800071e:	2190      	movs	r1, #144	@ 0x90
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff5f 	bl	80005e4 <read_register16>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d047      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	330a      	adds	r3, #10
 8000730:	461a      	mov	r2, r3
 8000732:	2192      	movs	r1, #146	@ 0x92
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff55 	bl	80005e4 <read_register16>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d03d      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	330c      	adds	r3, #12
 8000744:	461a      	mov	r2, r3
 8000746:	2194      	movs	r1, #148	@ 0x94
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff4b 	bl	80005e4 <read_register16>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d033      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	330e      	adds	r3, #14
 8000758:	461a      	mov	r2, r3
 800075a:	2196      	movs	r1, #150	@ 0x96
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff41 	bl	80005e4 <read_register16>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d029      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3310      	adds	r3, #16
 800076c:	461a      	mov	r2, r3
 800076e:	2198      	movs	r1, #152	@ 0x98
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff37 	bl	80005e4 <read_register16>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01f      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3312      	adds	r3, #18
 8000780:	461a      	mov	r2, r3
 8000782:	219a      	movs	r1, #154	@ 0x9a
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff2d 	bl	80005e4 <read_register16>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d015      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3314      	adds	r3, #20
 8000794:	461a      	mov	r2, r3
 8000796:	219c      	movs	r1, #156	@ 0x9c
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff23 	bl	80005e4 <read_register16>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00b      	beq.n	80007bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80007a8:	461a      	mov	r2, r3
 80007aa:	219e      	movs	r1, #158	@ 0x9e
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff19 	bl	80005e4 <read_register16>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <read_calibration_data+0xfa>

		return true;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <read_calibration_data+0xfc>
	}

	return false;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f103 0218 	add.w	r2, r3, #24
 80007d4:	2301      	movs	r3, #1
 80007d6:	21a1      	movs	r1, #161	@ 0xa1
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff2f 	bl	800063c <read_data>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14b      	bne.n	800087c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	331a      	adds	r3, #26
 80007e8:	461a      	mov	r2, r3
 80007ea:	21e1      	movs	r1, #225	@ 0xe1
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fef9 	bl	80005e4 <read_register16>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d041      	beq.n	800087c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f103 021c 	add.w	r2, r3, #28
 80007fe:	2301      	movs	r3, #1
 8000800:	21e3      	movs	r1, #227	@ 0xe3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff1a 	bl	800063c <read_data>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d136      	bne.n	800087c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800080e:	f107 030e 	add.w	r3, r7, #14
 8000812:	461a      	mov	r2, r3
 8000814:	21e4      	movs	r1, #228	@ 0xe4
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fee4 	bl	80005e4 <read_register16>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d02c      	beq.n	800087c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	461a      	mov	r2, r3
 8000828:	21e5      	movs	r1, #229	@ 0xe5
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff feda 	bl	80005e4 <read_register16>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d022      	beq.n	800087c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800083c:	2301      	movs	r3, #1
 800083e:	21e7      	movs	r1, #231	@ 0xe7
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fefb 	bl	800063c <read_data>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d117      	bne.n	800087c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	b21b      	sxth	r3, r3
 8000852:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000856:	b21a      	sxth	r2, r3
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	121b      	asrs	r3, r3, #8
 800085c:	b21b      	sxth	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21a      	sxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800086c:	89bb      	ldrh	r3, [r7, #12]
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	b29b      	uxth	r3, r3
 8000872:	b21a      	sxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	841a      	strh	r2, [r3, #32]

		return true;
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <read_hum_calibration_data+0xb8>
	}

	return false;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8000896:	2301      	movs	r3, #1
 8000898:	21d0      	movs	r1, #208	@ 0xd0
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fece 	bl	800063c <read_data>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <bmp280_init+0x24>
		return false;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e08c      	b.n	80009c4 <bmp280_init+0x13e>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80008b0:	2b58      	cmp	r3, #88	@ 0x58
 80008b2:	d006      	beq.n	80008c2 <bmp280_init+0x3c>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80008ba:	2b60      	cmp	r3, #96	@ 0x60
 80008bc:	d001      	beq.n	80008c2 <bmp280_init+0x3c>

		return false;
 80008be:	2300      	movs	r3, #0
 80008c0:	e080      	b.n	80009c4 <bmp280_init+0x13e>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80008c2:	22b6      	movs	r2, #182	@ 0xb6
 80008c4:	21e0      	movs	r1, #224	@ 0xe0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fedd 	bl	8000686 <write_register8>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <bmp280_init+0x50>
		return false;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e076      	b.n	80009c4 <bmp280_init+0x13e>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80008d6:	f107 020c 	add.w	r2, r7, #12
 80008da:	2301      	movs	r3, #1
 80008dc:	21f3      	movs	r1, #243	@ 0xf3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff feac 	bl	800063c <read_data>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f5      	bne.n	80008d6 <bmp280_init+0x50>
				&& (status & 1) == 0)
 80008ea:	7b3b      	ldrb	r3, [r7, #12]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f0      	bne.n	80008d6 <bmp280_init+0x50>
			break;
	}

	if (!read_calibration_data(dev)) {
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fee4 	bl	80006c2 <read_calibration_data>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f083 0301 	eor.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <bmp280_init+0x82>
 8000906:	e001      	b.n	800090c <bmp280_init+0x86>
		return false;
 8000908:	2300      	movs	r3, #0
 800090a:	e05b      	b.n	80009c4 <bmp280_init+0x13e>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000912:	2b60      	cmp	r3, #96	@ 0x60
 8000914:	d10a      	bne.n	800092c <bmp280_init+0xa6>
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff55 	bl	80007c6 <read_hum_calibration_data>
 800091c:	4603      	mov	r3, r0
 800091e:	f083 0301 	eor.w	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <bmp280_init+0xa6>
		return false;
 8000928:	2300      	movs	r3, #0
 800092a:	e04b      	b.n	80009c4 <bmp280_init+0x13e>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	015b      	lsls	r3, r3, #5
 8000932:	b25a      	sxtb	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b25b      	sxtb	r3, r3
 8000940:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	461a      	mov	r2, r3
 8000946:	21f5      	movs	r1, #245	@ 0xf5
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fe9c 	bl	8000686 <write_register8>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <bmp280_init+0xd2>
		return false;
 8000954:	2300      	movs	r3, #0
 8000956:	e035      	b.n	80009c4 <bmp280_init+0x13e>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d102      	bne.n	8000966 <bmp280_init+0xe0>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	78db      	ldrb	r3, [r3, #3]
 800096a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800096c:	b25a      	sxtb	r2, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	b25b      	sxtb	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b25a      	sxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000984:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800098c:	2b60      	cmp	r3, #96	@ 0x60
 800098e:	d10d      	bne.n	80009ac <bmp280_init+0x126>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000996:	7b7b      	ldrb	r3, [r7, #13]
 8000998:	461a      	mov	r2, r3
 800099a:	21f2      	movs	r1, #242	@ 0xf2
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fe72 	bl	8000686 <write_register8>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <bmp280_init+0x126>
			return false;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e00b      	b.n	80009c4 <bmp280_init+0x13e>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	461a      	mov	r2, r3
 80009b0:	21f4      	movs	r1, #244	@ 0xf4
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe67 	bl	8000686 <write_register8>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <bmp280_init+0x13c>
		return false;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <bmp280_init+0x13e>
	}

	return true;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	10da      	asrs	r2, r3, #3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009ee:	12db      	asrs	r3, r3, #11
 80009f0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	111b      	asrs	r3, r3, #4
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	8812      	ldrh	r2, [r2, #0]
 80009fa:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	1112      	asrs	r2, r2, #4
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	8809      	ldrh	r1, [r1, #0]
 8000a04:	1a52      	subs	r2, r2, r1
 8000a06:	fb02 f303 	mul.w	r3, r2, r3
 8000a0a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000a16:	139b      	asrs	r3, r3, #14
 8000a18:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	441a      	add	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3380      	adds	r3, #128	@ 0x80
 8000a30:	121b      	asrs	r3, r3, #8
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000a3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a42:	b0cc      	sub	sp, #304	@ 0x130
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000a4a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000a4e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a56:	17da      	asrs	r2, r3, #31
 8000a58:	461c      	mov	r4, r3
 8000a5a:	4615      	mov	r5, r2
 8000a5c:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a60:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000a64:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000a68:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a70:	fb03 f102 	mul.w	r1, r3, r2
 8000a74:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	18ca      	adds	r2, r1, r3
 8000a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a86:	fba3 8903 	umull	r8, r9, r3, r3
 8000a8a:	eb02 0309 	add.w	r3, r2, r9
 8000a8e:	4699      	mov	r9, r3
 8000a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000a94:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	17da      	asrs	r2, r3, #31
 8000a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000aa4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	fb03 f209 	mul.w	r2, r3, r9
 8000aae:	460b      	mov	r3, r1
 8000ab0:	fb08 f303 	mul.w	r3, r8, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	fba8 1202 	umull	r1, r2, r8, r2
 8000abc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000aca:	4413      	add	r3, r2
 8000acc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000ad0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000ad4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000ad8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ae0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	17da      	asrs	r2, r3, #31
 8000ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000aec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000af4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000af8:	462a      	mov	r2, r5
 8000afa:	fb02 f203 	mul.w	r2, r2, r3
 8000afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b02:	4621      	mov	r1, r4
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	441a      	add	r2, r3
 8000b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b0e:	4621      	mov	r1, r4
 8000b10:	fba3 1301 	umull	r1, r3, r3, r1
 8000b14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b18:	460b      	mov	r3, r1
 8000b1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000b22:	18d3      	adds	r3, r2, r3
 8000b24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	f04f 0100 	mov.w	r1, #0
 8000b30:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000b34:	462b      	mov	r3, r5
 8000b36:	0459      	lsls	r1, r3, #17
 8000b38:	4623      	mov	r3, r4
 8000b3a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000b3e:	4623      	mov	r3, r4
 8000b40:	0458      	lsls	r0, r3, #17
 8000b42:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b46:	1814      	adds	r4, r2, r0
 8000b48:	643c      	str	r4, [r7, #64]	@ 0x40
 8000b4a:	414b      	adcs	r3, r1
 8000b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b4e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000b52:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	17da      	asrs	r2, r3, #31
 8000b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b66:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	f04f 0100 	mov.w	r1, #0
 8000b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b76:	00d9      	lsls	r1, r3, #3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b7e:	1814      	adds	r4, r2, r0
 8000b80:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b82:	414b      	adcs	r3, r1
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b86:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b8a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000b8e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b96:	fb03 f102 	mul.w	r1, r3, r2
 8000b9a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	18ca      	adds	r2, r1, r3
 8000ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bac:	fba3 1303 	umull	r1, r3, r3, r3
 8000bb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bc8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	17da      	asrs	r2, r3, #31
 8000bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bd4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000bd8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000bdc:	462b      	mov	r3, r5
 8000bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000be2:	4642      	mov	r2, r8
 8000be4:	fb02 f203 	mul.w	r2, r2, r3
 8000be8:	464b      	mov	r3, r9
 8000bea:	4621      	mov	r1, r4
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4622      	mov	r2, r4
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	fba2 1201 	umull	r1, r2, r2, r1
 8000bfa:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000bfe:	460a      	mov	r2, r1
 8000c00:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000c04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000c08:	4413      	add	r3, r2
 8000c0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	f04f 0100 	mov.w	r1, #0
 8000c16:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	0a18      	lsrs	r0, r3, #8
 8000c1e:	462b      	mov	r3, r5
 8000c20:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c24:	462b      	mov	r3, r5
 8000c26:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	17da      	asrs	r2, r3, #31
 8000c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c40:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000c44:	464a      	mov	r2, r9
 8000c46:	fb02 f203 	mul.w	r2, r2, r3
 8000c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c4e:	4644      	mov	r4, r8
 8000c50:	fb04 f303 	mul.w	r3, r4, r3
 8000c54:	441a      	add	r2, r3
 8000c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c5a:	4644      	mov	r4, r8
 8000c5c:	fba3 4304 	umull	r4, r3, r3, r4
 8000c60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c64:	4623      	mov	r3, r4
 8000c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000c6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c6e:	18d3      	adds	r3, r2, r3
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000c80:	464c      	mov	r4, r9
 8000c82:	0323      	lsls	r3, r4, #12
 8000c84:	4644      	mov	r4, r8
 8000c86:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c8a:	4644      	mov	r4, r8
 8000c8c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000c8e:	1884      	adds	r4, r0, r2
 8000c90:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c92:	eb41 0303 	adc.w	r3, r1, r3
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c98:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c9c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000ca0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000ca4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000ca8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000cac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cb4:	88db      	ldrh	r3, [r3, #6]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cbe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000cc6:	462b      	mov	r3, r5
 8000cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000ccc:	4642      	mov	r2, r8
 8000cce:	fb02 f203 	mul.w	r2, r2, r3
 8000cd2:	464b      	mov	r3, r9
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	4622      	mov	r2, r4
 8000cde:	4641      	mov	r1, r8
 8000ce0:	fba2 1201 	umull	r1, r2, r2, r1
 8000ce4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	460a      	mov	r2, r1
 8000cea:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000d04:	4629      	mov	r1, r5
 8000d06:	104a      	asrs	r2, r1, #1
 8000d08:	4629      	mov	r1, r5
 8000d0a:	17cb      	asrs	r3, r1, #31
 8000d0c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000d10:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000d14:	4313      	orrs	r3, r2
 8000d16:	d101      	bne.n	8000d1c <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e148      	b.n	8000fae <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d20:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000d24:	17da      	asrs	r2, r3, #31
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000d2e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000d32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d36:	105b      	asrs	r3, r3, #1
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d40:	07db      	lsls	r3, r3, #31
 8000d42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d46:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d4e:	4621      	mov	r1, r4
 8000d50:	1a89      	subs	r1, r1, r2
 8000d52:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000d54:	4629      	mov	r1, r5
 8000d56:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d5c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000d60:	4622      	mov	r2, r4
 8000d62:	462b      	mov	r3, r5
 8000d64:	1891      	adds	r1, r2, r2
 8000d66:	6239      	str	r1, [r7, #32]
 8000d68:	415b      	adcs	r3, r3
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d70:	4621      	mov	r1, r4
 8000d72:	1851      	adds	r1, r2, r1
 8000d74:	61b9      	str	r1, [r7, #24]
 8000d76:	4629      	mov	r1, r5
 8000d78:	414b      	adcs	r3, r1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d88:	4649      	mov	r1, r9
 8000d8a:	018b      	lsls	r3, r1, #6
 8000d8c:	4641      	mov	r1, r8
 8000d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d92:	4641      	mov	r1, r8
 8000d94:	018a      	lsls	r2, r1, #6
 8000d96:	4641      	mov	r1, r8
 8000d98:	1889      	adds	r1, r1, r2
 8000d9a:	6139      	str	r1, [r7, #16]
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	eb43 0101 	adc.w	r1, r3, r1
 8000da2:	6179      	str	r1, [r7, #20]
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000db0:	4649      	mov	r1, r9
 8000db2:	008b      	lsls	r3, r1, #2
 8000db4:	4641      	mov	r1, r8
 8000db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dba:	4641      	mov	r1, r8
 8000dbc:	008a      	lsls	r2, r1, #2
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4622      	mov	r2, r4
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	462a      	mov	r2, r5
 8000dce:	eb42 0303 	adc.w	r3, r2, r3
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000de0:	4649      	mov	r1, r9
 8000de2:	008b      	lsls	r3, r1, #2
 8000de4:	4641      	mov	r1, r8
 8000de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dea:	4641      	mov	r1, r8
 8000dec:	008a      	lsls	r2, r1, #2
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	4622      	mov	r2, r4
 8000df6:	189b      	adds	r3, r3, r2
 8000df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8000dfa:	462b      	mov	r3, r5
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	eb42 0303 	adc.w	r3, r2, r3
 8000e02:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000e08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000e0c:	f7ff f9ee 	bl	80001ec <__aeabi_ldivmod>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e1c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	17da      	asrs	r2, r3, #31
 8000e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000e28:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e2c:	f04f 0000 	mov.w	r0, #0
 8000e30:	f04f 0100 	mov.w	r1, #0
 8000e34:	0b50      	lsrs	r0, r2, #13
 8000e36:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e3a:	1359      	asrs	r1, r3, #13
 8000e3c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000e40:	462b      	mov	r3, r5
 8000e42:	fb00 f203 	mul.w	r2, r0, r3
 8000e46:	4623      	mov	r3, r4
 8000e48:	fb03 f301 	mul.w	r3, r3, r1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4622      	mov	r2, r4
 8000e50:	fba2 1200 	umull	r1, r2, r2, r0
 8000e54:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000e58:	460a      	mov	r2, r1
 8000e5a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000e5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e62:	4413      	add	r3, r2
 8000e64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000e68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e6c:	f04f 0000 	mov.w	r0, #0
 8000e70:	f04f 0100 	mov.w	r1, #0
 8000e74:	0b50      	lsrs	r0, r2, #13
 8000e76:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e7a:	1359      	asrs	r1, r3, #13
 8000e7c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e80:	462b      	mov	r3, r5
 8000e82:	fb00 f203 	mul.w	r2, r0, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	fb03 f301 	mul.w	r3, r3, r1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4622      	mov	r2, r4
 8000e90:	fba2 1200 	umull	r1, r2, r2, r0
 8000e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e98:	460a      	mov	r2, r1
 8000e9a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	0e4a      	lsrs	r2, r1, #25
 8000eb8:	4629      	mov	r1, r5
 8000eba:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	164b      	asrs	r3, r1, #25
 8000ec2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	17da      	asrs	r2, r3, #31
 8000ed2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ed4:	667a      	str	r2, [r7, #100]	@ 0x64
 8000ed6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000eda:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000ede:	462a      	mov	r2, r5
 8000ee0:	fb02 f203 	mul.w	r2, r2, r3
 8000ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ee8:	4621      	mov	r1, r4
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	fba2 1201 	umull	r1, r2, r2, r1
 8000efa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000efe:	460a      	mov	r2, r1
 8000f00:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000f04:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000f08:	4413      	add	r3, r2
 8000f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	0cca      	lsrs	r2, r1, #19
 8000f1e:	4629      	mov	r1, r5
 8000f20:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f24:	4629      	mov	r1, r5
 8000f26:	14cb      	asrs	r3, r1, #19
 8000f28:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000f2c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8000f30:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f34:	1884      	adds	r4, r0, r2
 8000f36:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000f38:	eb41 0303 	adc.w	r3, r1, r3
 8000f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f3e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f42:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000f46:	4621      	mov	r1, r4
 8000f48:	1889      	adds	r1, r1, r2
 8000f4a:	6539      	str	r1, [r7, #80]	@ 0x50
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	eb43 0101 	adc.w	r1, r3, r1
 8000f52:	6579      	str	r1, [r7, #84]	@ 0x54
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	f04f 0100 	mov.w	r1, #0
 8000f5c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000f60:	4623      	mov	r3, r4
 8000f62:	0a18      	lsrs	r0, r3, #8
 8000f64:	462b      	mov	r3, r5
 8000f66:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f6a:	462b      	mov	r3, r5
 8000f6c:	1219      	asrs	r1, r3, #8
 8000f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	17da      	asrs	r2, r3, #31
 8000f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f7c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f8a:	464c      	mov	r4, r9
 8000f8c:	0123      	lsls	r3, r4, #4
 8000f8e:	4644      	mov	r4, r8
 8000f90:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f94:	4644      	mov	r4, r8
 8000f96:	0122      	lsls	r2, r4, #4
 8000f98:	1884      	adds	r4, r0, r2
 8000f9a:	603c      	str	r4, [r7, #0]
 8000f9c:	eb41 0303 	adc.w	r3, r1, r3
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000fa6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8000faa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fba <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000fba:	b480      	push	{r7}
 8000fbc:	b087      	sub	sp, #28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000fcc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	039a      	lsls	r2, r3, #14
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ff0:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	fb01 f202 	mul.w	r2, r1, r2
 8001000:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	7f09      	ldrb	r1, [r1, #28]
 8001006:	4608      	mov	r0, r1
 8001008:	6979      	ldr	r1, [r7, #20]
 800100a:	fb00 f101 	mul.w	r1, r0, r1
 800100e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001010:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001014:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001018:	1292      	asrs	r2, r2, #10
 800101a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001024:	fb01 f202 	mul.w	r2, r1, r2
 8001028:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800102c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	13db      	asrs	r3, r3, #15
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	13d2      	asrs	r2, r2, #15
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	7e12      	ldrb	r2, [r2, #24]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001058:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001060:	bfa8      	it	ge
 8001062:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001066:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	131b      	asrs	r3, r3, #12
}
 800106c:	4618      	mov	r0, r3
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800108c:	2b60      	cmp	r3, #96	@ 0x60
 800108e:	d007      	beq.n	80010a0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <bmp280_read_fixed+0x32>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e000      	b.n	80010ac <bmp280_read_fixed+0x34>
 80010aa:	2306      	movs	r3, #6
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80010ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f107 0218 	add.w	r2, r7, #24
 80010b6:	21f7      	movs	r1, #247	@ 0xf7
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fabf 	bl	800063c <read_data>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <bmp280_read_fixed+0x50>
		return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e038      	b.n	800113a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	031a      	lsls	r2, r3, #12
 80010cc:	7e7b      	ldrb	r3, [r7, #25]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4313      	orrs	r3, r2
 80010d2:	7eba      	ldrb	r2, [r7, #26]
 80010d4:	0912      	lsrs	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4313      	orrs	r3, r2
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80010dc:	7efb      	ldrb	r3, [r7, #27]
 80010de:	031a      	lsls	r2, r3, #12
 80010e0:	7f3b      	ldrb	r3, [r7, #28]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4313      	orrs	r3, r2
 80010e6:	7f7a      	ldrb	r2, [r7, #29]
 80010e8:	0912      	lsrs	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	4313      	orrs	r3, r2
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	461a      	mov	r2, r3
 80010f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fc67 	bl	80009cc <compensate_temperature>
 80010fe:	4602      	mov	r2, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	461a      	mov	r2, r3
 8001108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff fc97 	bl	8000a3e <compensate_pressure>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800111c:	7fbb      	ldrb	r3, [r7, #30]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	7ffa      	ldrb	r2, [r7, #31]
 8001122:	4313      	orrs	r3, r2
 8001124:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	461a      	mov	r2, r3
 800112a:	6a39      	ldr	r1, [r7, #32]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff ff44 	bl	8000fba <compensate_humidity>
 8001132:	4602      	mov	r2, r0
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	3730      	adds	r7, #48	@ 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <bmp280_read_float+0x1a>
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	e000      	b.n	8001160 <bmp280_read_float+0x1c>
 800115e:	2300      	movs	r3, #0
 8001160:	f107 0218 	add.w	r2, r7, #24
 8001164:	f107 011c 	add.w	r1, r7, #28
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f7ff ff85 	bl	8001078 <bmp280_read_fixed>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d028      	beq.n	80011c6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80011d0 <bmp280_read_float+0x8c>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001196:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80011d4 <bmp280_read_float+0x90>
 800119a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80011d8 <bmp280_read_float+0x94>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <bmp280_read_float+0x84>
	}

	return false;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	43800000 	.word	0x43800000
 80011d8:	44800000 	.word	0x44800000

080011dc <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
 80011e8:	4613      	mov	r3, r2
 80011ea:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e010      	b.n	8001214 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6858      	ldr	r0, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	23c8      	movs	r3, #200	@ 0xc8
 80011fe:	2201      	movs	r2, #1
 8001200:	f002 fa66 	bl	80036d0 <HAL_I2C_IsDeviceReady>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b04      	cmp	r3, #4
 8001218:	ddeb      	ble.n	80011f2 <_LCD_SendInternal+0x16>
 800121a:	e000      	b.n	800121e <_LCD_SendInternal+0x42>
            break;
 800121c:	bf00      	nop
    }
    if(res!=HAL_OK) {
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <_LCD_SendInternal+0x4c>
    	return res;
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	e04b      	b.n	80012c0 <_LCD_SendInternal+0xe4>
    }


    uint8_t up = data & 0xF0;
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	f023 030f 	bic.w	r3, r3, #15
 800122e:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <_LCD_SendInternal+0x66>
 800123e:	2308      	movs	r3, #8
 8001240:	e000      	b.n	8001244 <_LCD_SendInternal+0x68>
 8001242:	2300      	movs	r3, #0
 8001244:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	4313      	orrs	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	78bb      	ldrb	r3, [r7, #2]
 8001260:	4313      	orrs	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	4313      	orrs	r3, r2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 800126c:	7bba      	ldrb	r2, [r7, #14]
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	4313      	orrs	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	4313      	orrs	r3, r2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	b2db      	uxtb	r3, r3
 8001280:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8001282:	7bba      	ldrb	r2, [r7, #14]
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	4313      	orrs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	4313      	orrs	r3, r2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr),LCD_I2C_TIMEOUT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6858      	ldr	r0, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	f107 0208 	add.w	r2, r7, #8
 80012a0:	23c8      	movs	r3, #200	@ 0xc8
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2304      	movs	r3, #4
 80012a6:	f002 f915 	bl	80034d4 <HAL_I2C_Master_Transmit>
 80012aa:	4603      	mov	r3, r0
 80012ac:	75fb      	strb	r3, [r7, #23]
    if ( res != HAL_OK) {
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_LCD_SendInternal+0xdc>
    	return res;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	e003      	b.n	80012c0 <_LCD_SendInternal+0xe4>
    }

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80012b8:	2005      	movs	r0, #5
 80012ba:	f000 ff35 	bl	8002128 <HAL_Delay>
    return res;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff7e 	bl	80011dc <_LCD_SendInternal>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 80012f8:	2130      	movs	r1, #48	@ 0x30
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffe4 	bl	80012c8 <_LCD_SendCommand>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <LCD_Begin+0x24>
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	e01c      	b.n	8001348 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800130e:	2102      	movs	r1, #2
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ffd9 	bl	80012c8 <_LCD_SendCommand>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <LCD_Begin+0x3a>
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	e011      	b.n	8001348 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8001324:	210c      	movs	r1, #12
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffce 	bl	80012c8 <_LCD_SendCommand>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <LCD_Begin+0x50>
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	e006      	b.n	8001348 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 800133a:	2101      	movs	r1, #1
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffc3 	bl	80012c8 <_LCD_SendCommand>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
    return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	@ 0x50
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f000 fe75 	bl	8002044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f857 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 fa29 	bl	80017b4 <MX_GPIO_Init>
  MX_ETH_Init();
 8001362:	f000 f90f 	bl	8001584 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001366:	f000 f9cd 	bl	8001704 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800136a:	f000 f9f5 	bl	8001758 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800136e:	f000 f8b7 	bl	80014e0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001372:	f000 f955 	bl	8001620 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001376:	f000 f993 	bl	80016a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LCD_HandleTypeDef lcd;
  lcd.i2c = &hi2c2;
 800137a:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <main+0xa0>)
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  lcd.i2c_addr = LCD_DEFAULT_ADDR;
 800137e:	234e      	movs	r3, #78	@ 0x4e
 8001380:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  lcd.backlight_enable = true;
 8001384:	2301      	movs	r3, #1
 8001386:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef status = LCD_Begin(&lcd);
 800138a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffab 	bl	80012ea <LCD_Begin>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BMP280_HandleTypedef bmp280;
  bmp280_init_default_params(&bmp280.params);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	3328      	adds	r3, #40	@ 0x28
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8ec 	bl	800057c <bmp280_init_default_params>
  bmp280.spi = &hspi1;
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <main+0xa4>)
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (!bmp280_init(&bmp280, &bmp280.params)) {
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fa67 	bl	8000886 <bmp280_init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f083 0301 	eor.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <main+0x7a>
          printf("Fehler\n");
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <main+0xa8>)
 80013c6:	f004 ffdd 	bl	8006384 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  bmp280_init(&bmp280, &bmp280.params);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa56 	bl	8000886 <bmp280_init>
	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 80013da:	1d38      	adds	r0, r7, #4
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <main+0xac>)
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <main+0xb0>)
 80013e0:	4908      	ldr	r1, [pc, #32]	@ (8001404 <main+0xb4>)
 80013e2:	f7ff feaf 	bl	8001144 <bmp280_read_float>

temperature =+ 10;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <main+0xb4>)
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <main+0xb8>)
 80013ea:	601a      	str	r2, [r3, #0]
	  bmp280_init(&bmp280, &bmp280.params);
 80013ec:	bf00      	nop
 80013ee:	e7ec      	b.n	80013ca <main+0x7a>
 80013f0:	20000300 	.word	0x20000300
 80013f4:	20000354 	.word	0x20000354
 80013f8:	08006ac4 	.word	0x08006ac4
 80013fc:	2000008c 	.word	0x2000008c
 8001400:	20000088 	.word	0x20000088
 8001404:	20000084 	.word	0x20000084
 8001408:	41200000 	.word	0x41200000

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 f892 	bl	8006544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a27      	ldr	r2, [pc, #156]	@ (80014d8 <SystemClock_Config+0xcc>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <SystemClock_Config+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <SystemClock_Config+0xd0>)
 8001456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800146c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800147c:	2304      	movs	r3, #4
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001480:	23a8      	movs	r3, #168	@ 0xa8
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001488:	2307      	movs	r3, #7
 800148a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fe31 	bl	80040f8 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800149c:	f000 fa5a 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2105      	movs	r1, #5
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f892 	bl	80045e8 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ca:	f000 fa43 	bl	8001954 <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3750      	adds	r7, #80	@ 0x50
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_ADC1_Init+0x98>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	@ (800157c <MX_ADC1_Init+0x9c>)
 80014f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_ADC1_Init+0x98>)
 80014fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_ADC1_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <MX_ADC1_Init+0xa0>)
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_ADC1_Init+0x98>)
 800152e:	2201      	movs	r2, #1
 8001530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_ADC1_Init+0x98>)
 800153c:	2201      	movs	r2, #1
 800153e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001540:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001542:	f000 fe15 	bl	8002170 <HAL_ADC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800154c:	f000 fa02 	bl	8001954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001550:	2303      	movs	r3, #3
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_ADC1_Init+0x98>)
 8001562:	f000 fe49 	bl	80021f8 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800156c:	f000 f9f2 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000208 	.word	0x20000208
 800157c:	40012000 	.word	0x40012000
 8001580:	0f000001 	.word	0x0f000001

08001584 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_ETH_Init+0x84>)
 800158a:	4a20      	ldr	r2, [pc, #128]	@ (800160c <MX_ETH_Init+0x88>)
 800158c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <MX_ETH_Init+0x8c>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001594:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_ETH_Init+0x8c>)
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_ETH_Init+0x8c>)
 800159c:	22e1      	movs	r2, #225	@ 0xe1
 800159e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_ETH_Init+0x8c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_ETH_Init+0x8c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_ETH_Init+0x8c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_ETH_Init+0x84>)
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <MX_ETH_Init+0x8c>)
 80015b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_ETH_Init+0x84>)
 80015ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015be:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_ETH_Init+0x84>)
 80015c2:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <MX_ETH_Init+0x90>)
 80015c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_ETH_Init+0x84>)
 80015c8:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <MX_ETH_Init+0x94>)
 80015ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_ETH_Init+0x84>)
 80015ce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80015d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <MX_ETH_Init+0x84>)
 80015d6:	f001 f923 	bl	8002820 <HAL_ETH_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 f9b8 	bl	8001954 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015e4:	2238      	movs	r2, #56	@ 0x38
 80015e6:	2100      	movs	r1, #0
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_ETH_Init+0x98>)
 80015ea:	f004 ffab 	bl	8006544 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_ETH_Init+0x98>)
 80015f0:	2221      	movs	r2, #33	@ 0x21
 80015f2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_ETH_Init+0x98>)
 80015f6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80015fa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_ETH_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000250 	.word	0x20000250
 800160c:	40028000 	.word	0x40028000
 8001610:	200008d8 	.word	0x200008d8
 8001614:	20000168 	.word	0x20000168
 8001618:	200000c8 	.word	0x200000c8
 800161c:	20000090 	.word	0x20000090

08001620 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <MX_I2C2_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_I2C2_Init+0x74>)
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <MX_I2C2_Init+0x7c>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_I2C2_Init+0x74>)
 800163e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_I2C2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <MX_I2C2_Init+0x74>)
 800165e:	f001 fdf5 	bl	800324c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 f974 	bl	8001954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4809      	ldr	r0, [pc, #36]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001670:	f002 fbb7 	bl	8003de2 <HAL_I2CEx_ConfigAnalogFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800167a:	f000 f96b 	bl	8001954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <MX_I2C2_Init+0x74>)
 8001682:	f002 fbea 	bl	8003e5a <HAL_I2CEx_ConfigDigitalFilter>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 f962 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000300 	.word	0x20000300
 8001698:	40005800 	.word	0x40005800
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016a6:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <MX_SPI1_Init+0x60>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016e4:	220a      	movs	r2, #10
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_SPI1_Init+0x5c>)
 80016ea:	f003 f99d 	bl	8004a28 <HAL_SPI_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80016f4:	f000 f92e 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000354 	.word	0x20000354
 8001700:	40013000 	.word	0x40013000

08001704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_USART3_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_USART3_UART_Init+0x4c>)
 800173c:	f003 ff46 	bl	80055cc <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f905 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003ac 	.word	0x200003ac
 8001754:	40004800 	.word	0x40004800

08001758 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800175e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001766:	2204      	movs	r2, #4
 8001768:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176c:	2202      	movs	r2, #2
 800176e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001778:	2202      	movs	r2, #2
 800177a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177e:	2201      	movs	r2, #1
 8001780:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001790:	2201      	movs	r2, #1
 8001792:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179c:	f002 fb9c 	bl	8003ed8 <HAL_PCD_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f8d5 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003f4 	.word	0x200003f4

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	@ 0x30
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	4b55      	ldr	r3, [pc, #340]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a54      	ldr	r2, [pc, #336]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b52      	ldr	r3, [pc, #328]	@ (8001940 <MX_GPIO_Init+0x18c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b4e      	ldr	r3, [pc, #312]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a4d      	ldr	r2, [pc, #308]	@ (8001940 <MX_GPIO_Init+0x18c>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a46      	ldr	r2, [pc, #280]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a3f      	ldr	r2, [pc, #252]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <MX_GPIO_Init+0x18c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <MX_GPIO_Init+0x18c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a38      	ldr	r2, [pc, #224]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a31      	ldr	r2, [pc, #196]	@ (8001940 <MX_GPIO_Init+0x18c>)
 800187c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b2f      	ldr	r3, [pc, #188]	@ (8001940 <MX_GPIO_Init+0x18c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2110      	movs	r1, #16
 8001892:	482c      	ldr	r0, [pc, #176]	@ (8001944 <MX_GPIO_Init+0x190>)
 8001894:	f001 fcc0 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800189e:	482a      	ldr	r0, [pc, #168]	@ (8001948 <MX_GPIO_Init+0x194>)
 80018a0:	f001 fcba 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2140      	movs	r1, #64	@ 0x40
 80018a8:	4828      	ldr	r0, [pc, #160]	@ (800194c <MX_GPIO_Init+0x198>)
 80018aa:	f001 fcb5 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4822      	ldr	r0, [pc, #136]	@ (8001950 <MX_GPIO_Init+0x19c>)
 80018c6:	f001 fafb 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ca:	2310      	movs	r3, #16
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4818      	ldr	r0, [pc, #96]	@ (8001944 <MX_GPIO_Init+0x190>)
 80018e2:	f001 faed 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018e6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4812      	ldr	r0, [pc, #72]	@ (8001948 <MX_GPIO_Init+0x194>)
 8001900:	f001 fade 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001904:	2340      	movs	r3, #64	@ 0x40
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <MX_GPIO_Init+0x198>)
 800191c:	f001 fad0 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <MX_GPIO_Init+0x198>)
 8001934:	f001 fac4 	bl	8002ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001938:	bf00      	nop
 800193a:	3730      	adds	r7, #48	@ 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40021800 	.word	0x40021800
 8001950:	40020800 	.word	0x40020800

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <Error_Handler+0x8>

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_MspInit+0x4c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <HAL_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_ADC_MspInit+0x7c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d127      	bne.n	8001a22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_ADC_MspInit+0x80>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <HAL_ADC_MspInit+0x84>)
 8001a1e:	f001 fa4f 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	@ 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a55      	ldr	r2, [pc, #340]	@ (8001bac <HAL_ETH_MspInit+0x174>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f040 80a4 	bne.w	8001ba4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	4b53      	ldr	r3, [pc, #332]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	4a52      	ldr	r2, [pc, #328]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6c:	4b50      	ldr	r3, [pc, #320]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	4b45      	ldr	r3, [pc, #276]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	4a44      	ldr	r2, [pc, #272]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa4:	4b42      	ldr	r3, [pc, #264]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	4a36      	ldr	r2, [pc, #216]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b30      	ldr	r3, [pc, #192]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	4a28      	ldr	r2, [pc, #160]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b14:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b20:	2332      	movs	r3, #50	@ 0x32
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b30:	230b      	movs	r3, #11
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481e      	ldr	r0, [pc, #120]	@ (8001bb4 <HAL_ETH_MspInit+0x17c>)
 8001b3c:	f001 f9c0 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b40:	2386      	movs	r3, #134	@ 0x86
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b50:	230b      	movs	r3, #11
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4817      	ldr	r0, [pc, #92]	@ (8001bb8 <HAL_ETH_MspInit+0x180>)
 8001b5c:	f001 f9b0 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b72:	230b      	movs	r3, #11
 8001b74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <HAL_ETH_MspInit+0x184>)
 8001b7e:	f001 f99f 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b82:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b94:	230b      	movs	r3, #11
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ba0:	f001 f98e 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	@ 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40028000 	.word	0x40028000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40021800 	.word	0x40021800

08001bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_I2C_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12b      	bne.n	8001c3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf0:	f043 0320 	orr.w	r3, r3, #32
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c02:	2303      	movs	r3, #3
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c06:	2312      	movs	r3, #18
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c12:	2304      	movs	r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <HAL_I2C_MspInit+0x8c>)
 8001c1e:	f001 f94f 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40005800 	.word	0x40005800
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40021400 	.word	0x40021400

08001c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <HAL_SPI_MspInit+0x84>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d12b      	bne.n	8001cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a17      	ldr	r2, [pc, #92]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_SPI_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cae:	2338      	movs	r3, #56	@ 0x38
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_SPI_MspInit+0x8c>)
 8001cca:	f001 f8f9 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013000 	.word	0x40013000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_UART_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12c      	bne.n	8001d60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d50:	2307      	movs	r3, #7
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_UART_MspInit+0x8c>)
 8001d5c:	f001 f8b0 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004800 	.word	0x40004800
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020c00 	.word	0x40020c00

08001d74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d94:	d13f      	bne.n	8001e16 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b21      	ldr	r3, [pc, #132]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001db2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4815      	ldr	r0, [pc, #84]	@ (8001e24 <HAL_PCD_MspInit+0xb0>)
 8001dd0:	f001 f876 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	480e      	ldr	r0, [pc, #56]	@ (8001e24 <HAL_PCD_MspInit+0xb0>)
 8001dea:	f001 f869 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_PCD_MspInit+0xac>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	@ 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f000 f933 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
  }

  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e009      	b.n	8001ee6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf1      	blt.n	8001ed2 <_write+0x12>
  }
  return len;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_close>:

int _close(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f20:	605a      	str	r2, [r3, #4]
  return 0;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_isatty>:

int _isatty(int file)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f004 fb26 	bl	80065e0 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20030000 	.word	0x20030000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	200008e0 	.word	0x200008e0
 8001fc8:	20000a38 	.word	0x20000a38

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff4:	f7ff ffea 	bl	8001fcc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffa:	490d      	ldr	r1, [pc, #52]	@ (8002030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002010:	4c0a      	ldr	r4, [pc, #40]	@ (800203c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800201e:	f004 fae5 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff f995 	bl	8001350 <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002028:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002034:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 8002038:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800203c:	20000a34 	.word	0x20000a34

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <HAL_Init+0x40>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_Init+0x40>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_Init+0x40>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fba3 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fc72 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fbad 	bl	8002806 <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 fb83 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	@ (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	@ (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008
 800210c:	200008e4 	.word	0x200008e4

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200008e4 	.word	0x200008e4

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fc0e 	bl	80019b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f94a 	bl	800245c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c>
 8002210:	2302      	movs	r3, #2
 8002212:	e113      	b.n	800243c <HAL_ADC_ConfigChannel+0x244>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d925      	bls.n	8002270 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68d9      	ldr	r1, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	4603      	mov	r3, r0
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4403      	add	r3, r0
 8002262:	3b1e      	subs	r3, #30
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	e022      	b.n	80022b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	2207      	movs	r2, #7
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4403      	add	r3, r0
 80022ac:	409a      	lsls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d824      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b05      	subs	r3, #5
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	@ 0x34
 8002306:	e04c      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d824      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b23      	subs	r3, #35	@ 0x23
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43da      	mvns	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	400a      	ands	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b23      	subs	r3, #35	@ 0x23
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
 8002358:	e023      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b41      	subs	r3, #65	@ 0x41
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	400a      	ands	r2, r1
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b41      	subs	r3, #65	@ 0x41
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_ADC_ConfigChannel+0x250>)
 80023a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a28      	ldr	r2, [pc, #160]	@ (800244c <HAL_ADC_ConfigChannel+0x254>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10f      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1d8>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_ADC_ConfigChannel+0x254>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12b      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x23a>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1c      	ldr	r2, [pc, #112]	@ (8002450 <HAL_ADC_ConfigChannel+0x258>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x1f4>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b11      	cmp	r3, #17
 80023ea:	d122      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_ADC_ConfigChannel+0x258>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d111      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_ADC_ConfigChannel+0x25c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_ADC_ConfigChannel+0x260>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9a      	lsrs	r2, r3, #18
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002424:	e002      	b.n	800242c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40012300 	.word	0x40012300
 800244c:	40012000 	.word	0x40012000
 8002450:	10000012 	.word	0x10000012
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002464:	4b79      	ldr	r3, [pc, #484]	@ (800264c <ADC_Init+0x1f0>)
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <ADC_Init+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002502:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e00f      	b.n	800255a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	005a      	lsls	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002596:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	035a      	lsls	r2, r3, #13
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	e007      	b.n	80025d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	051a      	lsls	r2, r3, #20
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002612:	025a      	lsls	r2, r3, #9
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	029a      	lsls	r2, r3, #10
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	0f000001 	.word	0x0f000001

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	@ (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff47 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff5c 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffb0 	bl	8002774 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e08a      	b.n	8002948 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2223      	movs	r2, #35	@ 0x23
 8002840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff f8f7 	bl	8001a38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b40      	ldr	r3, [pc, #256]	@ (8002950 <HAL_ETH_Init+0x130>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	4a3f      	ldr	r2, [pc, #252]	@ (8002950 <HAL_ETH_Init+0x130>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002858:	6453      	str	r3, [r2, #68]	@ 0x44
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_ETH_Init+0x130>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_ETH_Init+0x134>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <HAL_ETH_Init+0x134>)
 800286c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002870:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002872:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <HAL_ETH_Init+0x134>)
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4936      	ldr	r1, [pc, #216]	@ (8002954 <HAL_ETH_Init+0x134>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002880:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <HAL_ETH_Init+0x134>)
 8002882:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800289a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800289c:	f7ff fc38 	bl	8002110 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028a2:	e011      	b.n	80028c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028a4:	f7ff fc34 	bl	8002110 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028b2:	d909      	bls.n	80028c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2204      	movs	r2, #4
 80028b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	22e0      	movs	r2, #224	@ 0xe0
 80028c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e03f      	b.n	8002948 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e4      	bne.n	80028a4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f97a 	bl	8002bd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fa25 	bl	8002d30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa7b 	bl	8002de2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f9e3 	bl	8002cc0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002908:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800291e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002932:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2210      	movs	r2, #16
 8002942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800

08002958 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <ETH_SetMACConfig+0x164>)
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7b9b      	ldrb	r3, [r3, #14]
 8002976:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	7c12      	ldrb	r2, [r2, #16]
 800297c:	2a00      	cmp	r2, #0
 800297e:	d102      	bne.n	8002986 <ETH_SetMACConfig+0x2e>
 8002980:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002984:	e000      	b.n	8002988 <ETH_SetMACConfig+0x30>
 8002986:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002988:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	7c52      	ldrb	r2, [r2, #17]
 800298e:	2a00      	cmp	r2, #0
 8002990:	d102      	bne.n	8002998 <ETH_SetMACConfig+0x40>
 8002992:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002996:	e000      	b.n	800299a <ETH_SetMACConfig+0x42>
 8002998:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800299a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7fdb      	ldrb	r3, [r3, #31]
 80029a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	7f92      	ldrb	r2, [r2, #30]
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d102      	bne.n	80029be <ETH_SetMACConfig+0x66>
 80029b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029bc:	e000      	b.n	80029c0 <ETH_SetMACConfig+0x68>
 80029be:	2200      	movs	r2, #0
                        macconf->Speed |
 80029c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7f1b      	ldrb	r3, [r3, #28]
 80029c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	791b      	ldrb	r3, [r3, #4]
 80029d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029de:	2a00      	cmp	r2, #0
 80029e0:	d102      	bne.n	80029e8 <ETH_SetMACConfig+0x90>
 80029e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e6:	e000      	b.n	80029ea <ETH_SetMACConfig+0x92>
 80029e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	7bdb      	ldrb	r3, [r3, #15]
 80029f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a02:	4313      	orrs	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7ff fb84 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002a36:	4013      	ands	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d101      	bne.n	8002a4e <ETH_SetMACConfig+0xf6>
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	e000      	b.n	8002a50 <ETH_SetMACConfig+0xf8>
 8002a4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a5e:	2a01      	cmp	r2, #1
 8002a60:	d101      	bne.n	8002a66 <ETH_SetMACConfig+0x10e>
 8002a62:	2208      	movs	r2, #8
 8002a64:	e000      	b.n	8002a68 <ETH_SetMACConfig+0x110>
 8002a66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a70:	2a01      	cmp	r2, #1
 8002a72:	d101      	bne.n	8002a78 <ETH_SetMACConfig+0x120>
 8002a74:	2204      	movs	r2, #4
 8002a76:	e000      	b.n	8002a7a <ETH_SetMACConfig+0x122>
 8002a78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	d101      	bne.n	8002a8a <ETH_SetMACConfig+0x132>
 8002a86:	2202      	movs	r2, #2
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0x134>
 8002a8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7ff fb3f 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	fd20810f 	.word	0xfd20810f

08002ac0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <ETH_SetDMAConfig+0x110>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7b1b      	ldrb	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <ETH_SetDMAConfig+0x2c>
 8002ae6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002aea:	e000      	b.n	8002aee <ETH_SetDMAConfig+0x2e>
 8002aec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7b5b      	ldrb	r3, [r3, #13]
 8002af2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002af4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	7f52      	ldrb	r2, [r2, #29]
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d102      	bne.n	8002b04 <ETH_SetDMAConfig+0x44>
 8002afe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b02:	e000      	b.n	8002b06 <ETH_SetDMAConfig+0x46>
 8002b04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7b9b      	ldrb	r3, [r3, #14]
 8002b0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	7f1b      	ldrb	r3, [r3, #28]
 8002b1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7f9b      	ldrb	r3, [r3, #30]
 8002b22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b34:	4313      	orrs	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7ff fae6 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b64:	461a      	mov	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	791b      	ldrb	r3, [r3, #4]
 8002b6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ba6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7ff fab7 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	f8de3f23 	.word	0xf8de3f23

08002bd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0a6      	sub	sp, #152	@ 0x98
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c16:	2300      	movs	r3, #0
 8002c18:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe7f 	bl	8002958 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c8e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c94:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c9a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff05 	bl	8002ac0 <ETH_SetDMAConfig>
}
 8002cb6:	bf00      	nop
 8002cb8:	3798      	adds	r7, #152	@ 0x98
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3305      	adds	r3, #5
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	3204      	adds	r2, #4
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <ETH_MACAddressConfig+0x68>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3303      	adds	r3, #3
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	061a      	lsls	r2, r3, #24
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	4313      	orrs	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <ETH_MACAddressConfig+0x6c>)
 8002d12:	4413      	add	r3, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	6013      	str	r3, [r2, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40028040 	.word	0x40028040
 8002d2c:	40028044 	.word	0x40028044

08002d30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e03e      	b.n	8002dbc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	3206      	adds	r2, #6
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d80c      	bhi.n	8002da0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e004      	b.n	8002daa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d9bd      	bls.n	8002d3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd4:	611a      	str	r2, [r3, #16]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e048      	b.n	8002e82 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6919      	ldr	r1, [r3, #16]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	3212      	adds	r2, #18
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d80c      	bhi.n	8002e72 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	e004      	b.n	8002e7c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d9b3      	bls.n	8002df0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb2:	60da      	str	r2, [r3, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e177      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8166 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d005      	beq.n	8002f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d130      	bne.n	8002f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d017      	beq.n	8002fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80c0 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_GPIO_Init+0x324>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003054:	6453      	str	r3, [r2, #68]	@ 0x44
 8003056:	4b63      	ldr	r3, [pc, #396]	@ (80031e4 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a61      	ldr	r2, [pc, #388]	@ (80031e8 <HAL_GPIO_Init+0x328>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	@ (80031ec <HAL_GPIO_Init+0x32c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	@ (80031f0 <HAL_GPIO_Init+0x330>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	@ (80031f4 <HAL_GPIO_Init+0x334>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a55      	ldr	r2, [pc, #340]	@ (80031f8 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a54      	ldr	r2, [pc, #336]	@ (80031fc <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a53      	ldr	r2, [pc, #332]	@ (8003200 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	@ (8003208 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003210 <HAL_GPIO_Init+0x350>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	@ (80031e8 <HAL_GPIO_Init+0x328>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b3d      	ldr	r3, [pc, #244]	@ (8003214 <HAL_GPIO_Init+0x354>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a34      	ldr	r2, [pc, #208]	@ (8003214 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b32      	ldr	r3, [pc, #200]	@ (8003214 <HAL_GPIO_Init+0x354>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_GPIO_Init+0x354>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1f      	ldr	r2, [pc, #124]	@ (8003214 <HAL_GPIO_Init+0x354>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <HAL_GPIO_Init+0x354>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <HAL_GPIO_Init+0x354>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae84 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40021400 	.word	0x40021400
 8003204:	40021800 	.word	0x40021800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40022000 	.word	0x40022000
 8003210:	40022400 	.word	0x40022400
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e12b      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fca6 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	@ 0x24
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800329e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b0:	f001 fb92 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a81      	ldr	r2, [pc, #516]	@ (80034c0 <HAL_I2C_Init+0x274>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d807      	bhi.n	80032d0 <HAL_I2C_Init+0x84>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a80      	ldr	r2, [pc, #512]	@ (80034c4 <HAL_I2C_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e006      	b.n	80032de <HAL_I2C_Init+0x92>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a7d      	ldr	r2, [pc, #500]	@ (80034c8 <HAL_I2C_Init+0x27c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0e7      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a78      	ldr	r2, [pc, #480]	@ (80034cc <HAL_I2C_Init+0x280>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a6a      	ldr	r2, [pc, #424]	@ (80034c0 <HAL_I2C_Init+0x274>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d802      	bhi.n	8003320 <HAL_I2C_Init+0xd4>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3301      	adds	r3, #1
 800331e:	e009      	b.n	8003334 <HAL_I2C_Init+0xe8>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a69      	ldr	r2, [pc, #420]	@ (80034d0 <HAL_I2C_Init+0x284>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	3301      	adds	r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003346:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	495c      	ldr	r1, [pc, #368]	@ (80034c0 <HAL_I2C_Init+0x274>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d819      	bhi.n	8003388 <HAL_I2C_Init+0x13c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e59      	subs	r1, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_I2C_Init+0x138>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e59      	subs	r1, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fbb1 f3f3 	udiv	r3, r1, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	e051      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003384:	2304      	movs	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x168>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x18e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x196>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1bc>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	817b      	strh	r3, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7fe fe12 	bl	8002110 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f040 80e0 	bne.w	80036bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	4970      	ldr	r1, [pc, #448]	@ (80036c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa92 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	e0d3      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x50>
 8003520:	2302      	movs	r3, #2
 8003522:	e0cc      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d007      	beq.n	800354a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	@ 0x21
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2210      	movs	r2, #16
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a50      	ldr	r2, [pc, #320]	@ (80036cc <HAL_I2C_Master_Transmit+0x1f8>)
 800358a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f9ca 	bl	800392c <I2C_MasterRequestWrite>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035b8:	e066      	b.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fb50 	bl	8003c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_I2C_Master_Transmit+0x188>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fb47 	bl	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01a      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d194      	bne.n	80035ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00100002 	.word	0x00100002
 80036cc:	ffff0000 	.word	0xffff0000

080036d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	460b      	mov	r3, r1
 80036de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7fe fd16 	bl	8002110 <HAL_GetTick>
 80036e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	f040 8111 	bne.w	800391a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2319      	movs	r3, #25
 80036fe:	2201      	movs	r2, #1
 8003700:	4988      	ldr	r1, [pc, #544]	@ (8003924 <HAL_I2C_IsDeviceReady+0x254>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f994 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	e104      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_I2C_IsDeviceReady+0x50>
 800371c:	2302      	movs	r3, #2
 800371e:	e0fd      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d007      	beq.n	8003746 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2224      	movs	r2, #36	@ 0x24
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a70      	ldr	r2, [pc, #448]	@ (8003928 <HAL_I2C_IsDeviceReady+0x258>)
 8003768:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003778:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f952 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a0:	d103      	bne.n	80037aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0b6      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe fca7 	bl	8002110 <HAL_GetTick>
 80037c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037f2:	e025      	b.n	8003840 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fe fc8c 	bl	8002110 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <HAL_I2C_IsDeviceReady+0x13a>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	22a0      	movs	r2, #160	@ 0xa0
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2ba0      	cmp	r3, #160	@ 0xa0
 800384a:	d005      	beq.n	8003858 <HAL_I2C_IsDeviceReady+0x188>
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_I2C_IsDeviceReady+0x188>
 8003852:	7dbb      	ldrb	r3, [r7, #22]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0cd      	beq.n	80037f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d129      	bne.n	80038c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2319      	movs	r3, #25
 800389a:	2201      	movs	r2, #1
 800389c:	4921      	ldr	r1, [pc, #132]	@ (8003924 <HAL_I2C_IsDeviceReady+0x254>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f8c6 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e036      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e02c      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2319      	movs	r3, #25
 80038e2:	2201      	movs	r2, #1
 80038e4:	490f      	ldr	r1, [pc, #60]	@ (8003924 <HAL_I2C_IsDeviceReady+0x254>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f8a2 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e012      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	f4ff af32 	bcc.w	800376a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000

0800392c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d006      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d003      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003954:	d108      	bne.n	8003968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00b      	b.n	8003980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	2b12      	cmp	r3, #18
 800396e:	d107      	bne.n	8003980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f84f 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	d103      	bne.n	80039b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e035      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e01b      	b.n	8003a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	11db      	asrs	r3, r3, #7
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0306 	and.w	r3, r3, #6
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f063 030f 	orn	r3, r3, #15
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	490e      	ldr	r1, [pc, #56]	@ (8003a28 <I2C_MasterRequestWrite+0xfc>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f898 	bl	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e010      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4907      	ldr	r1, [pc, #28]	@ (8003a2c <I2C_MasterRequestWrite+0x100>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f888 	bl	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	00010008 	.word	0x00010008
 8003a2c:	00010002 	.word	0x00010002

08003a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a40:	e048      	b.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d044      	beq.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe fb61 	bl	8002110 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d139      	bne.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10d      	bne.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	e00c      	b.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d116      	bne.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e023      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10d      	bne.n	8003afa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	e00c      	b.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d093      	beq.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b32:	e071      	b.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d123      	bne.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0204 	orr.w	r2, r3, #4
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e067      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d041      	beq.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fe fabc 	bl	8002110 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d136      	bne.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10c      	bne.n	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	e00b      	b.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e021      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10c      	bne.n	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e00b      	b.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4013      	ands	r3, r2
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f af6d 	bne.w	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c70:	e034      	b.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f886 	bl	8003d84 <I2C_IsAcknowledgeFailed>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e034      	b.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d028      	beq.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fe fa41 	bl	8002110 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d11d      	bne.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d016      	beq.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e007      	b.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d1c3      	bne.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d00:	e034      	b.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f83e 	bl	8003d84 <I2C_IsAcknowledgeFailed>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e034      	b.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d028      	beq.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fe f9f9 	bl	8002110 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11d      	bne.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d016      	beq.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e007      	b.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d1c3      	bne.n	8003d02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d11b      	bne.n	8003dd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003da4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d129      	bne.n	8003e4c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	@ 0x24
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0210 	bic.w	r2, r2, #16
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d12a      	bne.n	8003eca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	@ 0x24
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e94:	89fb      	ldrh	r3, [r7, #14]
 8003e96:	f023 030f 	bic.w	r3, r3, #15
 8003e9a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	89fa      	ldrh	r2, [r7, #14]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e101      	b.n	80040ee <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fd ff35 	bl	8001d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fe79 	bl	8005c1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7c1a      	ldrb	r2, [r3, #16]
 8003f32:	f88d 2000 	strb.w	r2, [sp]
 8003f36:	3304      	adds	r3, #4
 8003f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f3a:	f001 fe0b 	bl	8005b54 <USB_CoreInit>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0ce      	b.n	80040ee <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fe71 	bl	8005c3e <USB_SetCurrentMode>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0bf      	b.n	80040ee <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e04a      	b.n	800400a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3315      	adds	r3, #21
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3314      	adds	r3, #20
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	b298      	uxth	r0, r3
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	332e      	adds	r3, #46	@ 0x2e
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	331c      	adds	r3, #28
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3320      	adds	r3, #32
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3324      	adds	r3, #36	@ 0x24
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	3301      	adds	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	791b      	ldrb	r3, [r3, #4]
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3af      	bcc.n	8003f74 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e044      	b.n	80040a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	3301      	adds	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	791b      	ldrb	r3, [r3, #4]
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3b5      	bcc.n	800401a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7c1a      	ldrb	r2, [r3, #16]
 80040b6:	f88d 2000 	strb.w	r2, [sp]
 80040ba:	3304      	adds	r3, #4
 80040bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040be:	f001 fe0b 	bl	8005cd8 <USB_DevInit>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e00c      	b.n	80040ee <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 ffd3 	bl	8006092 <USB_DevDisconnect>

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e267      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d075      	beq.n	8004202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004116:	4b88      	ldr	r3, [pc, #544]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b04      	cmp	r3, #4
 8004120:	d00c      	beq.n	800413c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800412a:	2b08      	cmp	r3, #8
 800412c:	d112      	bne.n	8004154 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	4b82      	ldr	r3, [pc, #520]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413a:	d10b      	bne.n	8004154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d05b      	beq.n	8004200 <HAL_RCC_OscConfig+0x108>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d157      	bne.n	8004200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e242      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415c:	d106      	bne.n	800416c <HAL_RCC_OscConfig+0x74>
 800415e:	4b76      	ldr	r3, [pc, #472]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a75      	ldr	r2, [pc, #468]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xb0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x98>
 8004176:	4b70      	ldr	r3, [pc, #448]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6f      	ldr	r2, [pc, #444]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b6d      	ldr	r3, [pc, #436]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6c      	ldr	r2, [pc, #432]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xb0>
 8004190:	4b69      	ldr	r3, [pc, #420]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a68      	ldr	r2, [pc, #416]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b66      	ldr	r3, [pc, #408]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a65      	ldr	r2, [pc, #404]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd ffae 	bl	8002110 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd ffaa 	bl	8002110 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e207      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xc0>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fd ff9a 	bl	8002110 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fd ff96 	bl	8002110 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e1f3      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0xe8>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800420e:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004222:	2b08      	cmp	r3, #8
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b44      	ldr	r3, [pc, #272]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	4b41      	ldr	r3, [pc, #260]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x152>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1c7      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b3b      	ldr	r3, [pc, #236]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4937      	ldr	r1, [pc, #220]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	e03a      	b.n	80042d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004268:	4b34      	ldr	r3, [pc, #208]	@ (800433c <HAL_RCC_OscConfig+0x244>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd ff4f 	bl	8002110 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004276:	f7fd ff4b 	bl	8002110 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e1a8      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b28      	ldr	r3, [pc, #160]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4925      	ldr	r1, [pc, #148]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
 80042a8:	e015      	b.n	80042d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042aa:	4b24      	ldr	r3, [pc, #144]	@ (800433c <HAL_RCC_OscConfig+0x244>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd ff2e 	bl	8002110 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fd ff2a 	bl	8002110 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e187      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d036      	beq.n	8004350 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x248>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd ff0e 	bl	8002110 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fd ff0a 	bl	8002110 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e167      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <HAL_RCC_OscConfig+0x240>)
 800430c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x200>
 8004316:	e01b      	b.n	8004350 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004318:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_RCC_OscConfig+0x248>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fd fef7 	bl	8002110 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	e00e      	b.n	8004344 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004326:	f7fd fef3 	bl	8002110 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d907      	bls.n	8004344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e150      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
 8004338:	40023800 	.word	0x40023800
 800433c:	42470000 	.word	0x42470000
 8004340:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ea      	bne.n	8004326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8097 	beq.w	800448c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b81      	ldr	r3, [pc, #516]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10f      	bne.n	800438e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	4b7d      	ldr	r3, [pc, #500]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	4a7c      	ldr	r2, [pc, #496]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	@ 0x40
 800437e:	4b7a      	ldr	r3, [pc, #488]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438e:	4b77      	ldr	r3, [pc, #476]	@ (800456c <HAL_RCC_OscConfig+0x474>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d118      	bne.n	80043cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439a:	4b74      	ldr	r3, [pc, #464]	@ (800456c <HAL_RCC_OscConfig+0x474>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	@ (800456c <HAL_RCC_OscConfig+0x474>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a6:	f7fd feb3 	bl	8002110 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fd feaf 	bl	8002110 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e10c      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <HAL_RCC_OscConfig+0x474>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d106      	bne.n	80043e2 <HAL_RCC_OscConfig+0x2ea>
 80043d4:	4b64      	ldr	r3, [pc, #400]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a63      	ldr	r2, [pc, #396]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	e01c      	b.n	800441c <HAL_RCC_OscConfig+0x324>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x30c>
 80043ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6713      	str	r3, [r2, #112]	@ 0x70
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0x324>
 8004404:	4b58      	ldr	r3, [pc, #352]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	4a57      	ldr	r2, [pc, #348]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004410:	4b55      	ldr	r3, [pc, #340]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a54      	ldr	r2, [pc, #336]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004416:	f023 0304 	bic.w	r3, r3, #4
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fd fe74 	bl	8002110 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fd fe70 	bl	8002110 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0cb      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004442:	4b49      	ldr	r3, [pc, #292]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ee      	beq.n	800442c <HAL_RCC_OscConfig+0x334>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004450:	f7fd fe5e 	bl	8002110 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fd fe5a 	bl	8002110 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0b5      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446e:	4b3e      	ldr	r3, [pc, #248]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ee      	bne.n	8004458 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b39      	ldr	r3, [pc, #228]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	4a38      	ldr	r2, [pc, #224]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80a1 	beq.w	80045d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004496:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d05c      	beq.n	800455c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d141      	bne.n	800452e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <HAL_RCC_OscConfig+0x478>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd fe2e 	bl	8002110 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fe2a 	bl	8002110 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e087      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ca:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	491b      	ldr	r1, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x478>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fd fe03 	bl	8002110 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fdff 	bl	8002110 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e05c      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x416>
 800452c:	e054      	b.n	80045d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <HAL_RCC_OscConfig+0x478>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd fdec 	bl	8002110 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd fde8 	bl	8002110 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e045      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_RCC_OscConfig+0x470>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x444>
 800455a:	e03d      	b.n	80045d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e038      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
 8004568:	40023800 	.word	0x40023800
 800456c:	40007000 	.word	0x40007000
 8004570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <HAL_RCC_OscConfig+0x4ec>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d028      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d121      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d11a      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d111      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	3b01      	subs	r3, #1
 80045be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800

080045e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0cc      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b68      	ldr	r3, [pc, #416]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d90c      	bls.n	8004624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b65      	ldr	r3, [pc, #404]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b63      	ldr	r3, [pc, #396]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0b8      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800463c:	4b59      	ldr	r3, [pc, #356]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4a58      	ldr	r2, [pc, #352]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004654:	4b53      	ldr	r3, [pc, #332]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a52      	ldr	r2, [pc, #328]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800465e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004660:	4b50      	ldr	r3, [pc, #320]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	494d      	ldr	r1, [pc, #308]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d044      	beq.n	8004708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d119      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e07f      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d003      	beq.n	80046a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a6:	4b3f      	ldr	r3, [pc, #252]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06f      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b6:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e067      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c6:	4b37      	ldr	r3, [pc, #220]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4934      	ldr	r1, [pc, #208]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d8:	f7fd fd1a 	bl	8002110 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fd fd16 	bl	8002110 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e04f      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 020c 	and.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	429a      	cmp	r2, r3
 8004706:	d1eb      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b25      	ldr	r3, [pc, #148]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d20c      	bcs.n	8004730 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b22      	ldr	r3, [pc, #136]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e032      	b.n	8004796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473c:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4916      	ldr	r1, [pc, #88]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800475a:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	490e      	ldr	r1, [pc, #56]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800476e:	f000 f821 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 8004772:	4602      	mov	r2, r0
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	490a      	ldr	r1, [pc, #40]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	5ccb      	ldrb	r3, [r1, r3]
 8004782:	fa22 f303 	lsr.w	r3, r2, r3
 8004786:	4a09      	ldr	r2, [pc, #36]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800478a:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd fc7a 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023c00 	.word	0x40023c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	08006acc 	.word	0x08006acc
 80047ac:	20000000 	.word	0x20000000
 80047b0:	20000004 	.word	0x20000004

080047b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b094      	sub	sp, #80	@ 0x50
 80047ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047cc:	4b79      	ldr	r3, [pc, #484]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d00d      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x40>
 80047d8:	2b08      	cmp	r3, #8
 80047da:	f200 80e1 	bhi.w	80049a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x34>
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x3a>
 80047e6:	e0db      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b73      	ldr	r3, [pc, #460]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ec:	e0db      	b.n	80049a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ee:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x208>)
 80047f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f2:	e0d8      	b.n	80049a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f4:	4b6f      	ldr	r3, [pc, #444]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fe:	4b6d      	ldr	r3, [pc, #436]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	2200      	movs	r2, #0
 8004812:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004814:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481c:	633b      	str	r3, [r7, #48]	@ 0x30
 800481e:	2300      	movs	r3, #0
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
 8004822:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	0159      	lsls	r1, r3, #5
 8004834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004838:	0150      	lsls	r0, r2, #5
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4621      	mov	r1, r4
 8004840:	1a51      	subs	r1, r2, r1
 8004842:	6139      	str	r1, [r7, #16]
 8004844:	4629      	mov	r1, r5
 8004846:	eb63 0301 	sbc.w	r3, r3, r1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004858:	4659      	mov	r1, fp
 800485a:	018b      	lsls	r3, r1, #6
 800485c:	4651      	mov	r1, sl
 800485e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004862:	4651      	mov	r1, sl
 8004864:	018a      	lsls	r2, r1, #6
 8004866:	4651      	mov	r1, sl
 8004868:	ebb2 0801 	subs.w	r8, r2, r1
 800486c:	4659      	mov	r1, fp
 800486e:	eb63 0901 	sbc.w	r9, r3, r1
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004886:	4690      	mov	r8, r2
 8004888:	4699      	mov	r9, r3
 800488a:	4623      	mov	r3, r4
 800488c:	eb18 0303 	adds.w	r3, r8, r3
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	462b      	mov	r3, r5
 8004894:	eb49 0303 	adc.w	r3, r9, r3
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048a6:	4629      	mov	r1, r5
 80048a8:	024b      	lsls	r3, r1, #9
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b0:	4621      	mov	r1, r4
 80048b2:	024a      	lsls	r2, r1, #9
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048c4:	f7fb fce2 	bl	800028c <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	e058      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b38      	ldr	r3, [pc, #224]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	2200      	movs	r2, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	4611      	mov	r1, r2
 80048de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	f04f 0000 	mov.w	r0, #0
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	0159      	lsls	r1, r3, #5
 80048fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fe:	0150      	lsls	r0, r2, #5
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4641      	mov	r1, r8
 8004906:	ebb2 0a01 	subs.w	sl, r2, r1
 800490a:	4649      	mov	r1, r9
 800490c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800491c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004924:	ebb2 040a 	subs.w	r4, r2, sl
 8004928:	eb63 050b 	sbc.w	r5, r3, fp
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	00eb      	lsls	r3, r5, #3
 8004936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493a:	00e2      	lsls	r2, r4, #3
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	4643      	mov	r3, r8
 8004942:	18e3      	adds	r3, r4, r3
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	464b      	mov	r3, r9
 8004948:	eb45 0303 	adc.w	r3, r5, r3
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495a:	4629      	mov	r1, r5
 800495c:	028b      	lsls	r3, r1, #10
 800495e:	4621      	mov	r1, r4
 8004960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004964:	4621      	mov	r1, r4
 8004966:	028a      	lsls	r2, r1, #10
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496e:	2200      	movs	r2, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	61fa      	str	r2, [r7, #28]
 8004974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004978:	f7fb fc88 	bl	800028c <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4613      	mov	r3, r2
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800499e:	e002      	b.n	80049a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3750      	adds	r7, #80	@ 0x50
 80049ac:	46bd      	mov	sp, r7
 80049ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	007a1200 	.word	0x007a1200

080049c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	@ (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a9b      	lsrs	r3, r3, #10
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4903      	ldr	r1, [pc, #12]	@ (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	08006adc 	.word	0x08006adc

08004a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a04:	f7ff ffdc 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0b5b      	lsrs	r3, r3, #13
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	@ (8004a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08006adc 	.word	0x08006adc

08004a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07b      	b.n	8004b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4a:	d009      	beq.n	8004a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61da      	str	r2, [r3, #28]
 8004a52:	e005      	b.n	8004a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f8ea 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0104 	and.w	r1, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	f003 0210 	and.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4a:	f7fd fae1 	bl	8002110 <HAL_GetTick>
 8004b4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
 8004b62:	e12a      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Transmit+0x36>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e122      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Transmit+0x48>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e11b      	b.n	8004dba <HAL_SPI_Transmit+0x280>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d152      	bne.n	8004cc0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xee>
 8004c22:	8b7b      	ldrh	r3, [r7, #26]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d145      	bne.n	8004cb4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e032      	b.n	8004cb4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c80:	e018      	b.n	8004cb4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fd fa45 	bl	8002110 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x160>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x166>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e082      	b.n	8004dba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1c7      	bne.n	8004c4e <HAL_SPI_Transmit+0x114>
 8004cbe:	e053      	b.n	8004d68 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_Transmit+0x194>
 8004cc8:	8b7b      	ldrh	r3, [r7, #26]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d147      	bne.n	8004d5e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cf4:	e033      	b.n	8004d5e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d113      	bne.n	8004d2c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d2a:	e018      	b.n	8004d5e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2c:	f7fd f9f0 	bl	8002110 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_Transmit+0x20a>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Transmit+0x210>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e02d      	b.n	8004dba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1c6      	bne.n	8004cf6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fbd9 	bl	8005524 <SPI_EndRxTxTransaction>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af02      	add	r7, sp, #8
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d001      	beq.n	8004de2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
 8004de0:	e104      	b.n	8004fec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dea:	d112      	bne.n	8004e12 <HAL_SPI_Receive+0x50>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10e      	bne.n	8004e12 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2204      	movs	r2, #4
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f8f3 	bl	8004ff4 <HAL_SPI_TransmitReceive>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	e0ec      	b.n	8004fec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e12:	f7fd f97d 	bl	8002110 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_Receive+0x62>
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0e1      	b.n	8004fec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Receive+0x74>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e0da      	b.n	8004fec <HAL_SPI_Receive+0x22a>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2204      	movs	r2, #4
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e84:	d10f      	bne.n	8004ea6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d007      	beq.n	8004ec4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d170      	bne.n	8004fae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ecc:	e035      	b.n	8004f3a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d115      	bne.n	8004f08 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f103 020c 	add.w	r2, r3, #12
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f06:	e018      	b.n	8004f3a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f08:	f7fd f902 	bl	8002110 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d803      	bhi.n	8004f20 <HAL_SPI_Receive+0x15e>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_Receive+0x164>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e058      	b.n	8004fec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1c4      	bne.n	8004ece <HAL_SPI_Receive+0x10c>
 8004f44:	e038      	b.n	8004fb8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d113      	bne.n	8004f7c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f7a:	e018      	b.n	8004fae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7c:	f7fd f8c8 	bl	8002110 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d803      	bhi.n	8004f94 <HAL_SPI_Receive+0x1d2>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d102      	bne.n	8004f9a <HAL_SPI_Receive+0x1d8>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e01e      	b.n	8004fec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1c6      	bne.n	8004f46 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa4b 	bl	8005458 <SPI_EndRxTransaction>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	@ 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005002:	2301      	movs	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005006:	f7fd f883 	bl	8002110 <HAL_GetTick>
 800500a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005012:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d00c      	beq.n	800503e <HAL_SPI_TransmitReceive+0x4a>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800502a:	d106      	bne.n	800503a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <HAL_SPI_TransmitReceive+0x46>
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d001      	beq.n	800503e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	e17f      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x5c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x5c>
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e174      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x6e>
 800505e:	2302      	movs	r3, #2
 8005060:	e16d      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b04      	cmp	r3, #4
 8005074:	d003      	beq.n	800507e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2205      	movs	r2, #5
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d007      	beq.n	80050d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050da:	d17e      	bne.n	80051da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_SPI_TransmitReceive+0xf6>
 80050e4:	8afb      	ldrh	r3, [r7, #22]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d16c      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	881a      	ldrh	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	1c9a      	adds	r2, r3, #2
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800510e:	e059      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d11b      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x162>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d016      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x162>
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	2b01      	cmp	r3, #1
 800512c:	d113      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d119      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x1a4>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	b292      	uxth	r2, r2
 800517a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005194:	2301      	movs	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005198:	f7fc ffba 	bl	8002110 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d80d      	bhi.n	80051c4 <HAL_SPI_TransmitReceive+0x1d0>
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d009      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0bc      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1a0      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x11c>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d19b      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x11c>
 80051d8:	e082      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_TransmitReceive+0x1f4>
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d171      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800520e:	e05d      	b.n	80052cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d11c      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x264>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d017      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x264>
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	2b01      	cmp	r3, #1
 800522c:	d114      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d119      	bne.n	800529a <HAL_SPI_TransmitReceive+0x2a6>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d014      	beq.n	800529a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800529a:	f7fc ff39 	bl	8002110 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d803      	bhi.n	80052b2 <HAL_SPI_TransmitReceive+0x2be>
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d102      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x2c4>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e038      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d19c      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x21c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d197      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e0:	6a3a      	ldr	r2, [r7, #32]
 80052e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f91d 	bl	8005524 <SPI_EndRxTxTransaction>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e01d      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800533c:	2300      	movs	r3, #0
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	@ 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005358:	f7fc feda 	bl	8002110 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4413      	add	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005368:	f7fc fed2 	bl	8002110 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536e:	4b39      	ldr	r3, [pc, #228]	@ (8005454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	0d1b      	lsrs	r3, r3, #20
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537e:	e054      	b.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d050      	beq.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005388:	f7fc fec2 	bl	8002110 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	429a      	cmp	r2, r3
 8005396:	d902      	bls.n	800539e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d13d      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b6:	d111      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c0:	d004      	beq.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ca:	d107      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e4:	d10f      	bne.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e017      	b.n	800544a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d19b      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000000 	.word	0x20000000

08005458 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546c:	d111      	bne.n	8005492 <SPI_EndRxTransaction+0x3a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005476:	d004      	beq.n	8005482 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005480:	d107      	bne.n	8005492 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549a:	d12a      	bne.n	80054f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a4:	d012      	beq.n	80054cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	2180      	movs	r1, #128	@ 0x80
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff ff49 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02d      	beq.n	8005518 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e026      	b.n	800551a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2101      	movs	r1, #1
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff ff36 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e013      	b.n	800551a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2101      	movs	r1, #1
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff ff23 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e000      	b.n	800551a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2201      	movs	r2, #1
 8005538:	2102      	movs	r1, #2
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff04 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e032      	b.n	80055bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005556:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <SPI_EndRxTxTransaction+0xa0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <SPI_EndRxTxTransaction+0xa4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	0d5b      	lsrs	r3, r3, #21
 8005562:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005574:	d112      	bne.n	800559c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	2180      	movs	r1, #128	@ 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff fee1 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e00f      	b.n	80055bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b80      	cmp	r3, #128	@ 0x80
 80055b4:	d0f2      	beq.n	800559c <SPI_EndRxTxTransaction+0x78>
 80055b6:	e000      	b.n	80055ba <SPI_EndRxTxTransaction+0x96>
        break;
 80055b8:	bf00      	nop
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000000 	.word	0x20000000
 80055c8:	165e9f81 	.word	0x165e9f81

080055cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e042      	b.n	8005664 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fb76 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	@ 0x24
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800560e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f82b 	bl	800566c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800566c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005670:	b0c0      	sub	sp, #256	@ 0x100
 8005672:	af00      	add	r7, sp, #0
 8005674:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005688:	68d9      	ldr	r1, [r3, #12]
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	ea40 0301 	orr.w	r3, r0, r1
 8005694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056c4:	f021 010c 	bic.w	r1, r1, #12
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056d2:	430b      	orrs	r3, r1
 80056d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e6:	6999      	ldr	r1, [r3, #24]
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	ea40 0301 	orr.w	r3, r0, r1
 80056f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005938 <UART_SetConfig+0x2cc>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d005      	beq.n	800570c <UART_SetConfig+0xa0>
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b8d      	ldr	r3, [pc, #564]	@ (800593c <UART_SetConfig+0x2d0>)
 8005708:	429a      	cmp	r2, r3
 800570a:	d104      	bne.n	8005716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7ff f978 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 8005710:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005714:	e003      	b.n	800571e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005716:	f7ff f95f 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 800571a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005728:	f040 810c 	bne.w	8005944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005730:	2200      	movs	r2, #0
 8005732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005736:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800573a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	1891      	adds	r1, r2, r2
 8005744:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005746:	415b      	adcs	r3, r3
 8005748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800574a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800574e:	4621      	mov	r1, r4
 8005750:	eb12 0801 	adds.w	r8, r2, r1
 8005754:	4629      	mov	r1, r5
 8005756:	eb43 0901 	adc.w	r9, r3, r1
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576e:	4690      	mov	r8, r2
 8005770:	4699      	mov	r9, r3
 8005772:	4623      	mov	r3, r4
 8005774:	eb18 0303 	adds.w	r3, r8, r3
 8005778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800577c:	462b      	mov	r3, r5
 800577e:	eb49 0303 	adc.w	r3, r9, r3
 8005782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005792:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800579a:	460b      	mov	r3, r1
 800579c:	18db      	adds	r3, r3, r3
 800579e:	653b      	str	r3, [r7, #80]	@ 0x50
 80057a0:	4613      	mov	r3, r2
 80057a2:	eb42 0303 	adc.w	r3, r2, r3
 80057a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057b0:	f7fa fd6c 	bl	800028c <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4b61      	ldr	r3, [pc, #388]	@ (8005940 <UART_SetConfig+0x2d4>)
 80057ba:	fba3 2302 	umull	r2, r3, r3, r2
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	011c      	lsls	r4, r3, #4
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057dc:	415b      	adcs	r3, r3
 80057de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057e4:	4641      	mov	r1, r8
 80057e6:	eb12 0a01 	adds.w	sl, r2, r1
 80057ea:	4649      	mov	r1, r9
 80057ec:	eb43 0b01 	adc.w	fp, r3, r1
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005804:	4692      	mov	sl, r2
 8005806:	469b      	mov	fp, r3
 8005808:	4643      	mov	r3, r8
 800580a:	eb1a 0303 	adds.w	r3, sl, r3
 800580e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005812:	464b      	mov	r3, r9
 8005814:	eb4b 0303 	adc.w	r3, fp, r3
 8005818:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005828:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800582c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005830:	460b      	mov	r3, r1
 8005832:	18db      	adds	r3, r3, r3
 8005834:	643b      	str	r3, [r7, #64]	@ 0x40
 8005836:	4613      	mov	r3, r2
 8005838:	eb42 0303 	adc.w	r3, r2, r3
 800583c:	647b      	str	r3, [r7, #68]	@ 0x44
 800583e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005846:	f7fa fd21 	bl	800028c <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4611      	mov	r1, r2
 8005850:	4b3b      	ldr	r3, [pc, #236]	@ (8005940 <UART_SetConfig+0x2d4>)
 8005852:	fba3 2301 	umull	r2, r3, r3, r1
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	2264      	movs	r2, #100	@ 0x64
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	1acb      	subs	r3, r1, r3
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005866:	4b36      	ldr	r3, [pc, #216]	@ (8005940 <UART_SetConfig+0x2d4>)
 8005868:	fba3 2302 	umull	r2, r3, r3, r2
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005874:	441c      	add	r4, r3
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005880:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005890:	415b      	adcs	r3, r3
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005898:	4641      	mov	r1, r8
 800589a:	1851      	adds	r1, r2, r1
 800589c:	6339      	str	r1, [r7, #48]	@ 0x30
 800589e:	4649      	mov	r1, r9
 80058a0:	414b      	adcs	r3, r1
 80058a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058b0:	4659      	mov	r1, fp
 80058b2:	00cb      	lsls	r3, r1, #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ba:	4651      	mov	r1, sl
 80058bc:	00ca      	lsls	r2, r1, #3
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	4642      	mov	r2, r8
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058cc:	464b      	mov	r3, r9
 80058ce:	460a      	mov	r2, r1
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058ec:	460b      	mov	r3, r1
 80058ee:	18db      	adds	r3, r3, r3
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f2:	4613      	mov	r3, r2
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005902:	f7fa fcc3 	bl	800028c <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <UART_SetConfig+0x2d4>)
 800590c:	fba3 1302 	umull	r1, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	2164      	movs	r1, #100	@ 0x64
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	3332      	adds	r3, #50	@ 0x32
 800591e:	4a08      	ldr	r2, [pc, #32]	@ (8005940 <UART_SetConfig+0x2d4>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	f003 0207 	and.w	r2, r3, #7
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4422      	add	r2, r4
 8005932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005934:	e106      	b.n	8005b44 <UART_SetConfig+0x4d8>
 8005936:	bf00      	nop
 8005938:	40011000 	.word	0x40011000
 800593c:	40011400 	.word	0x40011400
 8005940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800594e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005956:	4642      	mov	r2, r8
 8005958:	464b      	mov	r3, r9
 800595a:	1891      	adds	r1, r2, r2
 800595c:	6239      	str	r1, [r7, #32]
 800595e:	415b      	adcs	r3, r3
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
 8005962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005966:	4641      	mov	r1, r8
 8005968:	1854      	adds	r4, r2, r1
 800596a:	4649      	mov	r1, r9
 800596c:	eb43 0501 	adc.w	r5, r3, r1
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	00eb      	lsls	r3, r5, #3
 800597a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597e:	00e2      	lsls	r2, r4, #3
 8005980:	4614      	mov	r4, r2
 8005982:	461d      	mov	r5, r3
 8005984:	4643      	mov	r3, r8
 8005986:	18e3      	adds	r3, r4, r3
 8005988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800598c:	464b      	mov	r3, r9
 800598e:	eb45 0303 	adc.w	r3, r5, r3
 8005992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059b2:	4629      	mov	r1, r5
 80059b4:	008b      	lsls	r3, r1, #2
 80059b6:	4621      	mov	r1, r4
 80059b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059bc:	4621      	mov	r1, r4
 80059be:	008a      	lsls	r2, r1, #2
 80059c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059c4:	f7fa fc62 	bl	800028c <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4b60      	ldr	r3, [pc, #384]	@ (8005b50 <UART_SetConfig+0x4e4>)
 80059ce:	fba3 2302 	umull	r2, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	011c      	lsls	r4, r3, #4
 80059d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	1891      	adds	r1, r2, r2
 80059ee:	61b9      	str	r1, [r7, #24]
 80059f0:	415b      	adcs	r3, r3
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f8:	4641      	mov	r1, r8
 80059fa:	1851      	adds	r1, r2, r1
 80059fc:	6139      	str	r1, [r7, #16]
 80059fe:	4649      	mov	r1, r9
 8005a00:	414b      	adcs	r3, r1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a10:	4659      	mov	r1, fp
 8005a12:	00cb      	lsls	r3, r1, #3
 8005a14:	4651      	mov	r1, sl
 8005a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	00ca      	lsls	r2, r1, #3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	4642      	mov	r2, r8
 8005a26:	189b      	adds	r3, r3, r2
 8005a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	460a      	mov	r2, r1
 8005a30:	eb42 0303 	adc.w	r3, r2, r3
 8005a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a50:	4649      	mov	r1, r9
 8005a52:	008b      	lsls	r3, r1, #2
 8005a54:	4641      	mov	r1, r8
 8005a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	008a      	lsls	r2, r1, #2
 8005a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a62:	f7fa fc13 	bl	800028c <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4b38      	ldr	r3, [pc, #224]	@ (8005b50 <UART_SetConfig+0x4e4>)
 8005a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2264      	movs	r2, #100	@ 0x64
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	1acb      	subs	r3, r1, r3
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	3332      	adds	r3, #50	@ 0x32
 8005a80:	4a33      	ldr	r2, [pc, #204]	@ (8005b50 <UART_SetConfig+0x4e4>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a8c:	441c      	add	r4, r3
 8005a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a92:	2200      	movs	r2, #0
 8005a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a96:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	1891      	adds	r1, r2, r2
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	415b      	adcs	r3, r3
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aac:	4641      	mov	r1, r8
 8005aae:	1851      	adds	r1, r2, r1
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	414b      	adcs	r3, r1
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	00cb      	lsls	r3, r1, #3
 8005ac8:	4651      	mov	r1, sl
 8005aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ace:	4651      	mov	r1, sl
 8005ad0:	00ca      	lsls	r2, r1, #3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4642      	mov	r2, r8
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ade:	464b      	mov	r3, r9
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	eb42 0303 	adc.w	r3, r2, r3
 8005ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005af2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b00:	4649      	mov	r1, r9
 8005b02:	008b      	lsls	r3, r1, #2
 8005b04:	4641      	mov	r1, r8
 8005b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	008a      	lsls	r2, r1, #2
 8005b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b12:	f7fa fbbb 	bl	800028c <__aeabi_uldivmod>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <UART_SetConfig+0x4e4>)
 8005b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	2164      	movs	r1, #100	@ 0x64
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	3332      	adds	r3, #50	@ 0x32
 8005b2e:	4a08      	ldr	r2, [pc, #32]	@ (8005b50 <UART_SetConfig+0x4e4>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4422      	add	r2, r4
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b50:	51eb851f 	.word	0x51eb851f

08005b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b54:	b084      	sub	sp, #16
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	f107 001c 	add.w	r0, r7, #28
 8005b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d123      	bne.n	8005bb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 faa0 	bl	80060f0 <USB_CoreReset>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e01b      	b.n	8005bee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa94 	bl	80060f0 <USB_CoreReset>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8005be0:	e005      	b.n	8005bee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bee:	7fbb      	ldrb	r3, [r7, #30]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10b      	bne.n	8005c0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f043 0206 	orr.w	r2, r3, #6
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c18:	b004      	add	sp, #16
 8005c1a:	4770      	bx	lr

08005c1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f023 0201 	bic.w	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d115      	bne.n	8005c8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c6c:	200a      	movs	r0, #10
 8005c6e:	f7fc fa5b 	bl	8002128 <HAL_Delay>
      ms += 10U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	330a      	adds	r3, #10
 8005c76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa2b 	bl	80060d4 <USB_GetMode>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d01e      	beq.n	8005cc2 <USB_SetCurrentMode+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c88:	d9f0      	bls.n	8005c6c <USB_SetCurrentMode+0x2e>
 8005c8a:	e01a      	b.n	8005cc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d115      	bne.n	8005cbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c9e:	200a      	movs	r0, #10
 8005ca0:	f7fc fa42 	bl	8002128 <HAL_Delay>
      ms += 10U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	330a      	adds	r3, #10
 8005ca8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa12 	bl	80060d4 <USB_GetMode>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <USB_SetCurrentMode+0x84>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cba:	d9f0      	bls.n	8005c9e <USB_SetCurrentMode+0x60>
 8005cbc:	e001      	b.n	8005cc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e005      	b.n	8005cce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2bc8      	cmp	r3, #200	@ 0xc8
 8005cc6:	d101      	bne.n	8005ccc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cd8:	b084      	sub	sp, #16
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e009      	b.n	8005d0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3340      	adds	r3, #64	@ 0x40
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b0e      	cmp	r3, #14
 8005d10:	d9f2      	bls.n	8005cf8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11c      	bne.n	8005d54 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d52:	e00b      	b.n	8005d6c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d58:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d72:	461a      	mov	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d10d      	bne.n	8005d9c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f968 	bl	8006060 <USB_SetDevSpeed>
 8005d90:	e008      	b.n	8005da4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d92:	2101      	movs	r1, #1
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f963 	bl	8006060 <USB_SetDevSpeed>
 8005d9a:	e003      	b.n	8005da4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d9c:	2103      	movs	r1, #3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f95e 	bl	8006060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005da4:	2110      	movs	r1, #16
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8fa 	bl	8005fa0 <USB_FlushTxFifo>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f924 	bl	8006004 <USB_FlushRxFifo>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dcc:	461a      	mov	r2, r3
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e043      	b.n	8005e78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e06:	d118      	bne.n	8005e3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e013      	b.n	8005e4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e008      	b.n	8005e4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	461a      	mov	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d3b5      	bcc.n	8005df0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	e043      	b.n	8005f12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea0:	d118      	bne.n	8005ed4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e013      	b.n	8005ee6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e008      	b.n	8005ee6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f04:	461a      	mov	r2, r3
 8005f06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f16:	461a      	mov	r2, r3
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d3b5      	bcc.n	8005e8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f043 0210 	orr.w	r2, r3, #16
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	4b10      	ldr	r3, [pc, #64]	@ (8005f9c <USB_DevInit+0x2c4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f043 0208 	orr.w	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d107      	bne.n	8005f8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f84:	f043 0304 	orr.w	r3, r3, #4
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f98:	b004      	add	sp, #16
 8005f9a:	4770      	bx	lr
 8005f9c:	803c3800 	.word	0x803c3800

08005fa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fba:	d901      	bls.n	8005fc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e01b      	b.n	8005ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	daf2      	bge.n	8005fae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe4:	d901      	bls.n	8005fea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d0f0      	beq.n	8005fd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800601c:	d901      	bls.n	8006022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e018      	b.n	8006054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	daf2      	bge.n	8006010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2210      	movs	r2, #16
 8006032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006040:	d901      	bls.n	8006046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e006      	b.n	8006054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b10      	cmp	r3, #16
 8006050:	d0f0      	beq.n	8006034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006080:	4313      	orrs	r3, r2
 8006082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0301 	and.w	r3, r3, #1
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3301      	adds	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006108:	d901      	bls.n	800610e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e01b      	b.n	8006146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	daf2      	bge.n	80060fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006132:	d901      	bls.n	8006138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e006      	b.n	8006146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d0f0      	beq.n	8006126 <USB_CoreReset+0x36>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <std>:
 8006154:	2300      	movs	r3, #0
 8006156:	b510      	push	{r4, lr}
 8006158:	4604      	mov	r4, r0
 800615a:	e9c0 3300 	strd	r3, r3, [r0]
 800615e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006162:	6083      	str	r3, [r0, #8]
 8006164:	8181      	strh	r1, [r0, #12]
 8006166:	6643      	str	r3, [r0, #100]	@ 0x64
 8006168:	81c2      	strh	r2, [r0, #14]
 800616a:	6183      	str	r3, [r0, #24]
 800616c:	4619      	mov	r1, r3
 800616e:	2208      	movs	r2, #8
 8006170:	305c      	adds	r0, #92	@ 0x5c
 8006172:	f000 f9e7 	bl	8006544 <memset>
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <std+0x58>)
 8006178:	6263      	str	r3, [r4, #36]	@ 0x24
 800617a:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <std+0x5c>)
 800617c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <std+0x60>)
 8006180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006182:	4b0d      	ldr	r3, [pc, #52]	@ (80061b8 <std+0x64>)
 8006184:	6323      	str	r3, [r4, #48]	@ 0x30
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <std+0x68>)
 8006188:	6224      	str	r4, [r4, #32]
 800618a:	429c      	cmp	r4, r3
 800618c:	d006      	beq.n	800619c <std+0x48>
 800618e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006192:	4294      	cmp	r4, r2
 8006194:	d002      	beq.n	800619c <std+0x48>
 8006196:	33d0      	adds	r3, #208	@ 0xd0
 8006198:	429c      	cmp	r4, r3
 800619a:	d105      	bne.n	80061a8 <std+0x54>
 800619c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80061a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a4:	f000 ba46 	b.w	8006634 <__retarget_lock_init_recursive>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	08006395 	.word	0x08006395
 80061b0:	080063b7 	.word	0x080063b7
 80061b4:	080063ef 	.word	0x080063ef
 80061b8:	08006413 	.word	0x08006413
 80061bc:	200008e8 	.word	0x200008e8

080061c0 <stdio_exit_handler>:
 80061c0:	4a02      	ldr	r2, [pc, #8]	@ (80061cc <stdio_exit_handler+0xc>)
 80061c2:	4903      	ldr	r1, [pc, #12]	@ (80061d0 <stdio_exit_handler+0x10>)
 80061c4:	4803      	ldr	r0, [pc, #12]	@ (80061d4 <stdio_exit_handler+0x14>)
 80061c6:	f000 b869 	b.w	800629c <_fwalk_sglue>
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c
 80061d0:	08006935 	.word	0x08006935
 80061d4:	2000001c 	.word	0x2000001c

080061d8 <cleanup_stdio>:
 80061d8:	6841      	ldr	r1, [r0, #4]
 80061da:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <cleanup_stdio+0x34>)
 80061dc:	4299      	cmp	r1, r3
 80061de:	b510      	push	{r4, lr}
 80061e0:	4604      	mov	r4, r0
 80061e2:	d001      	beq.n	80061e8 <cleanup_stdio+0x10>
 80061e4:	f000 fba6 	bl	8006934 <_fflush_r>
 80061e8:	68a1      	ldr	r1, [r4, #8]
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <cleanup_stdio+0x38>)
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <cleanup_stdio+0x1e>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fb9f 	bl	8006934 <_fflush_r>
 80061f6:	68e1      	ldr	r1, [r4, #12]
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <cleanup_stdio+0x3c>)
 80061fa:	4299      	cmp	r1, r3
 80061fc:	d004      	beq.n	8006208 <cleanup_stdio+0x30>
 80061fe:	4620      	mov	r0, r4
 8006200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006204:	f000 bb96 	b.w	8006934 <_fflush_r>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	200008e8 	.word	0x200008e8
 8006210:	20000950 	.word	0x20000950
 8006214:	200009b8 	.word	0x200009b8

08006218 <global_stdio_init.part.0>:
 8006218:	b510      	push	{r4, lr}
 800621a:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <global_stdio_init.part.0+0x30>)
 800621c:	4c0b      	ldr	r4, [pc, #44]	@ (800624c <global_stdio_init.part.0+0x34>)
 800621e:	4a0c      	ldr	r2, [pc, #48]	@ (8006250 <global_stdio_init.part.0+0x38>)
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	4620      	mov	r0, r4
 8006224:	2200      	movs	r2, #0
 8006226:	2104      	movs	r1, #4
 8006228:	f7ff ff94 	bl	8006154 <std>
 800622c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006230:	2201      	movs	r2, #1
 8006232:	2109      	movs	r1, #9
 8006234:	f7ff ff8e 	bl	8006154 <std>
 8006238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800623c:	2202      	movs	r2, #2
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006242:	2112      	movs	r1, #18
 8006244:	f7ff bf86 	b.w	8006154 <std>
 8006248:	20000a20 	.word	0x20000a20
 800624c:	200008e8 	.word	0x200008e8
 8006250:	080061c1 	.word	0x080061c1

08006254 <__sfp_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	@ (800625c <__sfp_lock_acquire+0x8>)
 8006256:	f000 b9ee 	b.w	8006636 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	20000a29 	.word	0x20000a29

08006260 <__sfp_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	@ (8006268 <__sfp_lock_release+0x8>)
 8006262:	f000 b9e9 	b.w	8006638 <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	20000a29 	.word	0x20000a29

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sfp_lock_acquire>
 8006274:	6a23      	ldr	r3, [r4, #32]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sfp_lock_release>
 8006280:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <__sinit+0x28>)
 8006282:	6223      	str	r3, [r4, #32]
 8006284:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <__sinit+0x2c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f5      	bne.n	8006278 <__sinit+0xc>
 800628c:	f7ff ffc4 	bl	8006218 <global_stdio_init.part.0>
 8006290:	e7f2      	b.n	8006278 <__sinit+0xc>
 8006292:	bf00      	nop
 8006294:	080061d9 	.word	0x080061d9
 8006298:	20000a20 	.word	0x20000a20

0800629c <_fwalk_sglue>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4607      	mov	r7, r0
 80062a2:	4688      	mov	r8, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	2600      	movs	r6, #0
 80062a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ac:	f1b9 0901 	subs.w	r9, r9, #1
 80062b0:	d505      	bpl.n	80062be <_fwalk_sglue+0x22>
 80062b2:	6824      	ldr	r4, [r4, #0]
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	d1f7      	bne.n	80062a8 <_fwalk_sglue+0xc>
 80062b8:	4630      	mov	r0, r6
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d907      	bls.n	80062d4 <_fwalk_sglue+0x38>
 80062c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d003      	beq.n	80062d4 <_fwalk_sglue+0x38>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c0      	blx	r8
 80062d2:	4306      	orrs	r6, r0
 80062d4:	3568      	adds	r5, #104	@ 0x68
 80062d6:	e7e9      	b.n	80062ac <_fwalk_sglue+0x10>

080062d8 <_puts_r>:
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	6884      	ldr	r4, [r0, #8]
 80062de:	4605      	mov	r5, r0
 80062e0:	460e      	mov	r6, r1
 80062e2:	b90b      	cbnz	r3, 80062e8 <_puts_r+0x10>
 80062e4:	f7ff ffc2 	bl	800626c <__sinit>
 80062e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ea:	07db      	lsls	r3, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_puts_r+0x22>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	0598      	lsls	r0, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_puts_r+0x22>
 80062f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f6:	f000 f99e 	bl	8006636 <__retarget_lock_acquire_recursive>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	0719      	lsls	r1, r3, #28
 80062fe:	d502      	bpl.n	8006306 <_puts_r+0x2e>
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d135      	bne.n	8006372 <_puts_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f8c5 	bl	8006498 <__swsetup_r>
 800630e:	b380      	cbz	r0, 8006372 <_puts_r+0x9a>
 8006310:	f04f 35ff 	mov.w	r5, #4294967295
 8006314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006316:	07da      	lsls	r2, r3, #31
 8006318:	d405      	bmi.n	8006326 <_puts_r+0x4e>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	059b      	lsls	r3, r3, #22
 800631e:	d402      	bmi.n	8006326 <_puts_r+0x4e>
 8006320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006322:	f000 f989 	bl	8006638 <__retarget_lock_release_recursive>
 8006326:	4628      	mov	r0, r5
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	2b00      	cmp	r3, #0
 800632c:	da04      	bge.n	8006338 <_puts_r+0x60>
 800632e:	69a2      	ldr	r2, [r4, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	dc17      	bgt.n	8006364 <_puts_r+0x8c>
 8006334:	290a      	cmp	r1, #10
 8006336:	d015      	beq.n	8006364 <_puts_r+0x8c>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	7019      	strb	r1, [r3, #0]
 8006340:	68a3      	ldr	r3, [r4, #8]
 8006342:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006346:	3b01      	subs	r3, #1
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	2900      	cmp	r1, #0
 800634c:	d1ed      	bne.n	800632a <_puts_r+0x52>
 800634e:	2b00      	cmp	r3, #0
 8006350:	da11      	bge.n	8006376 <_puts_r+0x9e>
 8006352:	4622      	mov	r2, r4
 8006354:	210a      	movs	r1, #10
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f85f 	bl	800641a <__swbuf_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d0d7      	beq.n	8006310 <_puts_r+0x38>
 8006360:	250a      	movs	r5, #10
 8006362:	e7d7      	b.n	8006314 <_puts_r+0x3c>
 8006364:	4622      	mov	r2, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f857 	bl	800641a <__swbuf_r>
 800636c:	3001      	adds	r0, #1
 800636e:	d1e7      	bne.n	8006340 <_puts_r+0x68>
 8006370:	e7ce      	b.n	8006310 <_puts_r+0x38>
 8006372:	3e01      	subs	r6, #1
 8006374:	e7e4      	b.n	8006340 <_puts_r+0x68>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	220a      	movs	r2, #10
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e7ee      	b.n	8006360 <_puts_r+0x88>
	...

08006384 <puts>:
 8006384:	4b02      	ldr	r3, [pc, #8]	@ (8006390 <puts+0xc>)
 8006386:	4601      	mov	r1, r0
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f7ff bfa5 	b.w	80062d8 <_puts_r>
 800638e:	bf00      	nop
 8006390:	20000018 	.word	0x20000018

08006394 <__sread>:
 8006394:	b510      	push	{r4, lr}
 8006396:	460c      	mov	r4, r1
 8006398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639c:	f000 f8fc 	bl	8006598 <_read_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	bfab      	itete	ge
 80063a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063a6:	89a3      	ldrhlt	r3, [r4, #12]
 80063a8:	181b      	addge	r3, r3, r0
 80063aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063ae:	bfac      	ite	ge
 80063b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063b2:	81a3      	strhlt	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__swrite>:
 80063b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	461f      	mov	r7, r3
 80063bc:	898b      	ldrh	r3, [r1, #12]
 80063be:	05db      	lsls	r3, r3, #23
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4616      	mov	r6, r2
 80063c6:	d505      	bpl.n	80063d4 <__swrite+0x1e>
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	2302      	movs	r3, #2
 80063ce:	2200      	movs	r2, #0
 80063d0:	f000 f8d0 	bl	8006574 <_lseek_r>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	4628      	mov	r0, r5
 80063e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	f000 b8e7 	b.w	80065bc <_write_r>

080063ee <__sseek>:
 80063ee:	b510      	push	{r4, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 f8bd 	bl	8006574 <_lseek_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	bf15      	itete	ne
 8006400:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800640a:	81a3      	strheq	r3, [r4, #12]
 800640c:	bf18      	it	ne
 800640e:	81a3      	strhne	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__sclose>:
 8006412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006416:	f000 b89d 	b.w	8006554 <_close_r>

0800641a <__swbuf_r>:
 800641a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641c:	460e      	mov	r6, r1
 800641e:	4614      	mov	r4, r2
 8006420:	4605      	mov	r5, r0
 8006422:	b118      	cbz	r0, 800642c <__swbuf_r+0x12>
 8006424:	6a03      	ldr	r3, [r0, #32]
 8006426:	b90b      	cbnz	r3, 800642c <__swbuf_r+0x12>
 8006428:	f7ff ff20 	bl	800626c <__sinit>
 800642c:	69a3      	ldr	r3, [r4, #24]
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	071a      	lsls	r2, r3, #28
 8006434:	d501      	bpl.n	800643a <__swbuf_r+0x20>
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	b943      	cbnz	r3, 800644c <__swbuf_r+0x32>
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 f82b 	bl	8006498 <__swsetup_r>
 8006442:	b118      	cbz	r0, 800644c <__swbuf_r+0x32>
 8006444:	f04f 37ff 	mov.w	r7, #4294967295
 8006448:	4638      	mov	r0, r7
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	1a98      	subs	r0, r3, r2
 8006452:	6963      	ldr	r3, [r4, #20]
 8006454:	b2f6      	uxtb	r6, r6
 8006456:	4283      	cmp	r3, r0
 8006458:	4637      	mov	r7, r6
 800645a:	dc05      	bgt.n	8006468 <__swbuf_r+0x4e>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fa68 	bl	8006934 <_fflush_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	d1ed      	bne.n	8006444 <__swbuf_r+0x2a>
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	3b01      	subs	r3, #1
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	701e      	strb	r6, [r3, #0]
 8006476:	6962      	ldr	r2, [r4, #20]
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	429a      	cmp	r2, r3
 800647c:	d004      	beq.n	8006488 <__swbuf_r+0x6e>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d5e1      	bpl.n	8006448 <__swbuf_r+0x2e>
 8006484:	2e0a      	cmp	r6, #10
 8006486:	d1df      	bne.n	8006448 <__swbuf_r+0x2e>
 8006488:	4621      	mov	r1, r4
 800648a:	4628      	mov	r0, r5
 800648c:	f000 fa52 	bl	8006934 <_fflush_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	d0d9      	beq.n	8006448 <__swbuf_r+0x2e>
 8006494:	e7d6      	b.n	8006444 <__swbuf_r+0x2a>
	...

08006498 <__swsetup_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4b29      	ldr	r3, [pc, #164]	@ (8006540 <__swsetup_r+0xa8>)
 800649c:	4605      	mov	r5, r0
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	460c      	mov	r4, r1
 80064a2:	b118      	cbz	r0, 80064ac <__swsetup_r+0x14>
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	b90b      	cbnz	r3, 80064ac <__swsetup_r+0x14>
 80064a8:	f7ff fee0 	bl	800626c <__sinit>
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	0719      	lsls	r1, r3, #28
 80064b2:	d422      	bmi.n	80064fa <__swsetup_r+0x62>
 80064b4:	06da      	lsls	r2, r3, #27
 80064b6:	d407      	bmi.n	80064c8 <__swsetup_r+0x30>
 80064b8:	2209      	movs	r2, #9
 80064ba:	602a      	str	r2, [r5, #0]
 80064bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	e033      	b.n	8006530 <__swsetup_r+0x98>
 80064c8:	0758      	lsls	r0, r3, #29
 80064ca:	d512      	bpl.n	80064f2 <__swsetup_r+0x5a>
 80064cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ce:	b141      	cbz	r1, 80064e2 <__swsetup_r+0x4a>
 80064d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064d4:	4299      	cmp	r1, r3
 80064d6:	d002      	beq.n	80064de <__swsetup_r+0x46>
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f8af 	bl	800663c <_free_r>
 80064de:	2300      	movs	r3, #0
 80064e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	b94b      	cbnz	r3, 8006512 <__swsetup_r+0x7a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006508:	d003      	beq.n	8006512 <__swsetup_r+0x7a>
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f000 fa5f 	bl	80069d0 <__smakebuf_r>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	f013 0201 	ands.w	r2, r3, #1
 800651a:	d00a      	beq.n	8006532 <__swsetup_r+0x9a>
 800651c:	2200      	movs	r2, #0
 800651e:	60a2      	str	r2, [r4, #8]
 8006520:	6962      	ldr	r2, [r4, #20]
 8006522:	4252      	negs	r2, r2
 8006524:	61a2      	str	r2, [r4, #24]
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	b942      	cbnz	r2, 800653c <__swsetup_r+0xa4>
 800652a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800652e:	d1c5      	bne.n	80064bc <__swsetup_r+0x24>
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	0799      	lsls	r1, r3, #30
 8006534:	bf58      	it	pl
 8006536:	6962      	ldrpl	r2, [r4, #20]
 8006538:	60a2      	str	r2, [r4, #8]
 800653a:	e7f4      	b.n	8006526 <__swsetup_r+0x8e>
 800653c:	2000      	movs	r0, #0
 800653e:	e7f7      	b.n	8006530 <__swsetup_r+0x98>
 8006540:	20000018 	.word	0x20000018

08006544 <memset>:
 8006544:	4402      	add	r2, r0
 8006546:	4603      	mov	r3, r0
 8006548:	4293      	cmp	r3, r2
 800654a:	d100      	bne.n	800654e <memset+0xa>
 800654c:	4770      	bx	lr
 800654e:	f803 1b01 	strb.w	r1, [r3], #1
 8006552:	e7f9      	b.n	8006548 <memset+0x4>

08006554 <_close_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_close_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fb fcca 	bl	8001ef8 <_close>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_close_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_close_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000a24 	.word	0x20000a24

08006574 <_lseek_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	@ (8006594 <_lseek_r+0x20>)
 8006578:	4604      	mov	r4, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fb fcdf 	bl	8001f46 <_lseek>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_lseek_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_lseek_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000a24 	.word	0x20000a24

08006598 <_read_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d07      	ldr	r5, [pc, #28]	@ (80065b8 <_read_r+0x20>)
 800659c:	4604      	mov	r4, r0
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	2200      	movs	r2, #0
 80065a4:	602a      	str	r2, [r5, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7fb fc6d 	bl	8001e86 <_read>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_read_r+0x1e>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_read_r+0x1e>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20000a24 	.word	0x20000a24

080065bc <_write_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d07      	ldr	r5, [pc, #28]	@ (80065dc <_write_r+0x20>)
 80065c0:	4604      	mov	r4, r0
 80065c2:	4608      	mov	r0, r1
 80065c4:	4611      	mov	r1, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	602a      	str	r2, [r5, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7fb fc78 	bl	8001ec0 <_write>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_write_r+0x1e>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_write_r+0x1e>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20000a24 	.word	0x20000a24

080065e0 <__errno>:
 80065e0:	4b01      	ldr	r3, [pc, #4]	@ (80065e8 <__errno+0x8>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	20000018 	.word	0x20000018

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006624 <__libc_init_array+0x38>)
 80065f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006628 <__libc_init_array+0x3c>)
 80065f2:	1b64      	subs	r4, r4, r5
 80065f4:	10a4      	asrs	r4, r4, #2
 80065f6:	2600      	movs	r6, #0
 80065f8:	42a6      	cmp	r6, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	4d0b      	ldr	r5, [pc, #44]	@ (800662c <__libc_init_array+0x40>)
 80065fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006630 <__libc_init_array+0x44>)
 8006600:	f000 fa54 	bl	8006aac <_init>
 8006604:	1b64      	subs	r4, r4, r5
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	2600      	movs	r6, #0
 800660a:	42a6      	cmp	r6, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f855 3b04 	ldr.w	r3, [r5], #4
 8006614:	4798      	blx	r3
 8006616:	3601      	adds	r6, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f855 3b04 	ldr.w	r3, [r5], #4
 800661e:	4798      	blx	r3
 8006620:	3601      	adds	r6, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	08006aec 	.word	0x08006aec
 8006628:	08006aec 	.word	0x08006aec
 800662c:	08006aec 	.word	0x08006aec
 8006630:	08006af0 	.word	0x08006af0

08006634 <__retarget_lock_init_recursive>:
 8006634:	4770      	bx	lr

08006636 <__retarget_lock_acquire_recursive>:
 8006636:	4770      	bx	lr

08006638 <__retarget_lock_release_recursive>:
 8006638:	4770      	bx	lr
	...

0800663c <_free_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4605      	mov	r5, r0
 8006640:	2900      	cmp	r1, #0
 8006642:	d041      	beq.n	80066c8 <_free_r+0x8c>
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f0c      	subs	r4, r1, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfb8      	it	lt
 800664e:	18e4      	addlt	r4, r4, r3
 8006650:	f000 f8e0 	bl	8006814 <__malloc_lock>
 8006654:	4a1d      	ldr	r2, [pc, #116]	@ (80066cc <_free_r+0x90>)
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	b933      	cbnz	r3, 8006668 <_free_r+0x2c>
 800665a:	6063      	str	r3, [r4, #4]
 800665c:	6014      	str	r4, [r2, #0]
 800665e:	4628      	mov	r0, r5
 8006660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006664:	f000 b8dc 	b.w	8006820 <__malloc_unlock>
 8006668:	42a3      	cmp	r3, r4
 800666a:	d908      	bls.n	800667e <_free_r+0x42>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	1821      	adds	r1, r4, r0
 8006670:	428b      	cmp	r3, r1
 8006672:	bf01      	itttt	eq
 8006674:	6819      	ldreq	r1, [r3, #0]
 8006676:	685b      	ldreq	r3, [r3, #4]
 8006678:	1809      	addeq	r1, r1, r0
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	e7ed      	b.n	800665a <_free_r+0x1e>
 800667e:	461a      	mov	r2, r3
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b10b      	cbz	r3, 8006688 <_free_r+0x4c>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d9fa      	bls.n	800667e <_free_r+0x42>
 8006688:	6811      	ldr	r1, [r2, #0]
 800668a:	1850      	adds	r0, r2, r1
 800668c:	42a0      	cmp	r0, r4
 800668e:	d10b      	bne.n	80066a8 <_free_r+0x6c>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	4401      	add	r1, r0
 8006694:	1850      	adds	r0, r2, r1
 8006696:	4283      	cmp	r3, r0
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	d1e0      	bne.n	800665e <_free_r+0x22>
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	4408      	add	r0, r1
 80066a4:	6010      	str	r0, [r2, #0]
 80066a6:	e7da      	b.n	800665e <_free_r+0x22>
 80066a8:	d902      	bls.n	80066b0 <_free_r+0x74>
 80066aa:	230c      	movs	r3, #12
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	e7d6      	b.n	800665e <_free_r+0x22>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	1821      	adds	r1, r4, r0
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf04      	itt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	bf04      	itt	eq
 80066c0:	1809      	addeq	r1, r1, r0
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	6054      	str	r4, [r2, #4]
 80066c6:	e7ca      	b.n	800665e <_free_r+0x22>
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	20000a30 	.word	0x20000a30

080066d0 <sbrk_aligned>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006710 <sbrk_aligned+0x40>)
 80066d4:	460c      	mov	r4, r1
 80066d6:	6831      	ldr	r1, [r6, #0]
 80066d8:	4605      	mov	r5, r0
 80066da:	b911      	cbnz	r1, 80066e2 <sbrk_aligned+0x12>
 80066dc:	f000 f9d6 	bl	8006a8c <_sbrk_r>
 80066e0:	6030      	str	r0, [r6, #0]
 80066e2:	4621      	mov	r1, r4
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 f9d1 	bl	8006a8c <_sbrk_r>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d103      	bne.n	80066f6 <sbrk_aligned+0x26>
 80066ee:	f04f 34ff 	mov.w	r4, #4294967295
 80066f2:	4620      	mov	r0, r4
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	1cc4      	adds	r4, r0, #3
 80066f8:	f024 0403 	bic.w	r4, r4, #3
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	d0f8      	beq.n	80066f2 <sbrk_aligned+0x22>
 8006700:	1a21      	subs	r1, r4, r0
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f9c2 	bl	8006a8c <_sbrk_r>
 8006708:	3001      	adds	r0, #1
 800670a:	d1f2      	bne.n	80066f2 <sbrk_aligned+0x22>
 800670c:	e7ef      	b.n	80066ee <sbrk_aligned+0x1e>
 800670e:	bf00      	nop
 8006710:	20000a2c 	.word	0x20000a2c

08006714 <_malloc_r>:
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	1ccd      	adds	r5, r1, #3
 800671a:	f025 0503 	bic.w	r5, r5, #3
 800671e:	3508      	adds	r5, #8
 8006720:	2d0c      	cmp	r5, #12
 8006722:	bf38      	it	cc
 8006724:	250c      	movcc	r5, #12
 8006726:	2d00      	cmp	r5, #0
 8006728:	4606      	mov	r6, r0
 800672a:	db01      	blt.n	8006730 <_malloc_r+0x1c>
 800672c:	42a9      	cmp	r1, r5
 800672e:	d904      	bls.n	800673a <_malloc_r+0x26>
 8006730:	230c      	movs	r3, #12
 8006732:	6033      	str	r3, [r6, #0]
 8006734:	2000      	movs	r0, #0
 8006736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800673a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006810 <_malloc_r+0xfc>
 800673e:	f000 f869 	bl	8006814 <__malloc_lock>
 8006742:	f8d8 3000 	ldr.w	r3, [r8]
 8006746:	461c      	mov	r4, r3
 8006748:	bb44      	cbnz	r4, 800679c <_malloc_r+0x88>
 800674a:	4629      	mov	r1, r5
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ffbf 	bl	80066d0 <sbrk_aligned>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	4604      	mov	r4, r0
 8006756:	d158      	bne.n	800680a <_malloc_r+0xf6>
 8006758:	f8d8 4000 	ldr.w	r4, [r8]
 800675c:	4627      	mov	r7, r4
 800675e:	2f00      	cmp	r7, #0
 8006760:	d143      	bne.n	80067ea <_malloc_r+0xd6>
 8006762:	2c00      	cmp	r4, #0
 8006764:	d04b      	beq.n	80067fe <_malloc_r+0xea>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	4639      	mov	r1, r7
 800676a:	4630      	mov	r0, r6
 800676c:	eb04 0903 	add.w	r9, r4, r3
 8006770:	f000 f98c 	bl	8006a8c <_sbrk_r>
 8006774:	4581      	cmp	r9, r0
 8006776:	d142      	bne.n	80067fe <_malloc_r+0xea>
 8006778:	6821      	ldr	r1, [r4, #0]
 800677a:	1a6d      	subs	r5, r5, r1
 800677c:	4629      	mov	r1, r5
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff ffa6 	bl	80066d0 <sbrk_aligned>
 8006784:	3001      	adds	r0, #1
 8006786:	d03a      	beq.n	80067fe <_malloc_r+0xea>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	442b      	add	r3, r5
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	f8d8 3000 	ldr.w	r3, [r8]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	bb62      	cbnz	r2, 80067f0 <_malloc_r+0xdc>
 8006796:	f8c8 7000 	str.w	r7, [r8]
 800679a:	e00f      	b.n	80067bc <_malloc_r+0xa8>
 800679c:	6822      	ldr	r2, [r4, #0]
 800679e:	1b52      	subs	r2, r2, r5
 80067a0:	d420      	bmi.n	80067e4 <_malloc_r+0xd0>
 80067a2:	2a0b      	cmp	r2, #11
 80067a4:	d917      	bls.n	80067d6 <_malloc_r+0xc2>
 80067a6:	1961      	adds	r1, r4, r5
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	6025      	str	r5, [r4, #0]
 80067ac:	bf18      	it	ne
 80067ae:	6059      	strne	r1, [r3, #4]
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	bf08      	it	eq
 80067b4:	f8c8 1000 	streq.w	r1, [r8]
 80067b8:	5162      	str	r2, [r4, r5]
 80067ba:	604b      	str	r3, [r1, #4]
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f82f 	bl	8006820 <__malloc_unlock>
 80067c2:	f104 000b 	add.w	r0, r4, #11
 80067c6:	1d23      	adds	r3, r4, #4
 80067c8:	f020 0007 	bic.w	r0, r0, #7
 80067cc:	1ac2      	subs	r2, r0, r3
 80067ce:	bf1c      	itt	ne
 80067d0:	1a1b      	subne	r3, r3, r0
 80067d2:	50a3      	strne	r3, [r4, r2]
 80067d4:	e7af      	b.n	8006736 <_malloc_r+0x22>
 80067d6:	6862      	ldr	r2, [r4, #4]
 80067d8:	42a3      	cmp	r3, r4
 80067da:	bf0c      	ite	eq
 80067dc:	f8c8 2000 	streq.w	r2, [r8]
 80067e0:	605a      	strne	r2, [r3, #4]
 80067e2:	e7eb      	b.n	80067bc <_malloc_r+0xa8>
 80067e4:	4623      	mov	r3, r4
 80067e6:	6864      	ldr	r4, [r4, #4]
 80067e8:	e7ae      	b.n	8006748 <_malloc_r+0x34>
 80067ea:	463c      	mov	r4, r7
 80067ec:	687f      	ldr	r7, [r7, #4]
 80067ee:	e7b6      	b.n	800675e <_malloc_r+0x4a>
 80067f0:	461a      	mov	r2, r3
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	42a3      	cmp	r3, r4
 80067f6:	d1fb      	bne.n	80067f0 <_malloc_r+0xdc>
 80067f8:	2300      	movs	r3, #0
 80067fa:	6053      	str	r3, [r2, #4]
 80067fc:	e7de      	b.n	80067bc <_malloc_r+0xa8>
 80067fe:	230c      	movs	r3, #12
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	4630      	mov	r0, r6
 8006804:	f000 f80c 	bl	8006820 <__malloc_unlock>
 8006808:	e794      	b.n	8006734 <_malloc_r+0x20>
 800680a:	6005      	str	r5, [r0, #0]
 800680c:	e7d6      	b.n	80067bc <_malloc_r+0xa8>
 800680e:	bf00      	nop
 8006810:	20000a30 	.word	0x20000a30

08006814 <__malloc_lock>:
 8006814:	4801      	ldr	r0, [pc, #4]	@ (800681c <__malloc_lock+0x8>)
 8006816:	f7ff bf0e 	b.w	8006636 <__retarget_lock_acquire_recursive>
 800681a:	bf00      	nop
 800681c:	20000a28 	.word	0x20000a28

08006820 <__malloc_unlock>:
 8006820:	4801      	ldr	r0, [pc, #4]	@ (8006828 <__malloc_unlock+0x8>)
 8006822:	f7ff bf09 	b.w	8006638 <__retarget_lock_release_recursive>
 8006826:	bf00      	nop
 8006828:	20000a28 	.word	0x20000a28

0800682c <__sflush_r>:
 800682c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	0716      	lsls	r6, r2, #28
 8006836:	4605      	mov	r5, r0
 8006838:	460c      	mov	r4, r1
 800683a:	d454      	bmi.n	80068e6 <__sflush_r+0xba>
 800683c:	684b      	ldr	r3, [r1, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dc02      	bgt.n	8006848 <__sflush_r+0x1c>
 8006842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd48      	ble.n	80068da <__sflush_r+0xae>
 8006848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800684a:	2e00      	cmp	r6, #0
 800684c:	d045      	beq.n	80068da <__sflush_r+0xae>
 800684e:	2300      	movs	r3, #0
 8006850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006854:	682f      	ldr	r7, [r5, #0]
 8006856:	6a21      	ldr	r1, [r4, #32]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	d030      	beq.n	80068be <__sflush_r+0x92>
 800685c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	0759      	lsls	r1, r3, #29
 8006862:	d505      	bpl.n	8006870 <__sflush_r+0x44>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800686a:	b10b      	cbz	r3, 8006870 <__sflush_r+0x44>
 800686c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	2300      	movs	r3, #0
 8006872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006874:	6a21      	ldr	r1, [r4, #32]
 8006876:	4628      	mov	r0, r5
 8006878:	47b0      	blx	r6
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	d106      	bne.n	800688e <__sflush_r+0x62>
 8006880:	6829      	ldr	r1, [r5, #0]
 8006882:	291d      	cmp	r1, #29
 8006884:	d82b      	bhi.n	80068de <__sflush_r+0xb2>
 8006886:	4a2a      	ldr	r2, [pc, #168]	@ (8006930 <__sflush_r+0x104>)
 8006888:	410a      	asrs	r2, r1
 800688a:	07d6      	lsls	r6, r2, #31
 800688c:	d427      	bmi.n	80068de <__sflush_r+0xb2>
 800688e:	2200      	movs	r2, #0
 8006890:	6062      	str	r2, [r4, #4]
 8006892:	04d9      	lsls	r1, r3, #19
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	d504      	bpl.n	80068a4 <__sflush_r+0x78>
 800689a:	1c42      	adds	r2, r0, #1
 800689c:	d101      	bne.n	80068a2 <__sflush_r+0x76>
 800689e:	682b      	ldr	r3, [r5, #0]
 80068a0:	b903      	cbnz	r3, 80068a4 <__sflush_r+0x78>
 80068a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80068a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068a6:	602f      	str	r7, [r5, #0]
 80068a8:	b1b9      	cbz	r1, 80068da <__sflush_r+0xae>
 80068aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068ae:	4299      	cmp	r1, r3
 80068b0:	d002      	beq.n	80068b8 <__sflush_r+0x8c>
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7ff fec2 	bl	800663c <_free_r>
 80068b8:	2300      	movs	r3, #0
 80068ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80068bc:	e00d      	b.n	80068da <__sflush_r+0xae>
 80068be:	2301      	movs	r3, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b0      	blx	r6
 80068c4:	4602      	mov	r2, r0
 80068c6:	1c50      	adds	r0, r2, #1
 80068c8:	d1c9      	bne.n	800685e <__sflush_r+0x32>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0c6      	beq.n	800685e <__sflush_r+0x32>
 80068d0:	2b1d      	cmp	r3, #29
 80068d2:	d001      	beq.n	80068d8 <__sflush_r+0xac>
 80068d4:	2b16      	cmp	r3, #22
 80068d6:	d11e      	bne.n	8006916 <__sflush_r+0xea>
 80068d8:	602f      	str	r7, [r5, #0]
 80068da:	2000      	movs	r0, #0
 80068dc:	e022      	b.n	8006924 <__sflush_r+0xf8>
 80068de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	e01b      	b.n	800691e <__sflush_r+0xf2>
 80068e6:	690f      	ldr	r7, [r1, #16]
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	d0f6      	beq.n	80068da <__sflush_r+0xae>
 80068ec:	0793      	lsls	r3, r2, #30
 80068ee:	680e      	ldr	r6, [r1, #0]
 80068f0:	bf08      	it	eq
 80068f2:	694b      	ldreq	r3, [r1, #20]
 80068f4:	600f      	str	r7, [r1, #0]
 80068f6:	bf18      	it	ne
 80068f8:	2300      	movne	r3, #0
 80068fa:	eba6 0807 	sub.w	r8, r6, r7
 80068fe:	608b      	str	r3, [r1, #8]
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	dde9      	ble.n	80068da <__sflush_r+0xae>
 8006906:	6a21      	ldr	r1, [r4, #32]
 8006908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800690a:	4643      	mov	r3, r8
 800690c:	463a      	mov	r2, r7
 800690e:	4628      	mov	r0, r5
 8006910:	47b0      	blx	r6
 8006912:	2800      	cmp	r0, #0
 8006914:	dc08      	bgt.n	8006928 <__sflush_r+0xfc>
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	4407      	add	r7, r0
 800692a:	eba8 0800 	sub.w	r8, r8, r0
 800692e:	e7e7      	b.n	8006900 <__sflush_r+0xd4>
 8006930:	dfbffffe 	.word	0xdfbffffe

08006934 <_fflush_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	690b      	ldr	r3, [r1, #16]
 8006938:	4605      	mov	r5, r0
 800693a:	460c      	mov	r4, r1
 800693c:	b913      	cbnz	r3, 8006944 <_fflush_r+0x10>
 800693e:	2500      	movs	r5, #0
 8006940:	4628      	mov	r0, r5
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	b118      	cbz	r0, 800694e <_fflush_r+0x1a>
 8006946:	6a03      	ldr	r3, [r0, #32]
 8006948:	b90b      	cbnz	r3, 800694e <_fflush_r+0x1a>
 800694a:	f7ff fc8f 	bl	800626c <__sinit>
 800694e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f3      	beq.n	800693e <_fflush_r+0xa>
 8006956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006958:	07d0      	lsls	r0, r2, #31
 800695a:	d404      	bmi.n	8006966 <_fflush_r+0x32>
 800695c:	0599      	lsls	r1, r3, #22
 800695e:	d402      	bmi.n	8006966 <_fflush_r+0x32>
 8006960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006962:	f7ff fe68 	bl	8006636 <__retarget_lock_acquire_recursive>
 8006966:	4628      	mov	r0, r5
 8006968:	4621      	mov	r1, r4
 800696a:	f7ff ff5f 	bl	800682c <__sflush_r>
 800696e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006970:	07da      	lsls	r2, r3, #31
 8006972:	4605      	mov	r5, r0
 8006974:	d4e4      	bmi.n	8006940 <_fflush_r+0xc>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	059b      	lsls	r3, r3, #22
 800697a:	d4e1      	bmi.n	8006940 <_fflush_r+0xc>
 800697c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800697e:	f7ff fe5b 	bl	8006638 <__retarget_lock_release_recursive>
 8006982:	e7dd      	b.n	8006940 <_fflush_r+0xc>

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2900      	cmp	r1, #0
 800698e:	b096      	sub	sp, #88	@ 0x58
 8006990:	4615      	mov	r5, r2
 8006992:	461e      	mov	r6, r3
 8006994:	da0d      	bge.n	80069b2 <__swhatbuf_r+0x2e>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2340      	movne	r3, #64	@ 0x40
 80069a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069a8:	2000      	movs	r0, #0
 80069aa:	6031      	str	r1, [r6, #0]
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	b016      	add	sp, #88	@ 0x58
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	466a      	mov	r2, sp
 80069b4:	f000 f848 	bl	8006a48 <_fstat_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dbec      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069bc:	9901      	ldr	r1, [sp, #4]
 80069be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069c6:	4259      	negs	r1, r3
 80069c8:	4159      	adcs	r1, r3
 80069ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069ce:	e7eb      	b.n	80069a8 <__swhatbuf_r+0x24>

080069d0 <__smakebuf_r>:
 80069d0:	898b      	ldrh	r3, [r1, #12]
 80069d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d4:	079d      	lsls	r5, r3, #30
 80069d6:	4606      	mov	r6, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	d507      	bpl.n	80069ec <__smakebuf_r+0x1c>
 80069dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	2301      	movs	r3, #1
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	b003      	add	sp, #12
 80069ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ec:	ab01      	add	r3, sp, #4
 80069ee:	466a      	mov	r2, sp
 80069f0:	f7ff ffc8 	bl	8006984 <__swhatbuf_r>
 80069f4:	9f00      	ldr	r7, [sp, #0]
 80069f6:	4605      	mov	r5, r0
 80069f8:	4639      	mov	r1, r7
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7ff fe8a 	bl	8006714 <_malloc_r>
 8006a00:	b948      	cbnz	r0, 8006a16 <__smakebuf_r+0x46>
 8006a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a06:	059a      	lsls	r2, r3, #22
 8006a08:	d4ee      	bmi.n	80069e8 <__smakebuf_r+0x18>
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	e7e2      	b.n	80069dc <__smakebuf_r+0xc>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	6020      	str	r0, [r4, #0]
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a26:	b15b      	cbz	r3, 8006a40 <__smakebuf_r+0x70>
 8006a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 f81d 	bl	8006a6c <_isatty_r>
 8006a32:	b128      	cbz	r0, 8006a40 <__smakebuf_r+0x70>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	431d      	orrs	r5, r3
 8006a44:	81a5      	strh	r5, [r4, #12]
 8006a46:	e7cf      	b.n	80069e8 <__smakebuf_r+0x18>

08006a48 <_fstat_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	@ (8006a68 <_fstat_r+0x20>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	f7fb fa5b 	bl	8001f10 <_fstat>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	d102      	bne.n	8006a64 <_fstat_r+0x1c>
 8006a5e:	682b      	ldr	r3, [r5, #0]
 8006a60:	b103      	cbz	r3, 8006a64 <_fstat_r+0x1c>
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	bd38      	pop	{r3, r4, r5, pc}
 8006a66:	bf00      	nop
 8006a68:	20000a24 	.word	0x20000a24

08006a6c <_isatty_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	@ (8006a88 <_isatty_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fb fa5a 	bl	8001f30 <_isatty>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_isatty_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_isatty_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20000a24 	.word	0x20000a24

08006a8c <_sbrk_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d06      	ldr	r5, [pc, #24]	@ (8006aa8 <_sbrk_r+0x1c>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7fb fa62 	bl	8001f60 <_sbrk>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_sbrk_r+0x1a>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_sbrk_r+0x1a>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20000a24 	.word	0x20000a24

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
