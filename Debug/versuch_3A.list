
versuch_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006244  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800644c  0800644c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006454  08006454  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800645c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000994  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011646  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002440  00000000  00000000  00031721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e78  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b26  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002555a  00000000  00000000  00035506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f91a  00000000  00000000  0005aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ddc12  00000000  00000000  0006a37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000466c  00000000  00000000  00147f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0014c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080063dc 	.word	0x080063dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080063dc 	.word	0x080063dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_ldivmod>:
 8000618:	b97b      	cbnz	r3, 800063a <__aeabi_ldivmod+0x22>
 800061a:	b972      	cbnz	r2, 800063a <__aeabi_ldivmod+0x22>
 800061c:	2900      	cmp	r1, #0
 800061e:	bfbe      	ittt	lt
 8000620:	2000      	movlt	r0, #0
 8000622:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000626:	e006      	blt.n	8000636 <__aeabi_ldivmod+0x1e>
 8000628:	bf08      	it	eq
 800062a:	2800      	cmpeq	r0, #0
 800062c:	bf1c      	itt	ne
 800062e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000632:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000636:	f000 b9bb 	b.w	80009b0 <__aeabi_idiv0>
 800063a:	f1ad 0c08 	sub.w	ip, sp, #8
 800063e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000642:	2900      	cmp	r1, #0
 8000644:	db09      	blt.n	800065a <__aeabi_ldivmod+0x42>
 8000646:	2b00      	cmp	r3, #0
 8000648:	db1a      	blt.n	8000680 <__aeabi_ldivmod+0x68>
 800064a:	f000 f84d 	bl	80006e8 <__udivmoddi4>
 800064e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000656:	b004      	add	sp, #16
 8000658:	4770      	bx	lr
 800065a:	4240      	negs	r0, r0
 800065c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	db1b      	blt.n	800069c <__aeabi_ldivmod+0x84>
 8000664:	f000 f840 	bl	80006e8 <__udivmoddi4>
 8000668:	f8dd e004 	ldr.w	lr, [sp, #4]
 800066c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000670:	b004      	add	sp, #16
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	4252      	negs	r2, r2
 800067a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800067e:	4770      	bx	lr
 8000680:	4252      	negs	r2, r2
 8000682:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000686:	f000 f82f 	bl	80006e8 <__udivmoddi4>
 800068a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800068e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000692:	b004      	add	sp, #16
 8000694:	4240      	negs	r0, r0
 8000696:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069a:	4770      	bx	lr
 800069c:	4252      	negs	r2, r2
 800069e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a2:	f000 f821 	bl	80006e8 <__udivmoddi4>
 80006a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ae:	b004      	add	sp, #16
 80006b0:	4252      	negs	r2, r2
 80006b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b970 	b.w	80009b0 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9e08      	ldr	r6, [sp, #32]
 80006ee:	460d      	mov	r5, r1
 80006f0:	4604      	mov	r4, r0
 80006f2:	460f      	mov	r7, r1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d14a      	bne.n	800078e <__udivmoddi4+0xa6>
 80006f8:	428a      	cmp	r2, r1
 80006fa:	4694      	mov	ip, r2
 80006fc:	d965      	bls.n	80007ca <__udivmoddi4+0xe2>
 80006fe:	fab2 f382 	clz	r3, r2
 8000702:	b143      	cbz	r3, 8000716 <__udivmoddi4+0x2e>
 8000704:	fa02 fc03 	lsl.w	ip, r2, r3
 8000708:	f1c3 0220 	rsb	r2, r3, #32
 800070c:	409f      	lsls	r7, r3
 800070e:	fa20 f202 	lsr.w	r2, r0, r2
 8000712:	4317      	orrs	r7, r2
 8000714:	409c      	lsls	r4, r3
 8000716:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800071a:	fa1f f58c 	uxth.w	r5, ip
 800071e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000722:	0c22      	lsrs	r2, r4, #16
 8000724:	fb0e 7711 	mls	r7, lr, r1, r7
 8000728:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800072c:	fb01 f005 	mul.w	r0, r1, r5
 8000730:	4290      	cmp	r0, r2
 8000732:	d90a      	bls.n	800074a <__udivmoddi4+0x62>
 8000734:	eb1c 0202 	adds.w	r2, ip, r2
 8000738:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800073c:	f080 811c 	bcs.w	8000978 <__udivmoddi4+0x290>
 8000740:	4290      	cmp	r0, r2
 8000742:	f240 8119 	bls.w	8000978 <__udivmoddi4+0x290>
 8000746:	3902      	subs	r1, #2
 8000748:	4462      	add	r2, ip
 800074a:	1a12      	subs	r2, r2, r0
 800074c:	b2a4      	uxth	r4, r4
 800074e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000752:	fb0e 2210 	mls	r2, lr, r0, r2
 8000756:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800075a:	fb00 f505 	mul.w	r5, r0, r5
 800075e:	42a5      	cmp	r5, r4
 8000760:	d90a      	bls.n	8000778 <__udivmoddi4+0x90>
 8000762:	eb1c 0404 	adds.w	r4, ip, r4
 8000766:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800076a:	f080 8107 	bcs.w	800097c <__udivmoddi4+0x294>
 800076e:	42a5      	cmp	r5, r4
 8000770:	f240 8104 	bls.w	800097c <__udivmoddi4+0x294>
 8000774:	4464      	add	r4, ip
 8000776:	3802      	subs	r0, #2
 8000778:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	2100      	movs	r1, #0
 8000780:	b11e      	cbz	r6, 800078a <__udivmoddi4+0xa2>
 8000782:	40dc      	lsrs	r4, r3
 8000784:	2300      	movs	r3, #0
 8000786:	e9c6 4300 	strd	r4, r3, [r6]
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	428b      	cmp	r3, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0xbc>
 8000792:	2e00      	cmp	r6, #0
 8000794:	f000 80ed 	beq.w	8000972 <__udivmoddi4+0x28a>
 8000798:	2100      	movs	r1, #0
 800079a:	e9c6 0500 	strd	r0, r5, [r6]
 800079e:	4608      	mov	r0, r1
 80007a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a4:	fab3 f183 	clz	r1, r3
 80007a8:	2900      	cmp	r1, #0
 80007aa:	d149      	bne.n	8000840 <__udivmoddi4+0x158>
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d302      	bcc.n	80007b6 <__udivmoddi4+0xce>
 80007b0:	4282      	cmp	r2, r0
 80007b2:	f200 80f8 	bhi.w	80009a6 <__udivmoddi4+0x2be>
 80007b6:	1a84      	subs	r4, r0, r2
 80007b8:	eb65 0203 	sbc.w	r2, r5, r3
 80007bc:	2001      	movs	r0, #1
 80007be:	4617      	mov	r7, r2
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d0e2      	beq.n	800078a <__udivmoddi4+0xa2>
 80007c4:	e9c6 4700 	strd	r4, r7, [r6]
 80007c8:	e7df      	b.n	800078a <__udivmoddi4+0xa2>
 80007ca:	b902      	cbnz	r2, 80007ce <__udivmoddi4+0xe6>
 80007cc:	deff      	udf	#255	; 0xff
 80007ce:	fab2 f382 	clz	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8090 	bne.w	80008f8 <__udivmoddi4+0x210>
 80007d8:	1a8a      	subs	r2, r1, r2
 80007da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007de:	fa1f fe8c 	uxth.w	lr, ip
 80007e2:	2101      	movs	r1, #1
 80007e4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007e8:	fb07 2015 	mls	r0, r7, r5, r2
 80007ec:	0c22      	lsrs	r2, r4, #16
 80007ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007f2:	fb0e f005 	mul.w	r0, lr, r5
 80007f6:	4290      	cmp	r0, r2
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x124>
 80007fa:	eb1c 0202 	adds.w	r2, ip, r2
 80007fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x122>
 8000804:	4290      	cmp	r0, r2
 8000806:	f200 80cb 	bhi.w	80009a0 <__udivmoddi4+0x2b8>
 800080a:	4645      	mov	r5, r8
 800080c:	1a12      	subs	r2, r2, r0
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb2 f0f7 	udiv	r0, r2, r7
 8000814:	fb07 2210 	mls	r2, r7, r0, r2
 8000818:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081c:	fb0e fe00 	mul.w	lr, lr, r0
 8000820:	45a6      	cmp	lr, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x14e>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800082c:	d202      	bcs.n	8000834 <__udivmoddi4+0x14c>
 800082e:	45a6      	cmp	lr, r4
 8000830:	f200 80bb 	bhi.w	80009aa <__udivmoddi4+0x2c2>
 8000834:	4610      	mov	r0, r2
 8000836:	eba4 040e 	sub.w	r4, r4, lr
 800083a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800083e:	e79f      	b.n	8000780 <__udivmoddi4+0x98>
 8000840:	f1c1 0720 	rsb	r7, r1, #32
 8000844:	408b      	lsls	r3, r1
 8000846:	fa22 fc07 	lsr.w	ip, r2, r7
 800084a:	ea4c 0c03 	orr.w	ip, ip, r3
 800084e:	fa05 f401 	lsl.w	r4, r5, r1
 8000852:	fa20 f307 	lsr.w	r3, r0, r7
 8000856:	40fd      	lsrs	r5, r7
 8000858:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800085c:	4323      	orrs	r3, r4
 800085e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000862:	fa1f fe8c 	uxth.w	lr, ip
 8000866:	fb09 5518 	mls	r5, r9, r8, r5
 800086a:	0c1c      	lsrs	r4, r3, #16
 800086c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000870:	fb08 f50e 	mul.w	r5, r8, lr
 8000874:	42a5      	cmp	r5, r4
 8000876:	fa02 f201 	lsl.w	r2, r2, r1
 800087a:	fa00 f001 	lsl.w	r0, r0, r1
 800087e:	d90b      	bls.n	8000898 <__udivmoddi4+0x1b0>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000888:	f080 8088 	bcs.w	800099c <__udivmoddi4+0x2b4>
 800088c:	42a5      	cmp	r5, r4
 800088e:	f240 8085 	bls.w	800099c <__udivmoddi4+0x2b4>
 8000892:	f1a8 0802 	sub.w	r8, r8, #2
 8000896:	4464      	add	r4, ip
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	b29d      	uxth	r5, r3
 800089c:	fbb4 f3f9 	udiv	r3, r4, r9
 80008a0:	fb09 4413 	mls	r4, r9, r3, r4
 80008a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ac:	45a6      	cmp	lr, r4
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x1da>
 80008b0:	eb1c 0404 	adds.w	r4, ip, r4
 80008b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008b8:	d26c      	bcs.n	8000994 <__udivmoddi4+0x2ac>
 80008ba:	45a6      	cmp	lr, r4
 80008bc:	d96a      	bls.n	8000994 <__udivmoddi4+0x2ac>
 80008be:	3b02      	subs	r3, #2
 80008c0:	4464      	add	r4, ip
 80008c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008c6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ca:	eba4 040e 	sub.w	r4, r4, lr
 80008ce:	42ac      	cmp	r4, r5
 80008d0:	46c8      	mov	r8, r9
 80008d2:	46ae      	mov	lr, r5
 80008d4:	d356      	bcc.n	8000984 <__udivmoddi4+0x29c>
 80008d6:	d053      	beq.n	8000980 <__udivmoddi4+0x298>
 80008d8:	b156      	cbz	r6, 80008f0 <__udivmoddi4+0x208>
 80008da:	ebb0 0208 	subs.w	r2, r0, r8
 80008de:	eb64 040e 	sbc.w	r4, r4, lr
 80008e2:	fa04 f707 	lsl.w	r7, r4, r7
 80008e6:	40ca      	lsrs	r2, r1
 80008e8:	40cc      	lsrs	r4, r1
 80008ea:	4317      	orrs	r7, r2
 80008ec:	e9c6 7400 	strd	r7, r4, [r6]
 80008f0:	4618      	mov	r0, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f8:	f1c3 0120 	rsb	r1, r3, #32
 80008fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000900:	fa20 f201 	lsr.w	r2, r0, r1
 8000904:	fa25 f101 	lsr.w	r1, r5, r1
 8000908:	409d      	lsls	r5, r3
 800090a:	432a      	orrs	r2, r5
 800090c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fbb1 f0f7 	udiv	r0, r1, r7
 8000918:	fb07 1510 	mls	r5, r7, r0, r1
 800091c:	0c11      	lsrs	r1, r2, #16
 800091e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000922:	fb00 f50e 	mul.w	r5, r0, lr
 8000926:	428d      	cmp	r5, r1
 8000928:	fa04 f403 	lsl.w	r4, r4, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x258>
 800092e:	eb1c 0101 	adds.w	r1, ip, r1
 8000932:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000936:	d22f      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 8000938:	428d      	cmp	r5, r1
 800093a:	d92d      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800093c:	3802      	subs	r0, #2
 800093e:	4461      	add	r1, ip
 8000940:	1b49      	subs	r1, r1, r5
 8000942:	b292      	uxth	r2, r2
 8000944:	fbb1 f5f7 	udiv	r5, r1, r7
 8000948:	fb07 1115 	mls	r1, r7, r5, r1
 800094c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000950:	fb05 f10e 	mul.w	r1, r5, lr
 8000954:	4291      	cmp	r1, r2
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x282>
 8000958:	eb1c 0202 	adds.w	r2, ip, r2
 800095c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000960:	d216      	bcs.n	8000990 <__udivmoddi4+0x2a8>
 8000962:	4291      	cmp	r1, r2
 8000964:	d914      	bls.n	8000990 <__udivmoddi4+0x2a8>
 8000966:	3d02      	subs	r5, #2
 8000968:	4462      	add	r2, ip
 800096a:	1a52      	subs	r2, r2, r1
 800096c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000970:	e738      	b.n	80007e4 <__udivmoddi4+0xfc>
 8000972:	4631      	mov	r1, r6
 8000974:	4630      	mov	r0, r6
 8000976:	e708      	b.n	800078a <__udivmoddi4+0xa2>
 8000978:	4639      	mov	r1, r7
 800097a:	e6e6      	b.n	800074a <__udivmoddi4+0x62>
 800097c:	4610      	mov	r0, r2
 800097e:	e6fb      	b.n	8000778 <__udivmoddi4+0x90>
 8000980:	4548      	cmp	r0, r9
 8000982:	d2a9      	bcs.n	80008d8 <__udivmoddi4+0x1f0>
 8000984:	ebb9 0802 	subs.w	r8, r9, r2
 8000988:	eb65 0e0c 	sbc.w	lr, r5, ip
 800098c:	3b01      	subs	r3, #1
 800098e:	e7a3      	b.n	80008d8 <__udivmoddi4+0x1f0>
 8000990:	4645      	mov	r5, r8
 8000992:	e7ea      	b.n	800096a <__udivmoddi4+0x282>
 8000994:	462b      	mov	r3, r5
 8000996:	e794      	b.n	80008c2 <__udivmoddi4+0x1da>
 8000998:	4640      	mov	r0, r8
 800099a:	e7d1      	b.n	8000940 <__udivmoddi4+0x258>
 800099c:	46d0      	mov	r8, sl
 800099e:	e77b      	b.n	8000898 <__udivmoddi4+0x1b0>
 80009a0:	3d02      	subs	r5, #2
 80009a2:	4462      	add	r2, ip
 80009a4:	e732      	b.n	800080c <__udivmoddi4+0x124>
 80009a6:	4608      	mov	r0, r1
 80009a8:	e70a      	b.n	80007c0 <__udivmoddi4+0xd8>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	e742      	b.n	8000836 <__udivmoddi4+0x14e>

080009b0 <__aeabi_idiv0>:
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2203      	movs	r2, #3
 80009c0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2203      	movs	r2, #3
 80009cc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2203      	movs	r2, #3
 80009d2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2203      	movs	r2, #3
 80009d8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2203      	movs	r2, #3
 80009de:	715a      	strb	r2, [r3, #5]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <spi_select_chip>:

void spi_select_chip()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	//TODO select the chip using SPI chip select line
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2110      	movs	r1, #16
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <spi_select_chip+0x14>)
 80009f6:	f002 fa3f 	bl	8002e78 <HAL_GPIO_WritePin>

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020000 	.word	0x40020000

08000a04 <spi_deselect_chip>:

void spi_deselect_chip()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	//TODO undo spi_select_chip()
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <spi_deselect_chip+0x14>)
 8000a0e:	f002 fa33 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40020000 	.word	0x40020000

08000a1c <read_register16>:


static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	460b      	mov	r3, r1
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	72fb      	strb	r3, [r7, #11]
	spi_select_chip();
 8000a2a:	f7ff ffdf 	bl	80009ec <spi_select_chip>
	//TODO read a 16-bit register from the bmp280
	//read the BMP280's datasheet
	uint8_t data[2];
	HAL_SPI_Transmit(dev->spi, &addr, 1, HAL_MAX_DELAY);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a32:	f107 010b 	add.w	r1, r7, #11
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f003 f865 	bl	8003b0a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi, data, 2, HAL_MAX_DELAY);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a44:	f107 0114 	add.w	r1, r7, #20
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	f003 f9a0 	bl	8003d92 <HAL_SPI_Receive>
	//
	//read the HAL documentation about the generic SPI driver on how to communicate using SPI.
	//SPI is a full-duplex protocol. The bmp280 doesn't use that capability.
	//You can simply send what you need to send and receive your answer afterwards.
	//Write the result into *value.
	spi_deselect_chip();
 8000a52:	f7ff ffd7 	bl	8000a04 <spi_deselect_chip>
	*value = (data[0] << 8) | data[1];
 8000a56:	7d3b      	ldrb	r3, [r7, #20]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	7d7b      	ldrb	r3, [r7, #21]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	801a      	strh	r2, [r3, #0]
	return true;
 8000a6a:	2301      	movs	r3, #1
	//return true if it worked, false if an error was encountered
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	460b      	mov	r3, r1
 8000a82:	72fb      	strb	r3, [r7, #11]
 8000a84:	4613      	mov	r3, r2
 8000a86:	72bb      	strb	r3, [r7, #10]
	spi_select_chip();
 8000a88:	f7ff ffb0 	bl	80009ec <spi_select_chip>
	//TODO read len bytes of data from the bmp280, and put them into *value
	HAL_SPI_Transmit(dev->spi, &addr, 1, HAL_MAX_DELAY);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a90:	f107 010b 	add.w	r1, r7, #11
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f003 f836 	bl	8003b0a <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi, value, len, HAL_MAX_DELAY);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000aa2:	7abb      	ldrb	r3, [r7, #10]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f003 f971 	bl	8003d92 <HAL_SPI_Receive>
	spi_deselect_chip();
 8000ab0:	f7ff ffa8 	bl	8000a04 <spi_deselect_chip>
	return 0;
 8000ab4:	2300      	movs	r3, #0
	//return 0 if it worked, and 1 if you encountered an error
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	70fb      	strb	r3, [r7, #3]
 8000aca:	4613      	mov	r3, r2
 8000acc:	70bb      	strb	r3, [r7, #2]
	spi_select_chip();
 8000ace:	f7ff ff8d 	bl	80009ec <spi_select_chip>
	//TODO write value into the register addr of the bmp280
	uint8_t data[2] = {addr, value};
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	733b      	strb	r3, [r7, #12]
 8000ad6:	78bb      	ldrb	r3, [r7, #2]
 8000ad8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(dev->spi, data, 2, HAL_MAX_DELAY);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	f003 f80f 	bl	8003b0a <HAL_SPI_Transmit>
	spi_deselect_chip();
 8000aec:	f7ff ff8a 	bl	8000a04 <spi_deselect_chip>
	//return 0 if it worked, and 1 if you encountered an error
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	461a      	mov	r2, r3
 8000b06:	2188      	movs	r1, #136	; 0x88
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff87 	bl	8000a1c <read_register16>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d06f      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3302      	adds	r3, #2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	218a      	movs	r1, #138	; 0x8a
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff7d 	bl	8000a1c <read_register16>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d065      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	218c      	movs	r1, #140	; 0x8c
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff73 	bl	8000a1c <read_register16>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d05b      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3306      	adds	r3, #6
 8000b40:	461a      	mov	r2, r3
 8000b42:	218e      	movs	r1, #142	; 0x8e
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff69 	bl	8000a1c <read_register16>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d051      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3308      	adds	r3, #8
 8000b54:	461a      	mov	r2, r3
 8000b56:	2190      	movs	r1, #144	; 0x90
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff5f 	bl	8000a1c <read_register16>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d047      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	330a      	adds	r3, #10
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2192      	movs	r1, #146	; 0x92
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff55 	bl	8000a1c <read_register16>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d03d      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	330c      	adds	r3, #12
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2194      	movs	r1, #148	; 0x94
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff4b 	bl	8000a1c <read_register16>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	330e      	adds	r3, #14
 8000b90:	461a      	mov	r2, r3
 8000b92:	2196      	movs	r1, #150	; 0x96
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff41 	bl	8000a1c <read_register16>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d029      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3310      	adds	r3, #16
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2198      	movs	r1, #152	; 0x98
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff37 	bl	8000a1c <read_register16>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d01f      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3312      	adds	r3, #18
 8000bb8:	461a      	mov	r2, r3
 8000bba:	219a      	movs	r1, #154	; 0x9a
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <read_register16>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d015      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3314      	adds	r3, #20
 8000bcc:	461a      	mov	r2, r3
 8000bce:	219c      	movs	r1, #156	; 0x9c
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff23 	bl	8000a1c <read_register16>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00b      	beq.n	8000bf4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000be0:	461a      	mov	r2, r3
 8000be2:	219e      	movs	r1, #158	; 0x9e
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff19 	bl	8000a1c <read_register16>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <read_calibration_data+0xfa>

		return true;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <read_calibration_data+0xfc>
	}

	return false;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f103 0218 	add.w	r2, r3, #24
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	21a1      	movs	r1, #161	; 0xa1
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff2f 	bl	8000a74 <read_data>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14b      	bne.n	8000cb4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	331a      	adds	r3, #26
 8000c20:	461a      	mov	r2, r3
 8000c22:	21e1      	movs	r1, #225	; 0xe1
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fef9 	bl	8000a1c <read_register16>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d041      	beq.n	8000cb4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f103 021c 	add.w	r2, r3, #28
 8000c36:	2301      	movs	r3, #1
 8000c38:	21e3      	movs	r1, #227	; 0xe3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff1a 	bl	8000a74 <read_data>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d136      	bne.n	8000cb4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000c46:	f107 030e 	add.w	r3, r7, #14
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	21e4      	movs	r1, #228	; 0xe4
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fee4 	bl	8000a1c <read_register16>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d02c      	beq.n	8000cb4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	461a      	mov	r2, r3
 8000c60:	21e5      	movs	r1, #229	; 0xe5
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff feda 	bl	8000a1c <read_register16>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d022      	beq.n	8000cb4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000c74:	2301      	movs	r3, #1
 8000c76:	21e7      	movs	r1, #231	; 0xe7
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fefb 	bl	8000a74 <read_data>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d117      	bne.n	8000cb4 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000c84:	89fb      	ldrh	r3, [r7, #14]
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	121b      	asrs	r3, r3, #8
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	841a      	strh	r2, [r3, #32]

		return true;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8000cce:	2301      	movs	r3, #1
 8000cd0:	21d0      	movs	r1, #208	; 0xd0
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fece 	bl	8000a74 <read_data>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <bmp280_init+0x24>
		return false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e08c      	b.n	8000dfc <bmp280_init+0x13e>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000ce8:	2b58      	cmp	r3, #88	; 0x58
 8000cea:	d006      	beq.n	8000cfa <bmp280_init+0x3c>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000cf2:	2b60      	cmp	r3, #96	; 0x60
 8000cf4:	d001      	beq.n	8000cfa <bmp280_init+0x3c>

		return false;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e080      	b.n	8000dfc <bmp280_init+0x13e>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000cfa:	22b6      	movs	r2, #182	; 0xb6
 8000cfc:	21e0      	movs	r1, #224	; 0xe0
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fedd 	bl	8000abe <write_register8>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <bmp280_init+0x50>
		return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e076      	b.n	8000dfc <bmp280_init+0x13e>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000d0e:	f107 020c 	add.w	r2, r7, #12
 8000d12:	2301      	movs	r3, #1
 8000d14:	21f3      	movs	r1, #243	; 0xf3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff feac 	bl	8000a74 <read_data>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f5      	bne.n	8000d0e <bmp280_init+0x50>
				&& (status & 1) == 0)
 8000d22:	7b3b      	ldrb	r3, [r7, #12]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f0      	bne.n	8000d0e <bmp280_init+0x50>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fee4 	bl	8000afa <read_calibration_data>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f083 0301 	eor.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d100      	bne.n	8000d40 <bmp280_init+0x82>
 8000d3e:	e001      	b.n	8000d44 <bmp280_init+0x86>
		return false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e05b      	b.n	8000dfc <bmp280_init+0x13e>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000d4a:	2b60      	cmp	r3, #96	; 0x60
 8000d4c:	d10a      	bne.n	8000d64 <bmp280_init+0xa6>
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff55 	bl	8000bfe <read_hum_calibration_data>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f083 0301 	eor.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <bmp280_init+0xa6>
		return false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e04b      	b.n	8000dfc <bmp280_init+0x13e>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	795b      	ldrb	r3, [r3, #5]
 8000d68:	015b      	lsls	r3, r3, #5
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	785b      	ldrb	r3, [r3, #1]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	21f5      	movs	r1, #245	; 0xf5
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fe9c 	bl	8000abe <write_register8>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <bmp280_init+0xd2>
		return false;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e035      	b.n	8000dfc <bmp280_init+0x13e>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d102      	bne.n	8000d9e <bmp280_init+0xe0>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	789b      	ldrb	r3, [r3, #2]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000dbc:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000dc4:	2b60      	cmp	r3, #96	; 0x60
 8000dc6:	d10d      	bne.n	8000de4 <bmp280_init+0x126>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	21f2      	movs	r1, #242	; 0xf2
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fe72 	bl	8000abe <write_register8>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <bmp280_init+0x126>
			return false;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e00b      	b.n	8000dfc <bmp280_init+0x13e>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	461a      	mov	r2, r3
 8000de8:	21f4      	movs	r1, #244	; 0xf4
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fe67 	bl	8000abe <write_register8>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <bmp280_init+0x13c>
		return false;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <bmp280_init+0x13e>
	}

	return true;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	10da      	asrs	r2, r3, #3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000e22:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000e26:	12db      	asrs	r3, r3, #11
 8000e28:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	111b      	asrs	r3, r3, #4
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	8812      	ldrh	r2, [r2, #0]
 8000e32:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	1112      	asrs	r2, r2, #4
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	8809      	ldrh	r1, [r1, #0]
 8000e3c:	1a52      	subs	r2, r2, r1
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e4e:	139b      	asrs	r3, r3, #14
 8000e50:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	441a      	add	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3380      	adds	r3, #128	; 0x80
 8000e68:	121b      	asrs	r3, r3, #8
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000e76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e7a:	b0cc      	sub	sp, #304	; 0x130
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000e82:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000e86:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e8e:	17da      	asrs	r2, r3, #31
 8000e90:	461c      	mov	r4, r3
 8000e92:	4615      	mov	r5, r2
 8000e94:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000e98:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8000e9c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000ea0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ea8:	fb03 f102 	mul.w	r1, r3, r2
 8000eac:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	18ca      	adds	r2, r1, r3
 8000eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ebe:	fba3 8903 	umull	r8, r9, r3, r3
 8000ec2:	eb02 0309 	add.w	r3, r2, r9
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ecc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	17da      	asrs	r2, r3, #31
 8000ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000edc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	fb03 f209 	mul.w	r2, r3, r9
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	fb08 f303 	mul.w	r3, r8, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	4602      	mov	r2, r0
 8000ef0:	fba8 1202 	umull	r1, r2, r8, r2
 8000ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000ef8:	460a      	mov	r2, r1
 8000efa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000f02:	4413      	add	r3, r2
 8000f04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000f08:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000f0c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000f10:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	17da      	asrs	r2, r3, #31
 8000f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f24:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f2c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000f30:	462a      	mov	r2, r5
 8000f32:	fb02 f203 	mul.w	r2, r2, r3
 8000f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	441a      	add	r2, r3
 8000f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f46:	4621      	mov	r1, r4
 8000f48:	fba3 1301 	umull	r1, r3, r3, r1
 8000f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f50:	460b      	mov	r3, r1
 8000f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f5a:	18d3      	adds	r3, r2, r3
 8000f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f60:	f04f 0000 	mov.w	r0, #0
 8000f64:	f04f 0100 	mov.w	r1, #0
 8000f68:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000f6c:	462b      	mov	r3, r5
 8000f6e:	0459      	lsls	r1, r3, #17
 8000f70:	4623      	mov	r3, r4
 8000f72:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f76:	4623      	mov	r3, r4
 8000f78:	0458      	lsls	r0, r3, #17
 8000f7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f7e:	1814      	adds	r4, r2, r0
 8000f80:	643c      	str	r4, [r7, #64]	; 0x40
 8000f82:	414b      	adcs	r3, r1
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
 8000f86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f8a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f92:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	17da      	asrs	r2, r3, #31
 8000f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f9e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	f04f 0100 	mov.w	r1, #0
 8000faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fae:	00d9      	lsls	r1, r3, #3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000fb6:	1814      	adds	r4, r2, r0
 8000fb8:	63bc      	str	r4, [r7, #56]	; 0x38
 8000fba:	414b      	adcs	r3, r1
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fbe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000fc2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000fc6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fce:	fb03 f102 	mul.w	r1, r3, r2
 8000fd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	18ca      	adds	r2, r1, r3
 8000fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fe4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000fec:	460b      	mov	r3, r1
 8000fee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ff6:	18d3      	adds	r3, r2, r3
 8000ff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001000:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001004:	b21b      	sxth	r3, r3
 8001006:	17da      	asrs	r2, r3, #31
 8001008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800100c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001010:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001014:	462b      	mov	r3, r5
 8001016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800101a:	4642      	mov	r2, r8
 800101c:	fb02 f203 	mul.w	r2, r2, r3
 8001020:	464b      	mov	r3, r9
 8001022:	4621      	mov	r1, r4
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	4413      	add	r3, r2
 800102a:	4622      	mov	r2, r4
 800102c:	4641      	mov	r1, r8
 800102e:	fba2 1201 	umull	r1, r2, r2, r1
 8001032:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001036:	460a      	mov	r2, r1
 8001038:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800103c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001040:	4413      	add	r3, r2
 8001042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	f04f 0100 	mov.w	r1, #0
 800104e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001052:	4623      	mov	r3, r4
 8001054:	0a18      	lsrs	r0, r3, #8
 8001056:	462b      	mov	r3, r5
 8001058:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800105c:	462b      	mov	r3, r5
 800105e:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001064:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001068:	b21b      	sxth	r3, r3
 800106a:	17da      	asrs	r2, r3, #31
 800106c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001070:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001078:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800107c:	464a      	mov	r2, r9
 800107e:	fb02 f203 	mul.w	r2, r2, r3
 8001082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001086:	4644      	mov	r4, r8
 8001088:	fb04 f303 	mul.w	r3, r4, r3
 800108c:	441a      	add	r2, r3
 800108e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001092:	4644      	mov	r4, r8
 8001094:	fba3 4304 	umull	r4, r3, r3, r4
 8001098:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800109c:	4623      	mov	r3, r4
 800109e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80010b8:	464c      	mov	r4, r9
 80010ba:	0323      	lsls	r3, r4, #12
 80010bc:	4644      	mov	r4, r8
 80010be:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010c2:	4644      	mov	r4, r8
 80010c4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80010c6:	1884      	adds	r4, r0, r2
 80010c8:	633c      	str	r4, [r7, #48]	; 0x30
 80010ca:	eb41 0303 	adc.w	r3, r1, r3
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
 80010d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010d4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80010d8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80010dc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80010e0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80010e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80010e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ec:	88db      	ldrh	r3, [r3, #6]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80010fe:	462b      	mov	r3, r5
 8001100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001104:	4642      	mov	r2, r8
 8001106:	fb02 f203 	mul.w	r2, r2, r3
 800110a:	464b      	mov	r3, r9
 800110c:	4621      	mov	r1, r4
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4413      	add	r3, r2
 8001114:	4622      	mov	r2, r4
 8001116:	4641      	mov	r1, r8
 8001118:	fba2 1201 	umull	r1, r2, r2, r1
 800111c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001120:	460a      	mov	r2, r1
 8001122:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001126:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800112a:	4413      	add	r3, r2
 800112c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800113c:	4629      	mov	r1, r5
 800113e:	104a      	asrs	r2, r1, #1
 8001140:	4629      	mov	r1, r5
 8001142:	17cb      	asrs	r3, r1, #31
 8001144:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001148:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800114c:	4313      	orrs	r3, r2
 800114e:	d101      	bne.n	8001154 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001150:	2300      	movs	r3, #0
 8001152:	e148      	b.n	80013e6 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001154:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001158:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800115c:	17da      	asrs	r2, r3, #31
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001162:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001166:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800116a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800116e:	105b      	asrs	r3, r3, #1
 8001170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001174:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001178:	07db      	lsls	r3, r3, #31
 800117a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800117e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001182:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001186:	4621      	mov	r1, r4
 8001188:	1a89      	subs	r1, r1, r2
 800118a:	67b9      	str	r1, [r7, #120]	; 0x78
 800118c:	4629      	mov	r1, r5
 800118e:	eb61 0303 	sbc.w	r3, r1, r3
 8001192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001194:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001198:	4622      	mov	r2, r4
 800119a:	462b      	mov	r3, r5
 800119c:	1891      	adds	r1, r2, r2
 800119e:	6239      	str	r1, [r7, #32]
 80011a0:	415b      	adcs	r3, r3
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
 80011a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011a8:	4621      	mov	r1, r4
 80011aa:	1851      	adds	r1, r2, r1
 80011ac:	61b9      	str	r1, [r7, #24]
 80011ae:	4629      	mov	r1, r5
 80011b0:	414b      	adcs	r3, r1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c0:	4649      	mov	r1, r9
 80011c2:	018b      	lsls	r3, r1, #6
 80011c4:	4641      	mov	r1, r8
 80011c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011ca:	4641      	mov	r1, r8
 80011cc:	018a      	lsls	r2, r1, #6
 80011ce:	4641      	mov	r1, r8
 80011d0:	1889      	adds	r1, r1, r2
 80011d2:	6139      	str	r1, [r7, #16]
 80011d4:	4649      	mov	r1, r9
 80011d6:	eb43 0101 	adc.w	r1, r3, r1
 80011da:	6179      	str	r1, [r7, #20]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011e8:	4649      	mov	r1, r9
 80011ea:	008b      	lsls	r3, r1, #2
 80011ec:	4641      	mov	r1, r8
 80011ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011f2:	4641      	mov	r1, r8
 80011f4:	008a      	lsls	r2, r1, #2
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	4622      	mov	r2, r4
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	460b      	mov	r3, r1
 8001204:	462a      	mov	r2, r5
 8001206:	eb42 0303 	adc.w	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001218:	4649      	mov	r1, r9
 800121a:	008b      	lsls	r3, r1, #2
 800121c:	4641      	mov	r1, r8
 800121e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001222:	4641      	mov	r1, r8
 8001224:	008a      	lsls	r2, r1, #2
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	4603      	mov	r3, r0
 800122c:	4622      	mov	r2, r4
 800122e:	189b      	adds	r3, r3, r2
 8001230:	673b      	str	r3, [r7, #112]	; 0x70
 8001232:	462b      	mov	r3, r5
 8001234:	460a      	mov	r2, r1
 8001236:	eb42 0303 	adc.w	r3, r2, r3
 800123a:	677b      	str	r3, [r7, #116]	; 0x74
 800123c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001240:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001244:	f7ff f9e8 	bl	8000618 <__aeabi_ldivmod>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001254:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001258:	b21b      	sxth	r3, r3
 800125a:	17da      	asrs	r2, r3, #31
 800125c:	66bb      	str	r3, [r7, #104]	; 0x68
 800125e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001260:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	0b50      	lsrs	r0, r2, #13
 800126e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001272:	1359      	asrs	r1, r3, #13
 8001274:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001278:	462b      	mov	r3, r5
 800127a:	fb00 f203 	mul.w	r2, r0, r3
 800127e:	4623      	mov	r3, r4
 8001280:	fb03 f301 	mul.w	r3, r3, r1
 8001284:	4413      	add	r3, r2
 8001286:	4622      	mov	r2, r4
 8001288:	fba2 1200 	umull	r1, r2, r2, r0
 800128c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001290:	460a      	mov	r2, r1
 8001292:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800129a:	4413      	add	r3, r2
 800129c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80012a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80012a4:	f04f 0000 	mov.w	r0, #0
 80012a8:	f04f 0100 	mov.w	r1, #0
 80012ac:	0b50      	lsrs	r0, r2, #13
 80012ae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b2:	1359      	asrs	r1, r3, #13
 80012b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80012b8:	462b      	mov	r3, r5
 80012ba:	fb00 f203 	mul.w	r2, r0, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	fb03 f301 	mul.w	r3, r3, r1
 80012c4:	4413      	add	r3, r2
 80012c6:	4622      	mov	r2, r4
 80012c8:	fba2 1200 	umull	r1, r2, r2, r0
 80012cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80012d0:	460a      	mov	r2, r1
 80012d2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80012d6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80012da:	4413      	add	r3, r2
 80012dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80012ec:	4621      	mov	r1, r4
 80012ee:	0e4a      	lsrs	r2, r1, #25
 80012f0:	4629      	mov	r1, r5
 80012f2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012f6:	4629      	mov	r1, r5
 80012f8:	164b      	asrs	r3, r1, #25
 80012fa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80012fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001302:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001306:	b21b      	sxth	r3, r3
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	663b      	str	r3, [r7, #96]	; 0x60
 800130c:	667a      	str	r2, [r7, #100]	; 0x64
 800130e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001312:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001316:	462a      	mov	r2, r5
 8001318:	fb02 f203 	mul.w	r2, r2, r3
 800131c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001320:	4621      	mov	r1, r4
 8001322:	fb01 f303 	mul.w	r3, r1, r3
 8001326:	4413      	add	r3, r2
 8001328:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800132c:	4621      	mov	r1, r4
 800132e:	fba2 1201 	umull	r1, r2, r2, r1
 8001332:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001336:	460a      	mov	r2, r1
 8001338:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800133c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001340:	4413      	add	r3, r2
 8001342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001352:	4621      	mov	r1, r4
 8001354:	0cca      	lsrs	r2, r1, #19
 8001356:	4629      	mov	r1, r5
 8001358:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800135c:	4629      	mov	r1, r5
 800135e:	14cb      	asrs	r3, r1, #19
 8001360:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001364:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001368:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800136c:	1884      	adds	r4, r0, r2
 800136e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001370:	eb41 0303 	adc.w	r3, r1, r3
 8001374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001376:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800137a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800137e:	4621      	mov	r1, r4
 8001380:	1889      	adds	r1, r1, r2
 8001382:	6539      	str	r1, [r7, #80]	; 0x50
 8001384:	4629      	mov	r1, r5
 8001386:	eb43 0101 	adc.w	r1, r3, r1
 800138a:	6579      	str	r1, [r7, #84]	; 0x54
 800138c:	f04f 0000 	mov.w	r0, #0
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001398:	4623      	mov	r3, r4
 800139a:	0a18      	lsrs	r0, r3, #8
 800139c:	462b      	mov	r3, r5
 800139e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a2:	462b      	mov	r3, r5
 80013a4:	1219      	asrs	r1, r3, #8
 80013a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013aa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	17da      	asrs	r2, r3, #31
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80013c2:	464c      	mov	r4, r9
 80013c4:	0123      	lsls	r3, r4, #4
 80013c6:	4644      	mov	r4, r8
 80013c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013cc:	4644      	mov	r4, r8
 80013ce:	0122      	lsls	r2, r4, #4
 80013d0:	1884      	adds	r4, r0, r2
 80013d2:	603c      	str	r4, [r7, #0]
 80013d4:	eb41 0303 	adc.w	r3, r1, r3
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80013e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013ec:	46bd      	mov	sp, r7
 80013ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013f2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80013f2:	b480      	push	{r7}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001404:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	039a      	lsls	r2, r3, #14
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001410:	051b      	lsls	r3, r3, #20
 8001412:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800141a:	4619      	mov	r1, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001428:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001430:	4611      	mov	r1, r2
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	fb01 f202 	mul.w	r2, r1, r2
 8001438:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	7f09      	ldrb	r1, [r1, #28]
 800143e:	4608      	mov	r0, r1
 8001440:	6979      	ldr	r1, [r7, #20]
 8001442:	fb00 f101 	mul.w	r1, r0, r1
 8001446:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001448:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800144c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001450:	1292      	asrs	r2, r2, #10
 8001452:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800145c:	fb01 f202 	mul.w	r2, r1, r2
 8001460:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001464:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	13db      	asrs	r3, r3, #15
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	13d2      	asrs	r2, r2, #15
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	7e12      	ldrb	r2, [r2, #24]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001490:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001498:	bfa8      	it	ge
 800149a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800149e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	131b      	asrs	r3, r3, #12
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014c4:	2b60      	cmp	r3, #96	; 0x60
 80014c6:	d007      	beq.n	80014d8 <bmp280_read_fixed+0x28>
		if (humidity)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <bmp280_read_fixed+0x32>
 80014de:	2308      	movs	r3, #8
 80014e0:	e000      	b.n	80014e4 <bmp280_read_fixed+0x34>
 80014e2:	2306      	movs	r3, #6
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f107 0218 	add.w	r2, r7, #24
 80014ee:	21f7      	movs	r1, #247	; 0xf7
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fabf 	bl	8000a74 <read_data>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <bmp280_read_fixed+0x50>
		return false;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e038      	b.n	8001572 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001500:	7e3b      	ldrb	r3, [r7, #24]
 8001502:	031a      	lsls	r2, r3, #12
 8001504:	7e7b      	ldrb	r3, [r7, #25]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4313      	orrs	r3, r2
 800150a:	7eba      	ldrb	r2, [r7, #26]
 800150c:	0912      	lsrs	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	4313      	orrs	r3, r2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001514:	7efb      	ldrb	r3, [r7, #27]
 8001516:	031a      	lsls	r2, r3, #12
 8001518:	7f3b      	ldrb	r3, [r7, #28]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4313      	orrs	r3, r2
 800151e:	7f7a      	ldrb	r2, [r7, #29]
 8001520:	0912      	lsrs	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	4313      	orrs	r3, r2
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	461a      	mov	r2, r3
 800152e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fc67 	bl	8000e04 <compensate_temperature>
 8001536:	4602      	mov	r2, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	461a      	mov	r2, r3
 8001540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fc97 	bl	8000e76 <compensate_pressure>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001554:	7fbb      	ldrb	r3, [r7, #30]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	7ffa      	ldrb	r2, [r7, #31]
 800155a:	4313      	orrs	r3, r2
 800155c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	461a      	mov	r2, r3
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff ff44 	bl	80013f2 <compensate_humidity>
 800156a:	4602      	mov	r2, r0
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <bmp280_read_float+0x1a>
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	e000      	b.n	8001598 <bmp280_read_float+0x1c>
 8001596:	2300      	movs	r3, #0
 8001598:	f107 0218 	add.w	r2, r7, #24
 800159c:	f107 011c 	add.w	r1, r7, #28
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff ff85 	bl	80014b0 <bmp280_read_fixed>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d028      	beq.n	80015fe <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001608 <bmp280_read_float+0x8c>
 80015ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ce:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800160c <bmp280_read_float+0x90>
 80015d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ec:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001610 <bmp280_read_float+0x94>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <bmp280_read_float+0x84>
	}

	return false;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	42c80000 	.word	0x42c80000
 800160c:	43800000 	.word	0x43800000
 8001610:	44800000 	.word	0x44800000

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b092      	sub	sp, #72	; 0x48
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fdb5 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f8b7 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 f9fb 	bl	8001a1c <MX_GPIO_Init>
  MX_ETH_Init();
 8001626:	f000 f91d 	bl	8001864 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800162a:	f000 f99f 	bl	800196c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800162e:	f000 f9c7 	bl	80019c0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001632:	f000 f965 	bl	8001900 <MX_SPI1_Init>
//  lcd.i2c_addr = LCD_DEFAULT_ADDR;
//  lcd.backlight_enable = true;
//  HAL_StatusTypeDef status = LCD_Begin(&lcd);
  HAL_StatusTypeDef status;
  BMP280_HandleTypedef bmp280;
  bmp280_init_default_params(&bmp280.params);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f9b9 	bl	80009b4 <bmp280_init_default_params>
  bmp280.spi = &hspi1;
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <main+0x15c>)
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  if (!bmp280_init(&bmp280, &bmp280.params)) {
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb32 	bl	8000cbe <bmp280_init>
 800165a:	4603      	mov	r3, r0
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <main+0x58>
          printf("Fehler\n");
 8001666:	4843      	ldr	r0, [pc, #268]	; (8001774 <main+0x160>)
 8001668:	f003 ffba 	bl	80055e0 <puts>
      }

  if(status != HAL_OK){

  }
  char space[8]="\r\n";
 800166c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  bmp280_init(&bmp280, &bmp280.params);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb1a 	bl	8000cbe <bmp280_init>
	  if (bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)==true){
 800168a:	f107 000c 	add.w	r0, r7, #12
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <main+0x164>)
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <main+0x168>)
 8001692:	493b      	ldr	r1, [pc, #236]	; (8001780 <main+0x16c>)
 8001694:	f7ff ff72 	bl	800157c <bmp280_read_float>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d062      	beq.n	8001764 <main+0x150>
	  	  sprintf(msg,"%f",temperature);
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <main+0x16c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff60 	bl	8000568 <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <main+0x170>)
 80016ae:	4836      	ldr	r0, [pc, #216]	; (8001788 <main+0x174>)
 80016b0:	f003 ff9e 	bl	80055f0 <siprintf>

	  	  HAL_UART_Transmit(&huart3, (uint8_t*)space, strlen(msg),HAL_MAX_DELAY);
 80016b4:	4834      	ldr	r0, [pc, #208]	; (8001788 <main+0x174>)
 80016b6:	f7fe fd9b 	bl	80001f0 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	1d39      	adds	r1, r7, #4
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c4:	4831      	ldr	r0, [pc, #196]	; (800178c <main+0x178>)
 80016c6:	f002 ffb9 	bl	800463c <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
 80016ca:	482f      	ldr	r0, [pc, #188]	; (8001788 <main+0x174>)
 80016cc:	f7fe fd90 	bl	80001f0 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d8:	492b      	ldr	r1, [pc, #172]	; (8001788 <main+0x174>)
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <main+0x178>)
 80016dc:	f002 ffae 	bl	800463c <HAL_UART_Transmit>

	  	  sprintf(msg,"%f",pressure);
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0x168>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff3f 	bl	8000568 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4925      	ldr	r1, [pc, #148]	; (8001784 <main+0x170>)
 80016f0:	4825      	ldr	r0, [pc, #148]	; (8001788 <main+0x174>)
 80016f2:	f003 ff7d 	bl	80055f0 <siprintf>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)space, strlen(msg),HAL_MAX_DELAY);
 80016f6:	4824      	ldr	r0, [pc, #144]	; (8001788 <main+0x174>)
 80016f8:	f7fe fd7a 	bl	80001f0 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	1d39      	adds	r1, r7, #4
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001706:	4821      	ldr	r0, [pc, #132]	; (800178c <main+0x178>)
 8001708:	f002 ff98 	bl	800463c <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <main+0x174>)
 800170e:	f7fe fd6f 	bl	80001f0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <main+0x174>)
 800171c:	481b      	ldr	r0, [pc, #108]	; (800178c <main+0x178>)
 800171e:	f002 ff8d 	bl	800463c <HAL_UART_Transmit>

	  	  sprintf(msg,"%f",humidity);
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <main+0x164>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff1e 	bl	8000568 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4914      	ldr	r1, [pc, #80]	; (8001784 <main+0x170>)
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <main+0x174>)
 8001734:	f003 ff5c 	bl	80055f0 <siprintf>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)space, strlen(msg),HAL_MAX_DELAY);
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <main+0x174>)
 800173a:	f7fe fd59 	bl	80001f0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	1d39      	adds	r1, r7, #4
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001748:	4810      	ldr	r0, [pc, #64]	; (800178c <main+0x178>)
 800174a:	f002 ff77 	bl	800463c <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <main+0x174>)
 8001750:	f7fe fd4e 	bl	80001f0 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800175c:	490a      	ldr	r1, [pc, #40]	; (8001788 <main+0x174>)
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <main+0x178>)
 8001760:	f002 ff6c 	bl	800463c <HAL_UART_Transmit>


	  }
	  HAL_Delay(1000);
 8001764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001768:	f000 fd80 	bl	800226c <HAL_Delay>
	  bmp280_init(&bmp280, &bmp280.params);
 800176c:	e783      	b.n	8001676 <main+0x62>
 800176e:	bf00      	nop
 8001770:	2000031c 	.word	0x2000031c
 8001774:	080063f4 	.word	0x080063f4
 8001778:	2000008c 	.word	0x2000008c
 800177c:	20000088 	.word	0x20000088
 8001780:	20000084 	.word	0x20000084
 8001784:	080063fc 	.word	0x080063fc
 8001788:	20000090 	.word	0x20000090
 800178c:	20000374 	.word	0x20000374

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	; 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 f81e 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <SystemClock_Config+0xcc>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <SystemClock_Config+0xcc>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <SystemClock_Config+0xcc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <SystemClock_Config+0xd0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a21      	ldr	r2, [pc, #132]	; (8001860 <SystemClock_Config+0xd0>)
 80017da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <SystemClock_Config+0xd0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001804:	23a8      	movs	r3, #168	; 0xa8
 8001806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800180c:	2307      	movs	r3, #7
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fc57 	bl	80030c8 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001820:	f000 f9aa 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001830:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2105      	movs	r1, #5
 8001842:	4618      	mov	r0, r3
 8001844:	f001 feb8 	bl	80035b8 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800184e:	f000 f993 	bl	8001b78 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	; 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <MX_ETH_Init+0x84>)
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <MX_ETH_Init+0x88>)
 800186c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_ETH_Init+0x8c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_ETH_Init+0x8c>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_ETH_Init+0x8c>)
 800187c:	22e1      	movs	r2, #225	; 0xe1
 800187e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_ETH_Init+0x8c>)
 8001882:	2200      	movs	r2, #0
 8001884:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_ETH_Init+0x8c>)
 8001888:	2200      	movs	r2, #0
 800188a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_ETH_Init+0x8c>)
 800188e:	2200      	movs	r2, #0
 8001890:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_ETH_Init+0x84>)
 8001894:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <MX_ETH_Init+0x8c>)
 8001896:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_ETH_Init+0x84>)
 800189a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800189e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_ETH_Init+0x84>)
 80018a2:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <MX_ETH_Init+0x90>)
 80018a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_ETH_Init+0x84>)
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_ETH_Init+0x94>)
 80018aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_ETH_Init+0x84>)
 80018ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_ETH_Init+0x84>)
 80018b6:	f000 fde3 	bl	8002480 <HAL_ETH_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80018c0:	f000 f95a 	bl	8001b78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80018c4:	2238      	movs	r2, #56	; 0x38
 80018c6:	2100      	movs	r1, #0
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_ETH_Init+0x98>)
 80018ca:	f003 ff89 	bl	80057e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_ETH_Init+0x98>)
 80018d0:	2221      	movs	r2, #33	; 0x21
 80018d2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_ETH_Init+0x98>)
 80018d6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80018da:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_ETH_Init+0x98>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000026c 	.word	0x2000026c
 80018ec:	40028000 	.word	0x40028000
 80018f0:	200008a0 	.word	0x200008a0
 80018f4:	200001cc 	.word	0x200001cc
 80018f8:	2000012c 	.word	0x2000012c
 80018fc:	200000f4 	.word	0x200000f4

08001900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_SPI1_Init+0x64>)
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <MX_SPI1_Init+0x68>)
 8001908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_SPI1_Init+0x64>)
 800190c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_SPI1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_SPI1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_SPI1_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_SPI1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_SPI1_Init+0x64>)
 800194a:	220a      	movs	r2, #10
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_SPI1_Init+0x64>)
 8001950:	f002 f852 	bl	80039f8 <HAL_SPI_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800195a:	f000 f90d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000031c 	.word	0x2000031c
 8001968:	40013000 	.word	0x40013000

0800196c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART3_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 80019a4:	f002 fdfa 	bl	800459c <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f000 f8e3 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000374 	.word	0x20000374
 80019bc:	40004800 	.word	0x40004800

080019c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ce:	2204      	movs	r2, #4
 80019d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a04:	f001 fa51 	bl	8002eaa <HAL_PCD_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 f8b3 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200003bc 	.word	0x200003bc

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <MX_GPIO_Init+0x14c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ae0:	4822      	ldr	r0, [pc, #136]	; (8001b6c <MX_GPIO_Init+0x150>)
 8001ae2:	f001 f9c9 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2140      	movs	r1, #64	; 0x40
 8001aea:	4821      	ldr	r0, [pc, #132]	; (8001b70 <MX_GPIO_Init+0x154>)
 8001aec:	f001 f9c4 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <MX_GPIO_Init+0x158>)
 8001b08:	f001 f80a 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <MX_GPIO_Init+0x150>)
 8001b26:	f000 fffb 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b2a:	2340      	movs	r3, #64	; 0x40
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <MX_GPIO_Init+0x154>)
 8001b42:	f000 ffed 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_GPIO_Init+0x154>)
 8001b5a:	f000 ffe1 	bl	8002b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	; 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40020800 	.word	0x40020800

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_ETH_MspInit+0x174>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	f040 80a4 	bne.w	8001d40 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a44      	ldr	r2, [pc, #272]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cae:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_ETH_MspInit+0x178>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cbc:	2332      	movs	r3, #50	; 0x32
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ccc:	230b      	movs	r3, #11
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <HAL_ETH_MspInit+0x17c>)
 8001cd8:	f000 ff22 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cdc:	2386      	movs	r3, #134	; 0x86
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cec:	230b      	movs	r3, #11
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <HAL_ETH_MspInit+0x180>)
 8001cf8:	f000 ff12 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0e:	230b      	movs	r3, #11
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <HAL_ETH_MspInit+0x184>)
 8001d1a:	f000 ff01 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d30:	230b      	movs	r3, #11
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <HAL_ETH_MspInit+0x188>)
 8001d3c:	f000 fef0 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3738      	adds	r7, #56	; 0x38
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40028000 	.word	0x40028000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40021800 	.word	0x40021800

08001d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <HAL_SPI_MspInit+0xc0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d149      	bne.n	8001e16 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_SPI_MspInit+0xc4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de6:	2305      	movs	r3, #5
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <HAL_SPI_MspInit+0xc8>)
 8001df2:	f000 fe95 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001df6:	2338      	movs	r3, #56	; 0x38
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e06:	2305      	movs	r3, #5
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4806      	ldr	r0, [pc, #24]	; (8001e2c <HAL_SPI_MspInit+0xcc>)
 8001e12:	f000 fe85 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40013000 	.word	0x40013000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0x84>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12c      	bne.n	8001eac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <HAL_UART_MspInit+0x8c>)
 8001ea8:	f000 fe3a 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40004800 	.word	0x40004800
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020c00 	.word	0x40020c00

08001ec0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee0:	d13f      	bne.n	8001f62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001efe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f10:	230a      	movs	r3, #10
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4815      	ldr	r0, [pc, #84]	; (8001f70 <HAL_PCD_MspInit+0xb0>)
 8001f1c:	f000 fe00 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	480e      	ldr	r0, [pc, #56]	; (8001f70 <HAL_PCD_MspInit+0xb0>)
 8001f36:	f000 fdf3 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	6353      	str	r3, [r2, #52]	; 0x34
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_PCD_MspInit+0xac>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f934 	bl	800222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e00a      	b.n	8001ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fda:	f3af 8000 	nop.w
 8001fde:	4601      	mov	r1, r0
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf0      	blt.n	8001fda <_read+0x12>
  }

  return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e009      	b.n	8002028 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbf1      	blt.n	8002014 <_write+0x12>
  }
  return len;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_close>:

int _close(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002062:	605a      	str	r2, [r3, #4]
  return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_isatty>:

int _isatty(int file)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f003 fbd2 	bl	800587c <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20030000 	.word	0x20030000
 8002104:	00000400 	.word	0x00000400
 8002108:	200008a8 	.word	0x200008a8
 800210c:	20000a00 	.word	0x20000a00

08002110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <SystemInit+0x20>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <SystemInit+0x20>)
 800211c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002138:	f7ff ffea 	bl	8002110 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002162:	f003 fb91 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff fa55 	bl	8001614 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800216c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002178:	0800645c 	.word	0x0800645c
  ldr r2, =_sbss
 800217c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002180:	200009fc 	.word	0x200009fc

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f000 f931 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 f808 	bl	80021cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff fce2 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_InitTick+0x54>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x58>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f93b 	bl	8002466 <HAL_SYSTICK_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00e      	b.n	8002218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d80a      	bhi.n	8002216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002200:	2200      	movs	r2, #0
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002208:	f000 f911 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <HAL_InitTick+0x5c>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000000 	.word	0x20000000
 8002224:	20000008 	.word	0x20000008
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x20>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x24>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4413      	add	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_IncTick+0x24>)
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008
 8002250:	200008ac 	.word	0x200008ac

08002254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_GetTick+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200008ac 	.word	0x200008ac

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff ffee 	bl	8002254 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffde 	bl	8002254 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000008 	.word	0x20000008

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff47 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff5c 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffb0 	bl	80023d4 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08a      	b.n	80025a8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2223      	movs	r2, #35	; 0x23
 80024a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fb95 	bl	8001bd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_ETH_Init+0x130>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <HAL_ETH_Init+0x130>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_ETH_Init+0x130>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_ETH_Init+0x134>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <HAL_ETH_Init+0x134>)
 80024cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_ETH_Init+0x134>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4936      	ldr	r1, [pc, #216]	; (80025b4 <HAL_ETH_Init+0x134>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <HAL_ETH_Init+0x134>)
 80024e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024fc:	f7ff feaa 	bl	8002254 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002502:	e011      	b.n	8002528 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002504:	f7ff fea6 	bl	8002254 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002512:	d909      	bls.n	8002528 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	22e0      	movs	r2, #224	; 0xe0
 8002520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e03f      	b.n	80025a8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f97a 	bl	8002834 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fa25 	bl	8002990 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa7b 	bl	8002a42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f9e3 	bl	8002920 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800257e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002592:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2210      	movs	r2, #16
 80025a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800

080025b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <ETH_SetMACConfig+0x164>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	7b9b      	ldrb	r3, [r3, #14]
 80025d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	7c12      	ldrb	r2, [r2, #16]
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d102      	bne.n	80025e6 <ETH_SetMACConfig+0x2e>
 80025e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x30>
 80025e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	7c52      	ldrb	r2, [r2, #17]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d102      	bne.n	80025f8 <ETH_SetMACConfig+0x40>
 80025f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025f6:	e000      	b.n	80025fa <ETH_SetMACConfig+0x42>
 80025f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7fdb      	ldrb	r3, [r3, #31]
 8002606:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002608:	431a      	orrs	r2, r3
                        macconf->Speed |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800260e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	7f92      	ldrb	r2, [r2, #30]
 8002614:	2a00      	cmp	r2, #0
 8002616:	d102      	bne.n	800261e <ETH_SetMACConfig+0x66>
 8002618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261c:	e000      	b.n	8002620 <ETH_SetMACConfig+0x68>
 800261e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f1b      	ldrb	r3, [r3, #28]
 8002626:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002628:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	791b      	ldrb	r3, [r3, #4]
 8002634:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002636:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800263e:	2a00      	cmp	r2, #0
 8002640:	d102      	bne.n	8002648 <ETH_SetMACConfig+0x90>
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	e000      	b.n	800264a <ETH_SetMACConfig+0x92>
 8002648:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800264a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	7bdb      	ldrb	r3, [r3, #15]
 8002650:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002652:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002658:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002660:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002662:	4313      	orrs	r3, r2
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fdf6 	bl	800226c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0xf6>
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0xf8>
 80026ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80026be:	2a01      	cmp	r2, #1
 80026c0:	d101      	bne.n	80026c6 <ETH_SetMACConfig+0x10e>
 80026c2:	2208      	movs	r2, #8
 80026c4:	e000      	b.n	80026c8 <ETH_SetMACConfig+0x110>
 80026c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80026d0:	2a01      	cmp	r2, #1
 80026d2:	d101      	bne.n	80026d8 <ETH_SetMACConfig+0x120>
 80026d4:	2204      	movs	r2, #4
 80026d6:	e000      	b.n	80026da <ETH_SetMACConfig+0x122>
 80026d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026e2:	2a01      	cmp	r2, #1
 80026e4:	d101      	bne.n	80026ea <ETH_SetMACConfig+0x132>
 80026e6:	2202      	movs	r2, #2
 80026e8:	e000      	b.n	80026ec <ETH_SetMACConfig+0x134>
 80026ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ec:	4313      	orrs	r3, r2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff fdb1 	bl	800226c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	fd20810f 	.word	0xfd20810f

08002720 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <ETH_SetDMAConfig+0x110>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <ETH_SetDMAConfig+0x2c>
 8002746:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800274a:	e000      	b.n	800274e <ETH_SetDMAConfig+0x2e>
 800274c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7b5b      	ldrb	r3, [r3, #13]
 8002752:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002754:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	7f52      	ldrb	r2, [r2, #29]
 800275a:	2a00      	cmp	r2, #0
 800275c:	d102      	bne.n	8002764 <ETH_SetDMAConfig+0x44>
 800275e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002762:	e000      	b.n	8002766 <ETH_SetDMAConfig+0x46>
 8002764:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002766:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7b9b      	ldrb	r3, [r3, #14]
 800276c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800276e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002774:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
 800277a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800277c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f9b      	ldrb	r3, [r3, #30]
 8002782:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002784:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800278a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002792:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002794:	4313      	orrs	r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff fd58 	bl	800226c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	791b      	ldrb	r3, [r3, #4]
 80027ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002806:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002814:	2001      	movs	r0, #1
 8002816:	f7ff fd29 	bl	800226c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f8de3f23 	.word	0xf8de3f23

08002834 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0a6      	sub	sp, #152	; 0x98
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002848:	2300      	movs	r3, #0
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002876:	2300      	movs	r3, #0
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002880:	2300      	movs	r3, #0
 8002882:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800289c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fe7f 	bl	80025b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028f4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff05 	bl	8002720 <ETH_SetDMAConfig>
}
 8002916:	bf00      	nop
 8002918:	3798      	adds	r7, #152	; 0x98
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3305      	adds	r3, #5
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	3204      	adds	r2, #4
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <ETH_MACAddressConfig+0x68>)
 8002942:	4413      	add	r3, r2
 8002944:	461a      	mov	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3303      	adds	r3, #3
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	061a      	lsls	r2, r3, #24
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3302      	adds	r3, #2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3301      	adds	r3, #1
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4313      	orrs	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <ETH_MACAddressConfig+0x6c>)
 8002972:	4413      	add	r3, r2
 8002974:	461a      	mov	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6013      	str	r3, [r2, #0]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40028040 	.word	0x40028040
 800298c:	40028044 	.word	0x40028044

08002990 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e03e      	b.n	8002a1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68d9      	ldr	r1, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	3206      	adds	r2, #6
 80029d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d80c      	bhi.n	8002a00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	e004      	b.n	8002a0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d9bd      	bls.n	800299e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	611a      	str	r2, [r3, #16]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e048      	b.n	8002ae2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	3212      	adds	r2, #18
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d80c      	bhi.n	8002ad2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6919      	ldr	r1, [r3, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e004      	b.n	8002adc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d9b3      	bls.n	8002a50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	60da      	str	r2, [r3, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e177      	b.n	8002e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 8166 	bne.w	8002e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80c0 	beq.w	8002e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d037      	beq.n	8002d5e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x338>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x33c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x340>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x344>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x34c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x350>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e012      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e010      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae84 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022400 	.word	0x40022400
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e101      	b.n	80030c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fff2 	bl	8001ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eea:	d102      	bne.n	8002ef2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 ffc0 	bl	8004e7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7c1a      	ldrb	r2, [r3, #16]
 8002f04:	f88d 2000 	strb.w	r2, [sp]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0c:	f001 ff52 	bl	8004db4 <USB_CoreInit>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0ce      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 ffb8 	bl	8004e9e <USB_SetCurrentMode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0bf      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e04a      	b.n	8002fdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3315      	adds	r3, #21
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3314      	adds	r3, #20
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	b298      	uxth	r0, r3
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	332e      	adds	r3, #46	; 0x2e
 8002f82:	4602      	mov	r2, r0
 8002f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3318      	adds	r3, #24
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	331c      	adds	r3, #28
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3324      	adds	r3, #36	; 0x24
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3af      	bcc.n	8002f46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e044      	b.n	8003076 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	3301      	adds	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3b5      	bcc.n	8002fec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7c1a      	ldrb	r2, [r3, #16]
 8003088:	f88d 2000 	strb.w	r2, [sp]
 800308c:	3304      	adds	r3, #4
 800308e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003090:	f001 ff52 	bl	8004f38 <USB_DevInit>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00c      	b.n	80030c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 f91a 	bl	80052f2 <USB_DevDisconnect>

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e267      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d075      	beq.n	80031d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e6:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00c      	beq.n	800310c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d112      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b82      	ldr	r3, [pc, #520]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b7e      	ldr	r3, [pc, #504]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x108>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d157      	bne.n	80031d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e242      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x74>
 800312e:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a75      	ldr	r2, [pc, #468]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x98>
 8003146:	4b70      	ldr	r3, [pc, #448]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6f      	ldr	r2, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6c      	ldr	r2, [pc, #432]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 8003160:	4b69      	ldr	r3, [pc, #420]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a68      	ldr	r2, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a65      	ldr	r2, [pc, #404]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7ff f868 	bl	8002254 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff f864 	bl	8002254 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e207      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b5b      	ldr	r3, [pc, #364]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0xc0>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7ff f854 	bl	8002254 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7ff f850 	bl	8002254 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1f3      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	4b51      	ldr	r3, [pc, #324]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0xe8>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031de:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d11c      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b44      	ldr	r3, [pc, #272]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d001      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e1c7      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	e03a      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCC_OscConfig+0x244>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7ff f809 	bl	8002254 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7ff f805 	bl	8002254 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1a8      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4925      	ldr	r1, [pc, #148]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e015      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x244>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe ffe8 	bl	8002254 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe ffe4 	bl	8002254 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e187      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d036      	beq.n	8003320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_RCC_OscConfig+0x248>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe ffc8 	bl	8002254 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fe ffc4 	bl	8002254 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e167      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x240>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x200>
 80032e6:	e01b      	b.n	8003320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_OscConfig+0x248>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe ffb1 	bl	8002254 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e00e      	b.n	8003314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe ffad 	bl	8002254 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d907      	bls.n	8003314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e150      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
 8003308:	40023800 	.word	0x40023800
 800330c:	42470000 	.word	0x42470000
 8003310:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ea      	bne.n	80032f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8097 	beq.w	800345c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b81      	ldr	r3, [pc, #516]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	4b7d      	ldr	r3, [pc, #500]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b7a      	ldr	r3, [pc, #488]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b77      	ldr	r3, [pc, #476]	; (800353c <HAL_RCC_OscConfig+0x474>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4b74      	ldr	r3, [pc, #464]	; (800353c <HAL_RCC_OscConfig+0x474>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a73      	ldr	r2, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x474>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fe ff6d 	bl	8002254 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fe ff69 	bl	8002254 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e10c      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_OscConfig+0x474>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x2ea>
 80033a4:	4b64      	ldr	r3, [pc, #400]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x324>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x30c>
 80033ba:	4b5f      	ldr	r3, [pc, #380]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a5b      	ldr	r2, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x324>
 80033d4:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	4b55      	ldr	r3, [pc, #340]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a54      	ldr	r2, [pc, #336]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe ff2e 	bl	8002254 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe ff2a 	bl	8002254 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0cb      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	4b49      	ldr	r3, [pc, #292]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0ee      	beq.n	80033fc <HAL_RCC_OscConfig+0x334>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fe ff18 	bl	8002254 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe ff14 	bl	8002254 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0b5      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ee      	bne.n	8003428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	4a38      	ldr	r2, [pc, #224]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a1 	beq.w	80035a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003466:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d05c      	beq.n	800352c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d141      	bne.n	80034fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCC_OscConfig+0x478>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe fee8 	bl	8002254 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe fee4 	bl	8002254 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e087      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	019b      	lsls	r3, r3, #6
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	491b      	ldr	r1, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x478>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe febd 	bl	8002254 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe feb9 	bl	8002254 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e05c      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x416>
 80034fc:	e054      	b.n	80035a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x478>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fea6 	bl	8002254 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe fea2 	bl	8002254 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e045      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_OscConfig+0x470>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x444>
 800352a:	e03d      	b.n	80035a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e038      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
 8003538:	40023800 	.word	0x40023800
 800353c:	40007000 	.word	0x40007000
 8003540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x4ec>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d028      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d121      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d11a      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800357c:	4293      	cmp	r3, r2
 800357e:	d111      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	3b01      	subs	r3, #1
 800358e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0cc      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b68      	ldr	r3, [pc, #416]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d90c      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d044      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d119      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d003      	beq.n	8003676 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003672:	2b03      	cmp	r3, #3
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e06f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e067      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4934      	ldr	r1, [pc, #208]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a8:	f7fe fdd4 	bl	8002254 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7fe fdd0 	bl	8002254 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e04f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d20c      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fd34 	bl	80021cc <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	08006400 	.word	0x08006400
 800377c:	20000000 	.word	0x20000000
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b094      	sub	sp, #80	; 0x50
 800378a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379c:	4b79      	ldr	r3, [pc, #484]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x40>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 80e1 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x34>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x3a>
 80037b6:	e0db      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037bc:	e0db      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_GetSysClockFreq+0x208>)
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c2:	e0d8      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4621      	mov	r1, r4
 8003810:	1a51      	subs	r1, r2, r1
 8003812:	6139      	str	r1, [r7, #16]
 8003814:	4629      	mov	r1, r5
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003832:	4651      	mov	r1, sl
 8003834:	018a      	lsls	r2, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ebb2 0801 	subs.w	r8, r2, r1
 800383c:	4659      	mov	r1, fp
 800383e:	eb63 0901 	sbc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	462b      	mov	r3, r5
 8003864:	eb49 0303 	adc.w	r3, r9, r3
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003876:	4629      	mov	r1, r5
 8003878:	024b      	lsls	r3, r1, #9
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003880:	4621      	mov	r1, r4
 8003882:	024a      	lsls	r2, r1, #9
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003894:	f7fc ff10 	bl	80006b8 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	e058      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ce:	0150      	lsls	r0, r2, #5
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4641      	mov	r1, r8
 80038d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038da:	4649      	mov	r1, r9
 80038dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f4:	ebb2 040a 	subs.w	r4, r2, sl
 80038f8:	eb63 050b 	sbc.w	r5, r3, fp
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	61fa      	str	r2, [r7, #28]
 8003944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003948:	f7fc feb6 	bl	80006b8 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	; 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08006410 	.word	0x08006410

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08006410 	.word	0x08006410

080039f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07b      	b.n	8003b02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d009      	beq.n	8003a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
 8003a22:	e005      	b.n	8003a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f988 	bl	8001d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0104 	and.w	r1, r3, #4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f003 0210 	and.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1a:	f7fe fb9b 	bl	8002254 <HAL_GetTick>
 8003b1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d001      	beq.n	8003b34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	e12a      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Transmit+0x36>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e122      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_SPI_Transmit+0x48>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e11b      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d007      	beq.n	8003be0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be8:	d152      	bne.n	8003c90 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_Transmit+0xee>
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d145      	bne.n	8003c84 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c1c:	e032      	b.n	8003c84 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d112      	bne.n	8003c52 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c50:	e018      	b.n	8003c84 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c52:	f7fe faff 	bl	8002254 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d803      	bhi.n	8003c6a <HAL_SPI_Transmit+0x160>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c68:	d102      	bne.n	8003c70 <HAL_SPI_Transmit+0x166>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e082      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1c7      	bne.n	8003c1e <HAL_SPI_Transmit+0x114>
 8003c8e:	e053      	b.n	8003d38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_Transmit+0x194>
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d147      	bne.n	8003d2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cc4:	e033      	b.n	8003d2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d113      	bne.n	8003cfc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cfa:	e018      	b.n	8003d2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfc:	f7fe faaa 	bl	8002254 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d803      	bhi.n	8003d14 <HAL_SPI_Transmit+0x20a>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d12:	d102      	bne.n	8003d1a <HAL_SPI_Transmit+0x210>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e02d      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1c6      	bne.n	8003cc6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fbd9 	bl	80044f4 <SPI_EndRxTxTransaction>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b088      	sub	sp, #32
 8003d96:	af02      	add	r7, sp, #8
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
 8003db0:	e104      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dba:	d112      	bne.n	8003de2 <HAL_SPI_Receive+0x50>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10e      	bne.n	8003de2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f8f3 	bl	8003fc4 <HAL_SPI_TransmitReceive>
 8003dde:	4603      	mov	r3, r0
 8003de0:	e0ec      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de2:	f7fe fa37 	bl	8002254 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_Receive+0x62>
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0e1      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_SPI_Receive+0x74>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0da      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2204      	movs	r2, #4
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d10f      	bne.n	8003e76 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d007      	beq.n	8003e94 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d170      	bne.n	8003f7e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e9c:	e035      	b.n	8003f0a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d115      	bne.n	8003ed8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f103 020c 	add.w	r2, r3, #12
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed6:	e018      	b.n	8003f0a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed8:	f7fe f9bc 	bl	8002254 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d803      	bhi.n	8003ef0 <HAL_SPI_Receive+0x15e>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_Receive+0x164>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e058      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1c4      	bne.n	8003e9e <HAL_SPI_Receive+0x10c>
 8003f14:	e038      	b.n	8003f88 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d113      	bne.n	8003f4c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4a:	e018      	b.n	8003f7e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4c:	f7fe f982 	bl	8002254 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d803      	bhi.n	8003f64 <HAL_SPI_Receive+0x1d2>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Receive+0x1d8>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e01e      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1c6      	bne.n	8003f16 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa4b 	bl	8004428 <SPI_EndRxTransaction>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd6:	f7fe f93d 	bl	8002254 <HAL_GetTick>
 8003fda:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d00c      	beq.n	800400e <HAL_SPI_TransmitReceive+0x4a>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffa:	d106      	bne.n	800400a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <HAL_SPI_TransmitReceive+0x46>
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d001      	beq.n	800400e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	e17f      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x5c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x5c>
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e174      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x6e>
 800402e:	2302      	movs	r3, #2
 8004030:	e16d      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2205      	movs	r2, #5
 800404a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	887a      	ldrh	r2, [r7, #2]
 8004076:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d007      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	d17e      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_TransmitReceive+0xf6>
 80040b4:	8afb      	ldrh	r3, [r7, #22]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d16c      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	e059      	b.n	8004194 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11b      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x162>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x162>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d113      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d119      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x1a4>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	b292      	uxth	r2, r2
 800414a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004164:	2301      	movs	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004168:	f7fe f874 	bl	8002254 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004174:	429a      	cmp	r2, r3
 8004176:	d80d      	bhi.n	8004194 <HAL_SPI_TransmitReceive+0x1d0>
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800417e:	d009      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0bc      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1a0      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x11c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d19b      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x11c>
 80041a8:	e082      	b.n	80042b0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x1f4>
 80041b2:	8afb      	ldrh	r3, [r7, #22]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d171      	bne.n	800429c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041de:	e05d      	b.n	800429c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d11c      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x264>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x264>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d114      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d119      	bne.n	800426a <HAL_SPI_TransmitReceive+0x2a6>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d014      	beq.n	800426a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004266:	2301      	movs	r3, #1
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800426a:	f7fd fff3 	bl	8002254 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	429a      	cmp	r2, r3
 8004278:	d803      	bhi.n	8004282 <HAL_SPI_TransmitReceive+0x2be>
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004280:	d102      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x2c4>
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e038      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d19c      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x21c>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d197      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b0:	6a3a      	ldr	r2, [r7, #32]
 80042b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f91d 	bl	80044f4 <SPI_EndRxTxTransaction>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e01d      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004328:	f7fd ff94 	bl	8002254 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	4413      	add	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004338:	f7fd ff8c 	bl	8002254 <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	015b      	lsls	r3, r3, #5
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434e:	e054      	b.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004356:	d050      	beq.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004358:	f7fd ff7c 	bl	8002254 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	429a      	cmp	r2, r3
 8004366:	d902      	bls.n	800436e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d13d      	bne.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800437c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004386:	d111      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004390:	d004      	beq.n	800439c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d107      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b4:	d10f      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e017      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d19b      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000000 	.word	0x20000000

08004428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443c:	d111      	bne.n	8004462 <SPI_EndRxTransaction+0x3a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004446:	d004      	beq.n	8004452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d107      	bne.n	8004462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d12a      	bne.n	80044c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d012      	beq.n	800449c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff49 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02d      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e026      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2101      	movs	r1, #1
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff ff36 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e013      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2101      	movs	r1, #1
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff ff23 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e000      	b.n	80044ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2201      	movs	r2, #1
 8004508:	2102      	movs	r1, #2
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff04 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e032      	b.n	800458c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <SPI_EndRxTxTransaction+0xa0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <SPI_EndRxTxTransaction+0xa4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	0d5b      	lsrs	r3, r3, #21
 8004532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004544:	d112      	bne.n	800456c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fee1 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d016      	beq.n	800458a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e00f      	b.n	800458c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3b01      	subs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d0f2      	beq.n	800456c <SPI_EndRxTxTransaction+0x78>
 8004586:	e000      	b.n	800458a <SPI_EndRxTxTransaction+0x96>
        break;
 8004588:	bf00      	nop
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000000 	.word	0x20000000
 8004598:	165e9f81 	.word	0x165e9f81

0800459c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e042      	b.n	8004634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fc34 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f973 	bl	80048cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d175      	bne.n	8004748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Transmit+0x2c>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e06e      	b.n	800474a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2221      	movs	r2, #33	; 0x21
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467a:	f7fd fdeb 	bl	8002254 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b0:	e02e      	b.n	8004710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f848 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e03a      	b.n	800474a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e007      	b.n	8004702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cb      	bne.n	80046b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f814 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e006      	b.n	800474a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	e03b      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800476a:	d037      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd fd72 	bl	8002254 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <UART_WaitOnFlagUntilTimeout+0x30>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e03a      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d023      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d020      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d01d      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d116      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f81d 	bl	8004804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2208      	movs	r2, #8
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d0b4      	beq.n	8004764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b095      	sub	sp, #84	; 0x54
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800482c:	643a      	str	r2, [r7, #64]	; 0x40
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d119      	bne.n	80048b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489c:	61ba      	str	r2, [r7, #24]
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048be:	bf00      	nop
 80048c0:	3754      	adds	r7, #84	; 0x54
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d0:	b0c0      	sub	sp, #256	; 0x100
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	ea40 0301 	orr.w	r3, r0, r1
 80048f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004924:	f021 010c 	bic.w	r1, r1, #12
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004932:	430b      	orrs	r3, r1
 8004934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	6999      	ldr	r1, [r3, #24]
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	ea40 0301 	orr.w	r3, r0, r1
 8004952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8f      	ldr	r3, [pc, #572]	; (8004b98 <UART_SetConfig+0x2cc>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d005      	beq.n	800496c <UART_SetConfig+0xa0>
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <UART_SetConfig+0x2d0>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d104      	bne.n	8004976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7ff f830 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8004970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004974:	e003      	b.n	800497e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004976:	f7ff f817 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 800497a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	f040 810c 	bne.w	8004ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800499a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049a6:	415b      	adcs	r3, r3
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ae:	4621      	mov	r1, r4
 80049b0:	eb12 0801 	adds.w	r8, r2, r1
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb43 0901 	adc.w	r9, r3, r1
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ce:	4690      	mov	r8, r2
 80049d0:	4699      	mov	r9, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	eb18 0303 	adds.w	r3, r8, r3
 80049d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049dc:	462b      	mov	r3, r5
 80049de:	eb49 0303 	adc.w	r3, r9, r3
 80049e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049fa:	460b      	mov	r3, r1
 80049fc:	18db      	adds	r3, r3, r3
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004a00:	4613      	mov	r3, r2
 8004a02:	eb42 0303 	adc.w	r3, r2, r3
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a10:	f7fb fe52 	bl	80006b8 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	011c      	lsls	r4, r3, #4
 8004a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a44:	4641      	mov	r1, r8
 8004a46:	eb12 0a01 	adds.w	sl, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a64:	4692      	mov	sl, r2
 8004a66:	469b      	mov	fp, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a72:	464b      	mov	r3, r9
 8004a74:	eb4b 0303 	adc.w	r3, fp, r3
 8004a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aa6:	f7fb fe07 	bl	80006b8 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2264      	movs	r2, #100	; 0x64
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	1acb      	subs	r3, r1, r3
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad4:	441c      	add	r4, r3
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af0:	415b      	adcs	r3, r3
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004af8:	4641      	mov	r1, r8
 8004afa:	1851      	adds	r1, r2, r1
 8004afc:	6339      	str	r1, [r7, #48]	; 0x30
 8004afe:	4649      	mov	r1, r9
 8004b00:	414b      	adcs	r3, r1
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b10:	4659      	mov	r1, fp
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4642      	mov	r2, r8
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	18db      	adds	r3, r3, r3
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b52:	4613      	mov	r3, r2
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b62:	f7fb fda9 	bl	80006b8 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0207 	and.w	r2, r3, #7
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4422      	add	r2, r4
 8004b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b94:	e106      	b.n	8004da4 <UART_SetConfig+0x4d8>
 8004b96:	bf00      	nop
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40011400 	.word	0x40011400
 8004ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	6239      	str	r1, [r7, #32]
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	1854      	adds	r4, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb43 0501 	adc.w	r5, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bec:	464b      	mov	r3, r9
 8004bee:	eb45 0303 	adc.w	r3, r5, r3
 8004bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c12:	4629      	mov	r1, r5
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	008a      	lsls	r2, r1, #2
 8004c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c24:	f7fb fd48 	bl	80006b8 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	61b9      	str	r1, [r7, #24]
 8004c50:	415b      	adcs	r3, r3
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c58:	4641      	mov	r1, r8
 8004c5a:	1851      	adds	r1, r2, r1
 8004c5c:	6139      	str	r1, [r7, #16]
 8004c5e:	4649      	mov	r1, r9
 8004c60:	414b      	adcs	r3, r1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c70:	4659      	mov	r1, fp
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	00ca      	lsls	r2, r1, #3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	4642      	mov	r2, r8
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cba:	4641      	mov	r1, r8
 8004cbc:	008a      	lsls	r2, r1, #2
 8004cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cc2:	f7fb fcf9 	bl	80006b8 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004cce:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2264      	movs	r2, #100	; 0x64
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	1acb      	subs	r3, r1, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	441c      	add	r4, r3
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf6:	677a      	str	r2, [r7, #116]	; 0x74
 8004cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	415b      	adcs	r3, r3
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d3e:	464b      	mov	r3, r9
 8004d40:	460a      	mov	r2, r1
 8004d42:	eb42 0303 	adc.w	r3, r2, r3
 8004d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
 8004d52:	667a      	str	r2, [r7, #100]	; 0x64
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d72:	f7fb fca1 	bl	80006b8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004daa:	46bd      	mov	sp, r7
 8004dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db0:	51eb851f 	.word	0x51eb851f

08004db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 001c 	add.w	r0, r7, #28
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d123      	bne.n	8004e16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004df6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 faa0 	bl	8005350 <USB_CoreReset>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	e01b      	b.n	8004e4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa94 	bl	8005350 <USB_CoreReset>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e40:	e005      	b.n	8004e4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e4e:	7fbb      	ldrb	r3, [r7, #30]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10b      	bne.n	8004e6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f043 0206 	orr.w	r2, r3, #6
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e78:	b004      	add	sp, #16
 8004e7a:	4770      	bx	lr

08004e7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f023 0201 	bic.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d115      	bne.n	8004eec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f7fd f9cd 	bl	800226c <HAL_Delay>
      ms += 10U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	330a      	adds	r3, #10
 8004ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa2b 	bl	8005334 <USB_GetMode>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d01e      	beq.n	8004f22 <USB_SetCurrentMode+0x84>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2bc7      	cmp	r3, #199	; 0xc7
 8004ee8:	d9f0      	bls.n	8004ecc <USB_SetCurrentMode+0x2e>
 8004eea:	e01a      	b.n	8004f22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d115      	bne.n	8004f1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004efe:	200a      	movs	r0, #10
 8004f00:	f7fd f9b4 	bl	800226c <HAL_Delay>
      ms += 10U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	330a      	adds	r3, #10
 8004f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa12 	bl	8005334 <USB_GetMode>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <USB_SetCurrentMode+0x84>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2bc7      	cmp	r3, #199	; 0xc7
 8004f1a:	d9f0      	bls.n	8004efe <USB_SetCurrentMode+0x60>
 8004f1c:	e001      	b.n	8004f22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e005      	b.n	8004f2e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2bc8      	cmp	r3, #200	; 0xc8
 8004f26:	d101      	bne.n	8004f2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f38:	b084      	sub	sp, #16
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	e009      	b.n	8004f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3340      	adds	r3, #64	; 0x40
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b0e      	cmp	r3, #14
 8004f70:	d9f2      	bls.n	8004f58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11c      	bne.n	8004fb4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004fb2:	e00b      	b.n	8004fcc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10d      	bne.n	8004ffc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f968 	bl	80052c0 <USB_SetDevSpeed>
 8004ff0:	e008      	b.n	8005004 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f963 	bl	80052c0 <USB_SetDevSpeed>
 8004ffa:	e003      	b.n	8005004 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f95e 	bl	80052c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005004:	2110      	movs	r1, #16
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8fa 	bl	8005200 <USB_FlushTxFifo>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f924 	bl	8005264 <USB_FlushRxFifo>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e043      	b.n	80050d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005066:	d118      	bne.n	800509a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e013      	b.n	80050ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e008      	b.n	80050ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	461a      	mov	r2, r3
 80050cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050dc:	461a      	mov	r2, r3
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d3b5      	bcc.n	8005050 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e043      	b.n	8005172 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005100:	d118      	bne.n	8005134 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e013      	b.n	8005146 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e008      	b.n	8005146 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	461a      	mov	r2, r3
 8005154:	2300      	movs	r3, #0
 8005156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	461a      	mov	r2, r3
 8005166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800516a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005176:	461a      	mov	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4293      	cmp	r3, r2
 800517c:	d3b5      	bcc.n	80050ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005190:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800519e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f043 0210 	orr.w	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <USB_DevInit+0x2c4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 0208 	orr.w	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d107      	bne.n	80051ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e4:	f043 0304 	orr.w	r3, r3, #4
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	803c3800 	.word	0x803c3800

08005200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800521a:	d901      	bls.n	8005220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e01b      	b.n	8005258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	daf2      	bge.n	800520e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	019b      	lsls	r3, r3, #6
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005244:	d901      	bls.n	800524a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e006      	b.n	8005258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b20      	cmp	r3, #32
 8005254:	d0f0      	beq.n	8005238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800527c:	d901      	bls.n	8005282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e018      	b.n	80052b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	daf2      	bge.n	8005270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2210      	movs	r2, #16
 8005292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052a0:	d901      	bls.n	80052a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e006      	b.n	80052b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d0f0      	beq.n	8005294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005320:	f043 0302 	orr.w	r3, r3, #2
 8005324:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0301 	and.w	r3, r3, #1
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005368:	d901      	bls.n	800536e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e01b      	b.n	80053a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	daf2      	bge.n	800535c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f043 0201 	orr.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005392:	d901      	bls.n	8005398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e006      	b.n	80053a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d0f0      	beq.n	8005386 <USB_CoreReset+0x36>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <std>:
 80053b4:	2300      	movs	r3, #0
 80053b6:	b510      	push	{r4, lr}
 80053b8:	4604      	mov	r4, r0
 80053ba:	e9c0 3300 	strd	r3, r3, [r0]
 80053be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053c2:	6083      	str	r3, [r0, #8]
 80053c4:	8181      	strh	r1, [r0, #12]
 80053c6:	6643      	str	r3, [r0, #100]	; 0x64
 80053c8:	81c2      	strh	r2, [r0, #14]
 80053ca:	6183      	str	r3, [r0, #24]
 80053cc:	4619      	mov	r1, r3
 80053ce:	2208      	movs	r2, #8
 80053d0:	305c      	adds	r0, #92	; 0x5c
 80053d2:	f000 fa05 	bl	80057e0 <memset>
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <std+0x58>)
 80053d8:	6263      	str	r3, [r4, #36]	; 0x24
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <std+0x5c>)
 80053dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <std+0x60>)
 80053e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <std+0x64>)
 80053e4:	6323      	str	r3, [r4, #48]	; 0x30
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <std+0x68>)
 80053e8:	6224      	str	r4, [r4, #32]
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d006      	beq.n	80053fc <std+0x48>
 80053ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053f2:	4294      	cmp	r4, r2
 80053f4:	d002      	beq.n	80053fc <std+0x48>
 80053f6:	33d0      	adds	r3, #208	; 0xd0
 80053f8:	429c      	cmp	r4, r3
 80053fa:	d105      	bne.n	8005408 <std+0x54>
 80053fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f000 ba64 	b.w	80058d0 <__retarget_lock_init_recursive>
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop
 800540c:	08005631 	.word	0x08005631
 8005410:	08005653 	.word	0x08005653
 8005414:	0800568b 	.word	0x0800568b
 8005418:	080056af 	.word	0x080056af
 800541c:	200008b0 	.word	0x200008b0

08005420 <stdio_exit_handler>:
 8005420:	4a02      	ldr	r2, [pc, #8]	; (800542c <stdio_exit_handler+0xc>)
 8005422:	4903      	ldr	r1, [pc, #12]	; (8005430 <stdio_exit_handler+0x10>)
 8005424:	4803      	ldr	r0, [pc, #12]	; (8005434 <stdio_exit_handler+0x14>)
 8005426:	f000 b869 	b.w	80054fc <_fwalk_sglue>
 800542a:	bf00      	nop
 800542c:	2000000c 	.word	0x2000000c
 8005430:	080061a5 	.word	0x080061a5
 8005434:	20000018 	.word	0x20000018

08005438 <cleanup_stdio>:
 8005438:	6841      	ldr	r1, [r0, #4]
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <cleanup_stdio+0x34>)
 800543c:	4299      	cmp	r1, r3
 800543e:	b510      	push	{r4, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	d001      	beq.n	8005448 <cleanup_stdio+0x10>
 8005444:	f000 feae 	bl	80061a4 <_fflush_r>
 8005448:	68a1      	ldr	r1, [r4, #8]
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <cleanup_stdio+0x38>)
 800544c:	4299      	cmp	r1, r3
 800544e:	d002      	beq.n	8005456 <cleanup_stdio+0x1e>
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fea7 	bl	80061a4 <_fflush_r>
 8005456:	68e1      	ldr	r1, [r4, #12]
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <cleanup_stdio+0x3c>)
 800545a:	4299      	cmp	r1, r3
 800545c:	d004      	beq.n	8005468 <cleanup_stdio+0x30>
 800545e:	4620      	mov	r0, r4
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	f000 be9e 	b.w	80061a4 <_fflush_r>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	200008b0 	.word	0x200008b0
 8005470:	20000918 	.word	0x20000918
 8005474:	20000980 	.word	0x20000980

08005478 <global_stdio_init.part.0>:
 8005478:	b510      	push	{r4, lr}
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <global_stdio_init.part.0+0x30>)
 800547c:	4c0b      	ldr	r4, [pc, #44]	; (80054ac <global_stdio_init.part.0+0x34>)
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <global_stdio_init.part.0+0x38>)
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	4620      	mov	r0, r4
 8005484:	2200      	movs	r2, #0
 8005486:	2104      	movs	r1, #4
 8005488:	f7ff ff94 	bl	80053b4 <std>
 800548c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005490:	2201      	movs	r2, #1
 8005492:	2109      	movs	r1, #9
 8005494:	f7ff ff8e 	bl	80053b4 <std>
 8005498:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800549c:	2202      	movs	r2, #2
 800549e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a2:	2112      	movs	r1, #18
 80054a4:	f7ff bf86 	b.w	80053b4 <std>
 80054a8:	200009e8 	.word	0x200009e8
 80054ac:	200008b0 	.word	0x200008b0
 80054b0:	08005421 	.word	0x08005421

080054b4 <__sfp_lock_acquire>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sfp_lock_acquire+0x8>)
 80054b6:	f000 ba0c 	b.w	80058d2 <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	200009f1 	.word	0x200009f1

080054c0 <__sfp_lock_release>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sfp_lock_release+0x8>)
 80054c2:	f000 ba07 	b.w	80058d4 <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	200009f1 	.word	0x200009f1

080054cc <__sinit>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7ff fff0 	bl	80054b4 <__sfp_lock_acquire>
 80054d4:	6a23      	ldr	r3, [r4, #32]
 80054d6:	b11b      	cbz	r3, 80054e0 <__sinit+0x14>
 80054d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054dc:	f7ff bff0 	b.w	80054c0 <__sfp_lock_release>
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <__sinit+0x28>)
 80054e2:	6223      	str	r3, [r4, #32]
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <__sinit+0x2c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f5      	bne.n	80054d8 <__sinit+0xc>
 80054ec:	f7ff ffc4 	bl	8005478 <global_stdio_init.part.0>
 80054f0:	e7f2      	b.n	80054d8 <__sinit+0xc>
 80054f2:	bf00      	nop
 80054f4:	08005439 	.word	0x08005439
 80054f8:	200009e8 	.word	0x200009e8

080054fc <_fwalk_sglue>:
 80054fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	4607      	mov	r7, r0
 8005502:	4688      	mov	r8, r1
 8005504:	4614      	mov	r4, r2
 8005506:	2600      	movs	r6, #0
 8005508:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800550c:	f1b9 0901 	subs.w	r9, r9, #1
 8005510:	d505      	bpl.n	800551e <_fwalk_sglue+0x22>
 8005512:	6824      	ldr	r4, [r4, #0]
 8005514:	2c00      	cmp	r4, #0
 8005516:	d1f7      	bne.n	8005508 <_fwalk_sglue+0xc>
 8005518:	4630      	mov	r0, r6
 800551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d907      	bls.n	8005534 <_fwalk_sglue+0x38>
 8005524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005528:	3301      	adds	r3, #1
 800552a:	d003      	beq.n	8005534 <_fwalk_sglue+0x38>
 800552c:	4629      	mov	r1, r5
 800552e:	4638      	mov	r0, r7
 8005530:	47c0      	blx	r8
 8005532:	4306      	orrs	r6, r0
 8005534:	3568      	adds	r5, #104	; 0x68
 8005536:	e7e9      	b.n	800550c <_fwalk_sglue+0x10>

08005538 <_puts_r>:
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b570      	push	{r4, r5, r6, lr}
 800553c:	6884      	ldr	r4, [r0, #8]
 800553e:	4605      	mov	r5, r0
 8005540:	460e      	mov	r6, r1
 8005542:	b90b      	cbnz	r3, 8005548 <_puts_r+0x10>
 8005544:	f7ff ffc2 	bl	80054cc <__sinit>
 8005548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800554a:	07db      	lsls	r3, r3, #31
 800554c:	d405      	bmi.n	800555a <_puts_r+0x22>
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	0598      	lsls	r0, r3, #22
 8005552:	d402      	bmi.n	800555a <_puts_r+0x22>
 8005554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005556:	f000 f9bc 	bl	80058d2 <__retarget_lock_acquire_recursive>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	0719      	lsls	r1, r3, #28
 800555e:	d513      	bpl.n	8005588 <_puts_r+0x50>
 8005560:	6923      	ldr	r3, [r4, #16]
 8005562:	b18b      	cbz	r3, 8005588 <_puts_r+0x50>
 8005564:	3e01      	subs	r6, #1
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800556c:	3b01      	subs	r3, #1
 800556e:	60a3      	str	r3, [r4, #8]
 8005570:	b9e9      	cbnz	r1, 80055ae <_puts_r+0x76>
 8005572:	2b00      	cmp	r3, #0
 8005574:	da2e      	bge.n	80055d4 <_puts_r+0x9c>
 8005576:	4622      	mov	r2, r4
 8005578:	210a      	movs	r1, #10
 800557a:	4628      	mov	r0, r5
 800557c:	f000 f89b 	bl	80056b6 <__swbuf_r>
 8005580:	3001      	adds	r0, #1
 8005582:	d007      	beq.n	8005594 <_puts_r+0x5c>
 8005584:	250a      	movs	r5, #10
 8005586:	e007      	b.n	8005598 <_puts_r+0x60>
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f8d0 	bl	8005730 <__swsetup_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0e7      	beq.n	8005564 <_puts_r+0x2c>
 8005594:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559a:	07da      	lsls	r2, r3, #31
 800559c:	d405      	bmi.n	80055aa <_puts_r+0x72>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	059b      	lsls	r3, r3, #22
 80055a2:	d402      	bmi.n	80055aa <_puts_r+0x72>
 80055a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055a6:	f000 f995 	bl	80058d4 <__retarget_lock_release_recursive>
 80055aa:	4628      	mov	r0, r5
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da04      	bge.n	80055bc <_puts_r+0x84>
 80055b2:	69a2      	ldr	r2, [r4, #24]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	dc06      	bgt.n	80055c6 <_puts_r+0x8e>
 80055b8:	290a      	cmp	r1, #10
 80055ba:	d004      	beq.n	80055c6 <_puts_r+0x8e>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	7019      	strb	r1, [r3, #0]
 80055c4:	e7cf      	b.n	8005566 <_puts_r+0x2e>
 80055c6:	4622      	mov	r2, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 f874 	bl	80056b6 <__swbuf_r>
 80055ce:	3001      	adds	r0, #1
 80055d0:	d1c9      	bne.n	8005566 <_puts_r+0x2e>
 80055d2:	e7df      	b.n	8005594 <_puts_r+0x5c>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	250a      	movs	r5, #10
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	6022      	str	r2, [r4, #0]
 80055dc:	701d      	strb	r5, [r3, #0]
 80055de:	e7db      	b.n	8005598 <_puts_r+0x60>

080055e0 <puts>:
 80055e0:	4b02      	ldr	r3, [pc, #8]	; (80055ec <puts+0xc>)
 80055e2:	4601      	mov	r1, r0
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f7ff bfa7 	b.w	8005538 <_puts_r>
 80055ea:	bf00      	nop
 80055ec:	20000064 	.word	0x20000064

080055f0 <siprintf>:
 80055f0:	b40e      	push	{r1, r2, r3}
 80055f2:	b500      	push	{lr}
 80055f4:	b09c      	sub	sp, #112	; 0x70
 80055f6:	ab1d      	add	r3, sp, #116	; 0x74
 80055f8:	9002      	str	r0, [sp, #8]
 80055fa:	9006      	str	r0, [sp, #24]
 80055fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005600:	4809      	ldr	r0, [pc, #36]	; (8005628 <siprintf+0x38>)
 8005602:	9107      	str	r1, [sp, #28]
 8005604:	9104      	str	r1, [sp, #16]
 8005606:	4909      	ldr	r1, [pc, #36]	; (800562c <siprintf+0x3c>)
 8005608:	f853 2b04 	ldr.w	r2, [r3], #4
 800560c:	9105      	str	r1, [sp, #20]
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	a902      	add	r1, sp, #8
 8005614:	f000 fab2 	bl	8005b7c <_svfiprintf_r>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	b01c      	add	sp, #112	; 0x70
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	b003      	add	sp, #12
 8005626:	4770      	bx	lr
 8005628:	20000064 	.word	0x20000064
 800562c:	ffff0208 	.word	0xffff0208

08005630 <__sread>:
 8005630:	b510      	push	{r4, lr}
 8005632:	460c      	mov	r4, r1
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	f000 f8fc 	bl	8005834 <_read_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	bfab      	itete	ge
 8005640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005642:	89a3      	ldrhlt	r3, [r4, #12]
 8005644:	181b      	addge	r3, r3, r0
 8005646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800564a:	bfac      	ite	ge
 800564c:	6563      	strge	r3, [r4, #84]	; 0x54
 800564e:	81a3      	strhlt	r3, [r4, #12]
 8005650:	bd10      	pop	{r4, pc}

08005652 <__swrite>:
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	461f      	mov	r7, r3
 8005658:	898b      	ldrh	r3, [r1, #12]
 800565a:	05db      	lsls	r3, r3, #23
 800565c:	4605      	mov	r5, r0
 800565e:	460c      	mov	r4, r1
 8005660:	4616      	mov	r6, r2
 8005662:	d505      	bpl.n	8005670 <__swrite+0x1e>
 8005664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005668:	2302      	movs	r3, #2
 800566a:	2200      	movs	r2, #0
 800566c:	f000 f8d0 	bl	8005810 <_lseek_r>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567a:	81a3      	strh	r3, [r4, #12]
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	4628      	mov	r0, r5
 8005682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	f000 b8e7 	b.w	8005858 <_write_r>

0800568a <__sseek>:
 800568a:	b510      	push	{r4, lr}
 800568c:	460c      	mov	r4, r1
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	f000 f8bd 	bl	8005810 <_lseek_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	bf15      	itete	ne
 800569c:	6560      	strne	r0, [r4, #84]	; 0x54
 800569e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056a6:	81a3      	strheq	r3, [r4, #12]
 80056a8:	bf18      	it	ne
 80056aa:	81a3      	strhne	r3, [r4, #12]
 80056ac:	bd10      	pop	{r4, pc}

080056ae <__sclose>:
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 b89d 	b.w	80057f0 <_close_r>

080056b6 <__swbuf_r>:
 80056b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b8:	460e      	mov	r6, r1
 80056ba:	4614      	mov	r4, r2
 80056bc:	4605      	mov	r5, r0
 80056be:	b118      	cbz	r0, 80056c8 <__swbuf_r+0x12>
 80056c0:	6a03      	ldr	r3, [r0, #32]
 80056c2:	b90b      	cbnz	r3, 80056c8 <__swbuf_r+0x12>
 80056c4:	f7ff ff02 	bl	80054cc <__sinit>
 80056c8:	69a3      	ldr	r3, [r4, #24]
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	071a      	lsls	r2, r3, #28
 80056d0:	d525      	bpl.n	800571e <__swbuf_r+0x68>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	b31b      	cbz	r3, 800571e <__swbuf_r+0x68>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	1a98      	subs	r0, r3, r2
 80056dc:	6963      	ldr	r3, [r4, #20]
 80056de:	b2f6      	uxtb	r6, r6
 80056e0:	4283      	cmp	r3, r0
 80056e2:	4637      	mov	r7, r6
 80056e4:	dc04      	bgt.n	80056f0 <__swbuf_r+0x3a>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 fd5b 	bl	80061a4 <_fflush_r>
 80056ee:	b9e0      	cbnz	r0, 800572a <__swbuf_r+0x74>
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60a3      	str	r3, [r4, #8]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	6022      	str	r2, [r4, #0]
 80056fc:	701e      	strb	r6, [r3, #0]
 80056fe:	6962      	ldr	r2, [r4, #20]
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	429a      	cmp	r2, r3
 8005704:	d004      	beq.n	8005710 <__swbuf_r+0x5a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	07db      	lsls	r3, r3, #31
 800570a:	d506      	bpl.n	800571a <__swbuf_r+0x64>
 800570c:	2e0a      	cmp	r6, #10
 800570e:	d104      	bne.n	800571a <__swbuf_r+0x64>
 8005710:	4621      	mov	r1, r4
 8005712:	4628      	mov	r0, r5
 8005714:	f000 fd46 	bl	80061a4 <_fflush_r>
 8005718:	b938      	cbnz	r0, 800572a <__swbuf_r+0x74>
 800571a:	4638      	mov	r0, r7
 800571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800571e:	4621      	mov	r1, r4
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f805 	bl	8005730 <__swsetup_r>
 8005726:	2800      	cmp	r0, #0
 8005728:	d0d5      	beq.n	80056d6 <__swbuf_r+0x20>
 800572a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800572e:	e7f4      	b.n	800571a <__swbuf_r+0x64>

08005730 <__swsetup_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <__swsetup_r+0xac>)
 8005734:	4605      	mov	r5, r0
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	460c      	mov	r4, r1
 800573a:	b118      	cbz	r0, 8005744 <__swsetup_r+0x14>
 800573c:	6a03      	ldr	r3, [r0, #32]
 800573e:	b90b      	cbnz	r3, 8005744 <__swsetup_r+0x14>
 8005740:	f7ff fec4 	bl	80054cc <__sinit>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800574a:	0718      	lsls	r0, r3, #28
 800574c:	d422      	bmi.n	8005794 <__swsetup_r+0x64>
 800574e:	06d9      	lsls	r1, r3, #27
 8005750:	d407      	bmi.n	8005762 <__swsetup_r+0x32>
 8005752:	2309      	movs	r3, #9
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	e034      	b.n	80057cc <__swsetup_r+0x9c>
 8005762:	0758      	lsls	r0, r3, #29
 8005764:	d512      	bpl.n	800578c <__swsetup_r+0x5c>
 8005766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005768:	b141      	cbz	r1, 800577c <__swsetup_r+0x4c>
 800576a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800576e:	4299      	cmp	r1, r3
 8005770:	d002      	beq.n	8005778 <__swsetup_r+0x48>
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f8b0 	bl	80058d8 <_free_r>
 8005778:	2300      	movs	r3, #0
 800577a:	6363      	str	r3, [r4, #52]	; 0x34
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	2300      	movs	r3, #0
 8005786:	6063      	str	r3, [r4, #4]
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f043 0308 	orr.w	r3, r3, #8
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	b94b      	cbnz	r3, 80057ac <__swsetup_r+0x7c>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d003      	beq.n	80057ac <__swsetup_r+0x7c>
 80057a4:	4621      	mov	r1, r4
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fd4a 	bl	8006240 <__smakebuf_r>
 80057ac:	89a0      	ldrh	r0, [r4, #12]
 80057ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b2:	f010 0301 	ands.w	r3, r0, #1
 80057b6:	d00a      	beq.n	80057ce <__swsetup_r+0x9e>
 80057b8:	2300      	movs	r3, #0
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	6963      	ldr	r3, [r4, #20]
 80057be:	425b      	negs	r3, r3
 80057c0:	61a3      	str	r3, [r4, #24]
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	b943      	cbnz	r3, 80057d8 <__swsetup_r+0xa8>
 80057c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057ca:	d1c4      	bne.n	8005756 <__swsetup_r+0x26>
 80057cc:	bd38      	pop	{r3, r4, r5, pc}
 80057ce:	0781      	lsls	r1, r0, #30
 80057d0:	bf58      	it	pl
 80057d2:	6963      	ldrpl	r3, [r4, #20]
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	e7f4      	b.n	80057c2 <__swsetup_r+0x92>
 80057d8:	2000      	movs	r0, #0
 80057da:	e7f7      	b.n	80057cc <__swsetup_r+0x9c>
 80057dc:	20000064 	.word	0x20000064

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <_close_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d06      	ldr	r5, [pc, #24]	; (800580c <_close_r+0x1c>)
 80057f4:	2300      	movs	r3, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	f7fc fc1d 	bl	800203a <_close>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d102      	bne.n	800580a <_close_r+0x1a>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	b103      	cbz	r3, 800580a <_close_r+0x1a>
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	200009ec 	.word	0x200009ec

08005810 <_lseek_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d07      	ldr	r5, [pc, #28]	; (8005830 <_lseek_r+0x20>)
 8005814:	4604      	mov	r4, r0
 8005816:	4608      	mov	r0, r1
 8005818:	4611      	mov	r1, r2
 800581a:	2200      	movs	r2, #0
 800581c:	602a      	str	r2, [r5, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	f7fc fc32 	bl	8002088 <_lseek>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_lseek_r+0x1e>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_lseek_r+0x1e>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	200009ec 	.word	0x200009ec

08005834 <_read_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d07      	ldr	r5, [pc, #28]	; (8005854 <_read_r+0x20>)
 8005838:	4604      	mov	r4, r0
 800583a:	4608      	mov	r0, r1
 800583c:	4611      	mov	r1, r2
 800583e:	2200      	movs	r2, #0
 8005840:	602a      	str	r2, [r5, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	f7fc fbc0 	bl	8001fc8 <_read>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_read_r+0x1e>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_read_r+0x1e>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200009ec 	.word	0x200009ec

08005858 <_write_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d07      	ldr	r5, [pc, #28]	; (8005878 <_write_r+0x20>)
 800585c:	4604      	mov	r4, r0
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	2200      	movs	r2, #0
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f7fc fbcb 	bl	8002002 <_write>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_write_r+0x1e>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_write_r+0x1e>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	200009ec 	.word	0x200009ec

0800587c <__errno>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <__errno+0x8>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000064 	.word	0x20000064

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4d0d      	ldr	r5, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2600      	movs	r6, #0
 8005894:	42a6      	cmp	r6, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4d0b      	ldr	r5, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f000 fd9e 	bl	80063dc <_init>
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2600      	movs	r6, #0
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b0:	4798      	blx	r3
 80058b2:	3601      	adds	r6, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ba:	4798      	blx	r3
 80058bc:	3601      	adds	r6, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	08006454 	.word	0x08006454
 80058c4:	08006454 	.word	0x08006454
 80058c8:	08006454 	.word	0x08006454
 80058cc:	08006458 	.word	0x08006458

080058d0 <__retarget_lock_init_recursive>:
 80058d0:	4770      	bx	lr

080058d2 <__retarget_lock_acquire_recursive>:
 80058d2:	4770      	bx	lr

080058d4 <__retarget_lock_release_recursive>:
 80058d4:	4770      	bx	lr
	...

080058d8 <_free_r>:
 80058d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058da:	2900      	cmp	r1, #0
 80058dc:	d044      	beq.n	8005968 <_free_r+0x90>
 80058de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e2:	9001      	str	r0, [sp, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ea:	bfb8      	it	lt
 80058ec:	18e4      	addlt	r4, r4, r3
 80058ee:	f000 f8df 	bl	8005ab0 <__malloc_lock>
 80058f2:	4a1e      	ldr	r2, [pc, #120]	; (800596c <_free_r+0x94>)
 80058f4:	9801      	ldr	r0, [sp, #4]
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	b933      	cbnz	r3, 8005908 <_free_r+0x30>
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	6014      	str	r4, [r2, #0]
 80058fe:	b003      	add	sp, #12
 8005900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005904:	f000 b8da 	b.w	8005abc <__malloc_unlock>
 8005908:	42a3      	cmp	r3, r4
 800590a:	d908      	bls.n	800591e <_free_r+0x46>
 800590c:	6825      	ldr	r5, [r4, #0]
 800590e:	1961      	adds	r1, r4, r5
 8005910:	428b      	cmp	r3, r1
 8005912:	bf01      	itttt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	1949      	addeq	r1, r1, r5
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	e7ed      	b.n	80058fa <_free_r+0x22>
 800591e:	461a      	mov	r2, r3
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b10b      	cbz	r3, 8005928 <_free_r+0x50>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d9fa      	bls.n	800591e <_free_r+0x46>
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	1855      	adds	r5, r2, r1
 800592c:	42a5      	cmp	r5, r4
 800592e:	d10b      	bne.n	8005948 <_free_r+0x70>
 8005930:	6824      	ldr	r4, [r4, #0]
 8005932:	4421      	add	r1, r4
 8005934:	1854      	adds	r4, r2, r1
 8005936:	42a3      	cmp	r3, r4
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	d1e0      	bne.n	80058fe <_free_r+0x26>
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	6053      	str	r3, [r2, #4]
 8005942:	440c      	add	r4, r1
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	e7da      	b.n	80058fe <_free_r+0x26>
 8005948:	d902      	bls.n	8005950 <_free_r+0x78>
 800594a:	230c      	movs	r3, #12
 800594c:	6003      	str	r3, [r0, #0]
 800594e:	e7d6      	b.n	80058fe <_free_r+0x26>
 8005950:	6825      	ldr	r5, [r4, #0]
 8005952:	1961      	adds	r1, r4, r5
 8005954:	428b      	cmp	r3, r1
 8005956:	bf04      	itt	eq
 8005958:	6819      	ldreq	r1, [r3, #0]
 800595a:	685b      	ldreq	r3, [r3, #4]
 800595c:	6063      	str	r3, [r4, #4]
 800595e:	bf04      	itt	eq
 8005960:	1949      	addeq	r1, r1, r5
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	6054      	str	r4, [r2, #4]
 8005966:	e7ca      	b.n	80058fe <_free_r+0x26>
 8005968:	b003      	add	sp, #12
 800596a:	bd30      	pop	{r4, r5, pc}
 800596c:	200009f4 	.word	0x200009f4

08005970 <sbrk_aligned>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	4e0e      	ldr	r6, [pc, #56]	; (80059ac <sbrk_aligned+0x3c>)
 8005974:	460c      	mov	r4, r1
 8005976:	6831      	ldr	r1, [r6, #0]
 8005978:	4605      	mov	r5, r0
 800597a:	b911      	cbnz	r1, 8005982 <sbrk_aligned+0x12>
 800597c:	f000 fcd8 	bl	8006330 <_sbrk_r>
 8005980:	6030      	str	r0, [r6, #0]
 8005982:	4621      	mov	r1, r4
 8005984:	4628      	mov	r0, r5
 8005986:	f000 fcd3 	bl	8006330 <_sbrk_r>
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	d00a      	beq.n	80059a4 <sbrk_aligned+0x34>
 800598e:	1cc4      	adds	r4, r0, #3
 8005990:	f024 0403 	bic.w	r4, r4, #3
 8005994:	42a0      	cmp	r0, r4
 8005996:	d007      	beq.n	80059a8 <sbrk_aligned+0x38>
 8005998:	1a21      	subs	r1, r4, r0
 800599a:	4628      	mov	r0, r5
 800599c:	f000 fcc8 	bl	8006330 <_sbrk_r>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d101      	bne.n	80059a8 <sbrk_aligned+0x38>
 80059a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059a8:	4620      	mov	r0, r4
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	200009f8 	.word	0x200009f8

080059b0 <_malloc_r>:
 80059b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	1ccd      	adds	r5, r1, #3
 80059b6:	f025 0503 	bic.w	r5, r5, #3
 80059ba:	3508      	adds	r5, #8
 80059bc:	2d0c      	cmp	r5, #12
 80059be:	bf38      	it	cc
 80059c0:	250c      	movcc	r5, #12
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	4607      	mov	r7, r0
 80059c6:	db01      	blt.n	80059cc <_malloc_r+0x1c>
 80059c8:	42a9      	cmp	r1, r5
 80059ca:	d905      	bls.n	80059d8 <_malloc_r+0x28>
 80059cc:	230c      	movs	r3, #12
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	2600      	movs	r6, #0
 80059d2:	4630      	mov	r0, r6
 80059d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005aac <_malloc_r+0xfc>
 80059dc:	f000 f868 	bl	8005ab0 <__malloc_lock>
 80059e0:	f8d8 3000 	ldr.w	r3, [r8]
 80059e4:	461c      	mov	r4, r3
 80059e6:	bb5c      	cbnz	r4, 8005a40 <_malloc_r+0x90>
 80059e8:	4629      	mov	r1, r5
 80059ea:	4638      	mov	r0, r7
 80059ec:	f7ff ffc0 	bl	8005970 <sbrk_aligned>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	4604      	mov	r4, r0
 80059f4:	d155      	bne.n	8005aa2 <_malloc_r+0xf2>
 80059f6:	f8d8 4000 	ldr.w	r4, [r8]
 80059fa:	4626      	mov	r6, r4
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	d145      	bne.n	8005a8c <_malloc_r+0xdc>
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d048      	beq.n	8005a96 <_malloc_r+0xe6>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	4631      	mov	r1, r6
 8005a08:	4638      	mov	r0, r7
 8005a0a:	eb04 0903 	add.w	r9, r4, r3
 8005a0e:	f000 fc8f 	bl	8006330 <_sbrk_r>
 8005a12:	4581      	cmp	r9, r0
 8005a14:	d13f      	bne.n	8005a96 <_malloc_r+0xe6>
 8005a16:	6821      	ldr	r1, [r4, #0]
 8005a18:	1a6d      	subs	r5, r5, r1
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff ffa7 	bl	8005970 <sbrk_aligned>
 8005a22:	3001      	adds	r0, #1
 8005a24:	d037      	beq.n	8005a96 <_malloc_r+0xe6>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	442b      	add	r3, r5
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d038      	beq.n	8005aa6 <_malloc_r+0xf6>
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	42a2      	cmp	r2, r4
 8005a38:	d12b      	bne.n	8005a92 <_malloc_r+0xe2>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e00f      	b.n	8005a60 <_malloc_r+0xb0>
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	1b52      	subs	r2, r2, r5
 8005a44:	d41f      	bmi.n	8005a86 <_malloc_r+0xd6>
 8005a46:	2a0b      	cmp	r2, #11
 8005a48:	d917      	bls.n	8005a7a <_malloc_r+0xca>
 8005a4a:	1961      	adds	r1, r4, r5
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	6025      	str	r5, [r4, #0]
 8005a50:	bf18      	it	ne
 8005a52:	6059      	strne	r1, [r3, #4]
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	bf08      	it	eq
 8005a58:	f8c8 1000 	streq.w	r1, [r8]
 8005a5c:	5162      	str	r2, [r4, r5]
 8005a5e:	604b      	str	r3, [r1, #4]
 8005a60:	4638      	mov	r0, r7
 8005a62:	f104 060b 	add.w	r6, r4, #11
 8005a66:	f000 f829 	bl	8005abc <__malloc_unlock>
 8005a6a:	f026 0607 	bic.w	r6, r6, #7
 8005a6e:	1d23      	adds	r3, r4, #4
 8005a70:	1af2      	subs	r2, r6, r3
 8005a72:	d0ae      	beq.n	80059d2 <_malloc_r+0x22>
 8005a74:	1b9b      	subs	r3, r3, r6
 8005a76:	50a3      	str	r3, [r4, r2]
 8005a78:	e7ab      	b.n	80059d2 <_malloc_r+0x22>
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	6862      	ldr	r2, [r4, #4]
 8005a7e:	d1dd      	bne.n	8005a3c <_malloc_r+0x8c>
 8005a80:	f8c8 2000 	str.w	r2, [r8]
 8005a84:	e7ec      	b.n	8005a60 <_malloc_r+0xb0>
 8005a86:	4623      	mov	r3, r4
 8005a88:	6864      	ldr	r4, [r4, #4]
 8005a8a:	e7ac      	b.n	80059e6 <_malloc_r+0x36>
 8005a8c:	4634      	mov	r4, r6
 8005a8e:	6876      	ldr	r6, [r6, #4]
 8005a90:	e7b4      	b.n	80059fc <_malloc_r+0x4c>
 8005a92:	4613      	mov	r3, r2
 8005a94:	e7cc      	b.n	8005a30 <_malloc_r+0x80>
 8005a96:	230c      	movs	r3, #12
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f000 f80e 	bl	8005abc <__malloc_unlock>
 8005aa0:	e797      	b.n	80059d2 <_malloc_r+0x22>
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	e7dc      	b.n	8005a60 <_malloc_r+0xb0>
 8005aa6:	605b      	str	r3, [r3, #4]
 8005aa8:	deff      	udf	#255	; 0xff
 8005aaa:	bf00      	nop
 8005aac:	200009f4 	.word	0x200009f4

08005ab0 <__malloc_lock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__malloc_lock+0x8>)
 8005ab2:	f7ff bf0e 	b.w	80058d2 <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	200009f0 	.word	0x200009f0

08005abc <__malloc_unlock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__malloc_unlock+0x8>)
 8005abe:	f7ff bf09 	b.w	80058d4 <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	200009f0 	.word	0x200009f0

08005ac8 <__ssputs_r>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	688e      	ldr	r6, [r1, #8]
 8005ace:	461f      	mov	r7, r3
 8005ad0:	42be      	cmp	r6, r7
 8005ad2:	680b      	ldr	r3, [r1, #0]
 8005ad4:	4682      	mov	sl, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	4690      	mov	r8, r2
 8005ada:	d82c      	bhi.n	8005b36 <__ssputs_r+0x6e>
 8005adc:	898a      	ldrh	r2, [r1, #12]
 8005ade:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ae2:	d026      	beq.n	8005b32 <__ssputs_r+0x6a>
 8005ae4:	6965      	ldr	r5, [r4, #20]
 8005ae6:	6909      	ldr	r1, [r1, #16]
 8005ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aec:	eba3 0901 	sub.w	r9, r3, r1
 8005af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005af4:	1c7b      	adds	r3, r7, #1
 8005af6:	444b      	add	r3, r9
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	429d      	cmp	r5, r3
 8005afc:	bf38      	it	cc
 8005afe:	461d      	movcc	r5, r3
 8005b00:	0553      	lsls	r3, r2, #21
 8005b02:	d527      	bpl.n	8005b54 <__ssputs_r+0x8c>
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7ff ff53 	bl	80059b0 <_malloc_r>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	b360      	cbz	r0, 8005b68 <__ssputs_r+0xa0>
 8005b0e:	6921      	ldr	r1, [r4, #16]
 8005b10:	464a      	mov	r2, r9
 8005b12:	f000 fc1d 	bl	8006350 <memcpy>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	6126      	str	r6, [r4, #16]
 8005b24:	6165      	str	r5, [r4, #20]
 8005b26:	444e      	add	r6, r9
 8005b28:	eba5 0509 	sub.w	r5, r5, r9
 8005b2c:	6026      	str	r6, [r4, #0]
 8005b2e:	60a5      	str	r5, [r4, #8]
 8005b30:	463e      	mov	r6, r7
 8005b32:	42be      	cmp	r6, r7
 8005b34:	d900      	bls.n	8005b38 <__ssputs_r+0x70>
 8005b36:	463e      	mov	r6, r7
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	f000 fbbb 	bl	80062b8 <memmove>
 8005b42:	68a3      	ldr	r3, [r4, #8]
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	60a3      	str	r3, [r4, #8]
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	4433      	add	r3, r6
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b54:	462a      	mov	r2, r5
 8005b56:	f000 fc09 	bl	800636c <_realloc_r>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d1e0      	bne.n	8005b22 <__ssputs_r+0x5a>
 8005b60:	6921      	ldr	r1, [r4, #16]
 8005b62:	4650      	mov	r0, sl
 8005b64:	f7ff feb8 	bl	80058d8 <_free_r>
 8005b68:	230c      	movs	r3, #12
 8005b6a:	f8ca 3000 	str.w	r3, [sl]
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b7a:	e7e9      	b.n	8005b50 <__ssputs_r+0x88>

08005b7c <_svfiprintf_r>:
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	4698      	mov	r8, r3
 8005b82:	898b      	ldrh	r3, [r1, #12]
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	b09d      	sub	sp, #116	; 0x74
 8005b88:	4607      	mov	r7, r0
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	d50e      	bpl.n	8005bae <_svfiprintf_r+0x32>
 8005b90:	690b      	ldr	r3, [r1, #16]
 8005b92:	b963      	cbnz	r3, 8005bae <_svfiprintf_r+0x32>
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	f7ff ff0b 	bl	80059b0 <_malloc_r>
 8005b9a:	6028      	str	r0, [r5, #0]
 8005b9c:	6128      	str	r0, [r5, #16]
 8005b9e:	b920      	cbnz	r0, 8005baa <_svfiprintf_r+0x2e>
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba8:	e0d0      	b.n	8005d4c <_svfiprintf_r+0x1d0>
 8005baa:	2340      	movs	r3, #64	; 0x40
 8005bac:	616b      	str	r3, [r5, #20]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bbc:	2330      	movs	r3, #48	; 0x30
 8005bbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d64 <_svfiprintf_r+0x1e8>
 8005bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bc6:	f04f 0901 	mov.w	r9, #1
 8005bca:	4623      	mov	r3, r4
 8005bcc:	469a      	mov	sl, r3
 8005bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd2:	b10a      	cbz	r2, 8005bd8 <_svfiprintf_r+0x5c>
 8005bd4:	2a25      	cmp	r2, #37	; 0x25
 8005bd6:	d1f9      	bne.n	8005bcc <_svfiprintf_r+0x50>
 8005bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005bdc:	d00b      	beq.n	8005bf6 <_svfiprintf_r+0x7a>
 8005bde:	465b      	mov	r3, fp
 8005be0:	4622      	mov	r2, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	4638      	mov	r0, r7
 8005be6:	f7ff ff6f 	bl	8005ac8 <__ssputs_r>
 8005bea:	3001      	adds	r0, #1
 8005bec:	f000 80a9 	beq.w	8005d42 <_svfiprintf_r+0x1c6>
 8005bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf2:	445a      	add	r2, fp
 8005bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8005bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80a1 	beq.w	8005d42 <_svfiprintf_r+0x1c6>
 8005c00:	2300      	movs	r3, #0
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0a:	f10a 0a01 	add.w	sl, sl, #1
 8005c0e:	9304      	str	r3, [sp, #16]
 8005c10:	9307      	str	r3, [sp, #28]
 8005c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c16:	931a      	str	r3, [sp, #104]	; 0x68
 8005c18:	4654      	mov	r4, sl
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c20:	4850      	ldr	r0, [pc, #320]	; (8005d64 <_svfiprintf_r+0x1e8>)
 8005c22:	f7fa faed 	bl	8000200 <memchr>
 8005c26:	9a04      	ldr	r2, [sp, #16]
 8005c28:	b9d8      	cbnz	r0, 8005c62 <_svfiprintf_r+0xe6>
 8005c2a:	06d0      	lsls	r0, r2, #27
 8005c2c:	bf44      	itt	mi
 8005c2e:	2320      	movmi	r3, #32
 8005c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c34:	0711      	lsls	r1, r2, #28
 8005c36:	bf44      	itt	mi
 8005c38:	232b      	movmi	r3, #43	; 0x2b
 8005c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c42:	2b2a      	cmp	r3, #42	; 0x2a
 8005c44:	d015      	beq.n	8005c72 <_svfiprintf_r+0xf6>
 8005c46:	9a07      	ldr	r2, [sp, #28]
 8005c48:	4654      	mov	r4, sl
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f04f 0c0a 	mov.w	ip, #10
 8005c50:	4621      	mov	r1, r4
 8005c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c56:	3b30      	subs	r3, #48	; 0x30
 8005c58:	2b09      	cmp	r3, #9
 8005c5a:	d94d      	bls.n	8005cf8 <_svfiprintf_r+0x17c>
 8005c5c:	b1b0      	cbz	r0, 8005c8c <_svfiprintf_r+0x110>
 8005c5e:	9207      	str	r2, [sp, #28]
 8005c60:	e014      	b.n	8005c8c <_svfiprintf_r+0x110>
 8005c62:	eba0 0308 	sub.w	r3, r0, r8
 8005c66:	fa09 f303 	lsl.w	r3, r9, r3
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	46a2      	mov	sl, r4
 8005c70:	e7d2      	b.n	8005c18 <_svfiprintf_r+0x9c>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	1d19      	adds	r1, r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	9103      	str	r1, [sp, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfbb      	ittet	lt
 8005c7e:	425b      	neglt	r3, r3
 8005c80:	f042 0202 	orrlt.w	r2, r2, #2
 8005c84:	9307      	strge	r3, [sp, #28]
 8005c86:	9307      	strlt	r3, [sp, #28]
 8005c88:	bfb8      	it	lt
 8005c8a:	9204      	strlt	r2, [sp, #16]
 8005c8c:	7823      	ldrb	r3, [r4, #0]
 8005c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c90:	d10c      	bne.n	8005cac <_svfiprintf_r+0x130>
 8005c92:	7863      	ldrb	r3, [r4, #1]
 8005c94:	2b2a      	cmp	r3, #42	; 0x2a
 8005c96:	d134      	bne.n	8005d02 <_svfiprintf_r+0x186>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	9203      	str	r2, [sp, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bfb8      	it	lt
 8005ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ca8:	3402      	adds	r4, #2
 8005caa:	9305      	str	r3, [sp, #20]
 8005cac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005d74 <_svfiprintf_r+0x1f8>
 8005cb0:	7821      	ldrb	r1, [r4, #0]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	f7fa faa3 	bl	8000200 <memchr>
 8005cba:	b138      	cbz	r0, 8005ccc <_svfiprintf_r+0x150>
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	eba0 000a 	sub.w	r0, r0, sl
 8005cc2:	2240      	movs	r2, #64	; 0x40
 8005cc4:	4082      	lsls	r2, r0
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	3401      	adds	r4, #1
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd0:	4825      	ldr	r0, [pc, #148]	; (8005d68 <_svfiprintf_r+0x1ec>)
 8005cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd6:	2206      	movs	r2, #6
 8005cd8:	f7fa fa92 	bl	8000200 <memchr>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d038      	beq.n	8005d52 <_svfiprintf_r+0x1d6>
 8005ce0:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <_svfiprintf_r+0x1f0>)
 8005ce2:	bb1b      	cbnz	r3, 8005d2c <_svfiprintf_r+0x1b0>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	3307      	adds	r3, #7
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	3308      	adds	r3, #8
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf2:	4433      	add	r3, r6
 8005cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf6:	e768      	b.n	8005bca <_svfiprintf_r+0x4e>
 8005cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e7a6      	b.n	8005c50 <_svfiprintf_r+0xd4>
 8005d02:	2300      	movs	r3, #0
 8005d04:	3401      	adds	r4, #1
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	f04f 0c0a 	mov.w	ip, #10
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d14:	3a30      	subs	r2, #48	; 0x30
 8005d16:	2a09      	cmp	r2, #9
 8005d18:	d903      	bls.n	8005d22 <_svfiprintf_r+0x1a6>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0c6      	beq.n	8005cac <_svfiprintf_r+0x130>
 8005d1e:	9105      	str	r1, [sp, #20]
 8005d20:	e7c4      	b.n	8005cac <_svfiprintf_r+0x130>
 8005d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d26:	4604      	mov	r4, r0
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7f0      	b.n	8005d0e <_svfiprintf_r+0x192>
 8005d2c:	ab03      	add	r3, sp, #12
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	462a      	mov	r2, r5
 8005d32:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <_svfiprintf_r+0x1f4>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	4638      	mov	r0, r7
 8005d38:	f3af 8000 	nop.w
 8005d3c:	1c42      	adds	r2, r0, #1
 8005d3e:	4606      	mov	r6, r0
 8005d40:	d1d6      	bne.n	8005cf0 <_svfiprintf_r+0x174>
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	065b      	lsls	r3, r3, #25
 8005d46:	f53f af2d 	bmi.w	8005ba4 <_svfiprintf_r+0x28>
 8005d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4c:	b01d      	add	sp, #116	; 0x74
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	ab03      	add	r3, sp, #12
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	462a      	mov	r2, r5
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <_svfiprintf_r+0x1f4>)
 8005d5a:	a904      	add	r1, sp, #16
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f000 f879 	bl	8005e54 <_printf_i>
 8005d62:	e7eb      	b.n	8005d3c <_svfiprintf_r+0x1c0>
 8005d64:	08006418 	.word	0x08006418
 8005d68:	08006422 	.word	0x08006422
 8005d6c:	00000000 	.word	0x00000000
 8005d70:	08005ac9 	.word	0x08005ac9
 8005d74:	0800641e 	.word	0x0800641e

08005d78 <_printf_common>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	4699      	mov	r9, r3
 8005d80:	688a      	ldr	r2, [r1, #8]
 8005d82:	690b      	ldr	r3, [r1, #16]
 8005d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bfb8      	it	lt
 8005d8c:	4613      	movlt	r3, r2
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d94:	4607      	mov	r7, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	b10a      	cbz	r2, 8005d9e <_printf_common+0x26>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	6033      	str	r3, [r6, #0]
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	0699      	lsls	r1, r3, #26
 8005da2:	bf42      	ittt	mi
 8005da4:	6833      	ldrmi	r3, [r6, #0]
 8005da6:	3302      	addmi	r3, #2
 8005da8:	6033      	strmi	r3, [r6, #0]
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	f015 0506 	ands.w	r5, r5, #6
 8005db0:	d106      	bne.n	8005dc0 <_printf_common+0x48>
 8005db2:	f104 0a19 	add.w	sl, r4, #25
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	6832      	ldr	r2, [r6, #0]
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dc26      	bgt.n	8005e0e <_printf_common+0x96>
 8005dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dc4:	1e13      	subs	r3, r2, #0
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	bf18      	it	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	0692      	lsls	r2, r2, #26
 8005dce:	d42b      	bmi.n	8005e28 <_printf_common+0xb0>
 8005dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d01e      	beq.n	8005e1c <_printf_common+0xa4>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	bf02      	ittt	eq
 8005dea:	68e5      	ldreq	r5, [r4, #12]
 8005dec:	6833      	ldreq	r3, [r6, #0]
 8005dee:	1aed      	subeq	r5, r5, r3
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	bf0c      	ite	eq
 8005df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df8:	2500      	movne	r5, #0
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bfc4      	itt	gt
 8005dfe:	1a9b      	subgt	r3, r3, r2
 8005e00:	18ed      	addgt	r5, r5, r3
 8005e02:	2600      	movs	r6, #0
 8005e04:	341a      	adds	r4, #26
 8005e06:	42b5      	cmp	r5, r6
 8005e08:	d11a      	bne.n	8005e40 <_printf_common+0xc8>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e008      	b.n	8005e20 <_printf_common+0xa8>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4652      	mov	r2, sl
 8005e12:	4649      	mov	r1, r9
 8005e14:	4638      	mov	r0, r7
 8005e16:	47c0      	blx	r8
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d103      	bne.n	8005e24 <_printf_common+0xac>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7c6      	b.n	8005db6 <_printf_common+0x3e>
 8005e28:	18e1      	adds	r1, r4, r3
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	2030      	movs	r0, #48	; 0x30
 8005e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e32:	4422      	add	r2, r4
 8005e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	e7c7      	b.n	8005dd0 <_printf_common+0x58>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4622      	mov	r2, r4
 8005e44:	4649      	mov	r1, r9
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c0      	blx	r8
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0e6      	beq.n	8005e1c <_printf_common+0xa4>
 8005e4e:	3601      	adds	r6, #1
 8005e50:	e7d9      	b.n	8005e06 <_printf_common+0x8e>
	...

08005e54 <_printf_i>:
 8005e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	7e0f      	ldrb	r7, [r1, #24]
 8005e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e5c:	2f78      	cmp	r7, #120	; 0x78
 8005e5e:	4691      	mov	r9, r2
 8005e60:	4680      	mov	r8, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	469a      	mov	sl, r3
 8005e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e6a:	d807      	bhi.n	8005e7c <_printf_i+0x28>
 8005e6c:	2f62      	cmp	r7, #98	; 0x62
 8005e6e:	d80a      	bhi.n	8005e86 <_printf_i+0x32>
 8005e70:	2f00      	cmp	r7, #0
 8005e72:	f000 80d4 	beq.w	800601e <_printf_i+0x1ca>
 8005e76:	2f58      	cmp	r7, #88	; 0x58
 8005e78:	f000 80c0 	beq.w	8005ffc <_printf_i+0x1a8>
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e84:	e03a      	b.n	8005efc <_printf_i+0xa8>
 8005e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e8a:	2b15      	cmp	r3, #21
 8005e8c:	d8f6      	bhi.n	8005e7c <_printf_i+0x28>
 8005e8e:	a101      	add	r1, pc, #4	; (adr r1, 8005e94 <_printf_i+0x40>)
 8005e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	08005f01 	.word	0x08005f01
 8005e9c:	08005e7d 	.word	0x08005e7d
 8005ea0:	08005e7d 	.word	0x08005e7d
 8005ea4:	08005e7d 	.word	0x08005e7d
 8005ea8:	08005e7d 	.word	0x08005e7d
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005e7d 	.word	0x08005e7d
 8005eb4:	08005e7d 	.word	0x08005e7d
 8005eb8:	08005e7d 	.word	0x08005e7d
 8005ebc:	08005e7d 	.word	0x08005e7d
 8005ec0:	08006005 	.word	0x08006005
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005fbf 	.word	0x08005fbf
 8005ecc:	08005e7d 	.word	0x08005e7d
 8005ed0:	08005e7d 	.word	0x08005e7d
 8005ed4:	08006027 	.word	0x08006027
 8005ed8:	08005e7d 	.word	0x08005e7d
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005e7d 	.word	0x08005e7d
 8005ee4:	08005e7d 	.word	0x08005e7d
 8005ee8:	08005fc7 	.word	0x08005fc7
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	602a      	str	r2, [r5, #0]
 8005ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005efc:	2301      	movs	r3, #1
 8005efe:	e09f      	b.n	8006040 <_printf_i+0x1ec>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	682b      	ldr	r3, [r5, #0]
 8005f04:	0607      	lsls	r7, r0, #24
 8005f06:	f103 0104 	add.w	r1, r3, #4
 8005f0a:	6029      	str	r1, [r5, #0]
 8005f0c:	d501      	bpl.n	8005f12 <_printf_i+0xbe>
 8005f0e:	681e      	ldr	r6, [r3, #0]
 8005f10:	e003      	b.n	8005f1a <_printf_i+0xc6>
 8005f12:	0646      	lsls	r6, r0, #25
 8005f14:	d5fb      	bpl.n	8005f0e <_printf_i+0xba>
 8005f16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	da03      	bge.n	8005f26 <_printf_i+0xd2>
 8005f1e:	232d      	movs	r3, #45	; 0x2d
 8005f20:	4276      	negs	r6, r6
 8005f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f26:	485a      	ldr	r0, [pc, #360]	; (8006090 <_printf_i+0x23c>)
 8005f28:	230a      	movs	r3, #10
 8005f2a:	e012      	b.n	8005f52 <_printf_i+0xfe>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	6029      	str	r1, [r5, #0]
 8005f34:	0605      	lsls	r5, r0, #24
 8005f36:	d501      	bpl.n	8005f3c <_printf_i+0xe8>
 8005f38:	681e      	ldr	r6, [r3, #0]
 8005f3a:	e002      	b.n	8005f42 <_printf_i+0xee>
 8005f3c:	0641      	lsls	r1, r0, #25
 8005f3e:	d5fb      	bpl.n	8005f38 <_printf_i+0xe4>
 8005f40:	881e      	ldrh	r6, [r3, #0]
 8005f42:	4853      	ldr	r0, [pc, #332]	; (8006090 <_printf_i+0x23c>)
 8005f44:	2f6f      	cmp	r7, #111	; 0x6f
 8005f46:	bf0c      	ite	eq
 8005f48:	2308      	moveq	r3, #8
 8005f4a:	230a      	movne	r3, #10
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f52:	6865      	ldr	r5, [r4, #4]
 8005f54:	60a5      	str	r5, [r4, #8]
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	bfa2      	ittt	ge
 8005f5a:	6821      	ldrge	r1, [r4, #0]
 8005f5c:	f021 0104 	bicge.w	r1, r1, #4
 8005f60:	6021      	strge	r1, [r4, #0]
 8005f62:	b90e      	cbnz	r6, 8005f68 <_printf_i+0x114>
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	d04b      	beq.n	8006000 <_printf_i+0x1ac>
 8005f68:	4615      	mov	r5, r2
 8005f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f72:	5dc7      	ldrb	r7, [r0, r7]
 8005f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f78:	4637      	mov	r7, r6
 8005f7a:	42bb      	cmp	r3, r7
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	d9f4      	bls.n	8005f6a <_printf_i+0x116>
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10b      	bne.n	8005f9c <_printf_i+0x148>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	07de      	lsls	r6, r3, #31
 8005f88:	d508      	bpl.n	8005f9c <_printf_i+0x148>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6861      	ldr	r1, [r4, #4]
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	bfde      	ittt	le
 8005f92:	2330      	movle	r3, #48	; 0x30
 8005f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f9c:	1b52      	subs	r2, r2, r5
 8005f9e:	6122      	str	r2, [r4, #16]
 8005fa0:	f8cd a000 	str.w	sl, [sp]
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	aa03      	add	r2, sp, #12
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff fee4 	bl	8005d78 <_printf_common>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d14a      	bne.n	800604a <_printf_i+0x1f6>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb8:	b004      	add	sp, #16
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f043 0320 	orr.w	r3, r3, #32
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	4833      	ldr	r0, [pc, #204]	; (8006094 <_printf_i+0x240>)
 8005fc8:	2778      	movs	r7, #120	; 0x78
 8005fca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	6829      	ldr	r1, [r5, #0]
 8005fd2:	061f      	lsls	r7, r3, #24
 8005fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fd8:	d402      	bmi.n	8005fe0 <_printf_i+0x18c>
 8005fda:	065f      	lsls	r7, r3, #25
 8005fdc:	bf48      	it	mi
 8005fde:	b2b6      	uxthmi	r6, r6
 8005fe0:	07df      	lsls	r7, r3, #31
 8005fe2:	bf48      	it	mi
 8005fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe8:	6029      	str	r1, [r5, #0]
 8005fea:	bf48      	it	mi
 8005fec:	6023      	strmi	r3, [r4, #0]
 8005fee:	b91e      	cbnz	r6, 8005ff8 <_printf_i+0x1a4>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	e7a7      	b.n	8005f4c <_printf_i+0xf8>
 8005ffc:	4824      	ldr	r0, [pc, #144]	; (8006090 <_printf_i+0x23c>)
 8005ffe:	e7e4      	b.n	8005fca <_printf_i+0x176>
 8006000:	4615      	mov	r5, r2
 8006002:	e7bd      	b.n	8005f80 <_printf_i+0x12c>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6826      	ldr	r6, [r4, #0]
 8006008:	6961      	ldr	r1, [r4, #20]
 800600a:	1d18      	adds	r0, r3, #4
 800600c:	6028      	str	r0, [r5, #0]
 800600e:	0635      	lsls	r5, r6, #24
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	d501      	bpl.n	8006018 <_printf_i+0x1c4>
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0x1ca>
 8006018:	0670      	lsls	r0, r6, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0x1c0>
 800601c:	8019      	strh	r1, [r3, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	4615      	mov	r5, r2
 8006024:	e7bc      	b.n	8005fa0 <_printf_i+0x14c>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	4628      	mov	r0, r5
 8006034:	f7fa f8e4 	bl	8000200 <memchr>
 8006038:	b108      	cbz	r0, 800603e <_printf_i+0x1ea>
 800603a:	1b40      	subs	r0, r0, r5
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006048:	e7aa      	b.n	8005fa0 <_printf_i+0x14c>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	462a      	mov	r2, r5
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d0ad      	beq.n	8005fb4 <_printf_i+0x160>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	d413      	bmi.n	8006086 <_printf_i+0x232>
 800605e:	68e0      	ldr	r0, [r4, #12]
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	4298      	cmp	r0, r3
 8006064:	bfb8      	it	lt
 8006066:	4618      	movlt	r0, r3
 8006068:	e7a6      	b.n	8005fb8 <_printf_i+0x164>
 800606a:	2301      	movs	r3, #1
 800606c:	4632      	mov	r2, r6
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d09d      	beq.n	8005fb4 <_printf_i+0x160>
 8006078:	3501      	adds	r5, #1
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	9903      	ldr	r1, [sp, #12]
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	42ab      	cmp	r3, r5
 8006082:	dcf2      	bgt.n	800606a <_printf_i+0x216>
 8006084:	e7eb      	b.n	800605e <_printf_i+0x20a>
 8006086:	2500      	movs	r5, #0
 8006088:	f104 0619 	add.w	r6, r4, #25
 800608c:	e7f5      	b.n	800607a <_printf_i+0x226>
 800608e:	bf00      	nop
 8006090:	08006429 	.word	0x08006429
 8006094:	0800643a 	.word	0x0800643a

08006098 <__sflush_r>:
 8006098:	898a      	ldrh	r2, [r1, #12]
 800609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	4605      	mov	r5, r0
 80060a0:	0710      	lsls	r0, r2, #28
 80060a2:	460c      	mov	r4, r1
 80060a4:	d458      	bmi.n	8006158 <__sflush_r+0xc0>
 80060a6:	684b      	ldr	r3, [r1, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dc05      	bgt.n	80060b8 <__sflush_r+0x20>
 80060ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dc02      	bgt.n	80060b8 <__sflush_r+0x20>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d0f9      	beq.n	80060b2 <__sflush_r+0x1a>
 80060be:	2300      	movs	r3, #0
 80060c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060c4:	682f      	ldr	r7, [r5, #0]
 80060c6:	6a21      	ldr	r1, [r4, #32]
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	d032      	beq.n	8006132 <__sflush_r+0x9a>
 80060cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	075a      	lsls	r2, r3, #29
 80060d2:	d505      	bpl.n	80060e0 <__sflush_r+0x48>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	1ac0      	subs	r0, r0, r3
 80060d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060da:	b10b      	cbz	r3, 80060e0 <__sflush_r+0x48>
 80060dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060de:	1ac0      	subs	r0, r0, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060e6:	6a21      	ldr	r1, [r4, #32]
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b0      	blx	r6
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	d106      	bne.n	8006100 <__sflush_r+0x68>
 80060f2:	6829      	ldr	r1, [r5, #0]
 80060f4:	291d      	cmp	r1, #29
 80060f6:	d82b      	bhi.n	8006150 <__sflush_r+0xb8>
 80060f8:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <__sflush_r+0x108>)
 80060fa:	410a      	asrs	r2, r1
 80060fc:	07d6      	lsls	r6, r2, #31
 80060fe:	d427      	bmi.n	8006150 <__sflush_r+0xb8>
 8006100:	2200      	movs	r2, #0
 8006102:	6062      	str	r2, [r4, #4]
 8006104:	04d9      	lsls	r1, r3, #19
 8006106:	6922      	ldr	r2, [r4, #16]
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	d504      	bpl.n	8006116 <__sflush_r+0x7e>
 800610c:	1c42      	adds	r2, r0, #1
 800610e:	d101      	bne.n	8006114 <__sflush_r+0x7c>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b903      	cbnz	r3, 8006116 <__sflush_r+0x7e>
 8006114:	6560      	str	r0, [r4, #84]	; 0x54
 8006116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006118:	602f      	str	r7, [r5, #0]
 800611a:	2900      	cmp	r1, #0
 800611c:	d0c9      	beq.n	80060b2 <__sflush_r+0x1a>
 800611e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006122:	4299      	cmp	r1, r3
 8006124:	d002      	beq.n	800612c <__sflush_r+0x94>
 8006126:	4628      	mov	r0, r5
 8006128:	f7ff fbd6 	bl	80058d8 <_free_r>
 800612c:	2000      	movs	r0, #0
 800612e:	6360      	str	r0, [r4, #52]	; 0x34
 8006130:	e7c0      	b.n	80060b4 <__sflush_r+0x1c>
 8006132:	2301      	movs	r3, #1
 8006134:	4628      	mov	r0, r5
 8006136:	47b0      	blx	r6
 8006138:	1c41      	adds	r1, r0, #1
 800613a:	d1c8      	bne.n	80060ce <__sflush_r+0x36>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0c5      	beq.n	80060ce <__sflush_r+0x36>
 8006142:	2b1d      	cmp	r3, #29
 8006144:	d001      	beq.n	800614a <__sflush_r+0xb2>
 8006146:	2b16      	cmp	r3, #22
 8006148:	d101      	bne.n	800614e <__sflush_r+0xb6>
 800614a:	602f      	str	r7, [r5, #0]
 800614c:	e7b1      	b.n	80060b2 <__sflush_r+0x1a>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	e7ad      	b.n	80060b4 <__sflush_r+0x1c>
 8006158:	690f      	ldr	r7, [r1, #16]
 800615a:	2f00      	cmp	r7, #0
 800615c:	d0a9      	beq.n	80060b2 <__sflush_r+0x1a>
 800615e:	0793      	lsls	r3, r2, #30
 8006160:	680e      	ldr	r6, [r1, #0]
 8006162:	bf08      	it	eq
 8006164:	694b      	ldreq	r3, [r1, #20]
 8006166:	600f      	str	r7, [r1, #0]
 8006168:	bf18      	it	ne
 800616a:	2300      	movne	r3, #0
 800616c:	eba6 0807 	sub.w	r8, r6, r7
 8006170:	608b      	str	r3, [r1, #8]
 8006172:	f1b8 0f00 	cmp.w	r8, #0
 8006176:	dd9c      	ble.n	80060b2 <__sflush_r+0x1a>
 8006178:	6a21      	ldr	r1, [r4, #32]
 800617a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800617c:	4643      	mov	r3, r8
 800617e:	463a      	mov	r2, r7
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	2800      	cmp	r0, #0
 8006186:	dc06      	bgt.n	8006196 <__sflush_r+0xfe>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006194:	e78e      	b.n	80060b4 <__sflush_r+0x1c>
 8006196:	4407      	add	r7, r0
 8006198:	eba8 0800 	sub.w	r8, r8, r0
 800619c:	e7e9      	b.n	8006172 <__sflush_r+0xda>
 800619e:	bf00      	nop
 80061a0:	dfbffffe 	.word	0xdfbffffe

080061a4 <_fflush_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	690b      	ldr	r3, [r1, #16]
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	b913      	cbnz	r3, 80061b4 <_fflush_r+0x10>
 80061ae:	2500      	movs	r5, #0
 80061b0:	4628      	mov	r0, r5
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	b118      	cbz	r0, 80061be <_fflush_r+0x1a>
 80061b6:	6a03      	ldr	r3, [r0, #32]
 80061b8:	b90b      	cbnz	r3, 80061be <_fflush_r+0x1a>
 80061ba:	f7ff f987 	bl	80054cc <__sinit>
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f3      	beq.n	80061ae <_fflush_r+0xa>
 80061c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c8:	07d0      	lsls	r0, r2, #31
 80061ca:	d404      	bmi.n	80061d6 <_fflush_r+0x32>
 80061cc:	0599      	lsls	r1, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_fflush_r+0x32>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f7ff fb7e 	bl	80058d2 <__retarget_lock_acquire_recursive>
 80061d6:	4628      	mov	r0, r5
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff5d 	bl	8006098 <__sflush_r>
 80061de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e0:	07da      	lsls	r2, r3, #31
 80061e2:	4605      	mov	r5, r0
 80061e4:	d4e4      	bmi.n	80061b0 <_fflush_r+0xc>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	059b      	lsls	r3, r3, #22
 80061ea:	d4e1      	bmi.n	80061b0 <_fflush_r+0xc>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f7ff fb71 	bl	80058d4 <__retarget_lock_release_recursive>
 80061f2:	e7dd      	b.n	80061b0 <_fflush_r+0xc>

080061f4 <__swhatbuf_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460c      	mov	r4, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	2900      	cmp	r1, #0
 80061fe:	b096      	sub	sp, #88	; 0x58
 8006200:	4615      	mov	r5, r2
 8006202:	461e      	mov	r6, r3
 8006204:	da0d      	bge.n	8006222 <__swhatbuf_r+0x2e>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	f013 0f80 	tst.w	r3, #128	; 0x80
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	bf0c      	ite	eq
 8006212:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006216:	2340      	movne	r3, #64	; 0x40
 8006218:	2000      	movs	r0, #0
 800621a:	6031      	str	r1, [r6, #0]
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	b016      	add	sp, #88	; 0x58
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	466a      	mov	r2, sp
 8006224:	f000 f862 	bl	80062ec <_fstat_r>
 8006228:	2800      	cmp	r0, #0
 800622a:	dbec      	blt.n	8006206 <__swhatbuf_r+0x12>
 800622c:	9901      	ldr	r1, [sp, #4]
 800622e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006232:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006236:	4259      	negs	r1, r3
 8006238:	4159      	adcs	r1, r3
 800623a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800623e:	e7eb      	b.n	8006218 <__swhatbuf_r+0x24>

08006240 <__smakebuf_r>:
 8006240:	898b      	ldrh	r3, [r1, #12]
 8006242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006244:	079d      	lsls	r5, r3, #30
 8006246:	4606      	mov	r6, r0
 8006248:	460c      	mov	r4, r1
 800624a:	d507      	bpl.n	800625c <__smakebuf_r+0x1c>
 800624c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	2301      	movs	r3, #1
 8006256:	6163      	str	r3, [r4, #20]
 8006258:	b002      	add	sp, #8
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	ab01      	add	r3, sp, #4
 800625e:	466a      	mov	r2, sp
 8006260:	f7ff ffc8 	bl	80061f4 <__swhatbuf_r>
 8006264:	9900      	ldr	r1, [sp, #0]
 8006266:	4605      	mov	r5, r0
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff fba1 	bl	80059b0 <_malloc_r>
 800626e:	b948      	cbnz	r0, 8006284 <__smakebuf_r+0x44>
 8006270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d4ef      	bmi.n	8006258 <__smakebuf_r+0x18>
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	e7e3      	b.n	800624c <__smakebuf_r+0xc>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	6120      	str	r0, [r4, #16]
 8006296:	b15b      	cbz	r3, 80062b0 <__smakebuf_r+0x70>
 8006298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629c:	4630      	mov	r0, r6
 800629e:	f000 f837 	bl	8006310 <_isatty_r>
 80062a2:	b128      	cbz	r0, 80062b0 <__smakebuf_r+0x70>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	431d      	orrs	r5, r3
 80062b4:	81a5      	strh	r5, [r4, #12]
 80062b6:	e7cf      	b.n	8006258 <__smakebuf_r+0x18>

080062b8 <memmove>:
 80062b8:	4288      	cmp	r0, r1
 80062ba:	b510      	push	{r4, lr}
 80062bc:	eb01 0402 	add.w	r4, r1, r2
 80062c0:	d902      	bls.n	80062c8 <memmove+0x10>
 80062c2:	4284      	cmp	r4, r0
 80062c4:	4623      	mov	r3, r4
 80062c6:	d807      	bhi.n	80062d8 <memmove+0x20>
 80062c8:	1e43      	subs	r3, r0, #1
 80062ca:	42a1      	cmp	r1, r4
 80062cc:	d008      	beq.n	80062e0 <memmove+0x28>
 80062ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062d6:	e7f8      	b.n	80062ca <memmove+0x12>
 80062d8:	4402      	add	r2, r0
 80062da:	4601      	mov	r1, r0
 80062dc:	428a      	cmp	r2, r1
 80062de:	d100      	bne.n	80062e2 <memmove+0x2a>
 80062e0:	bd10      	pop	{r4, pc}
 80062e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ea:	e7f7      	b.n	80062dc <memmove+0x24>

080062ec <_fstat_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	; (800630c <_fstat_r+0x20>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	f7fb feaa 	bl	8002052 <_fstat>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d102      	bne.n	8006308 <_fstat_r+0x1c>
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	b103      	cbz	r3, 8006308 <_fstat_r+0x1c>
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	bd38      	pop	{r3, r4, r5, pc}
 800630a:	bf00      	nop
 800630c:	200009ec 	.word	0x200009ec

08006310 <_isatty_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d06      	ldr	r5, [pc, #24]	; (800632c <_isatty_r+0x1c>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fb fea9 	bl	8002072 <_isatty>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_isatty_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_isatty_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	200009ec 	.word	0x200009ec

08006330 <_sbrk_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d06      	ldr	r5, [pc, #24]	; (800634c <_sbrk_r+0x1c>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f7fb feb2 	bl	80020a4 <_sbrk>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_sbrk_r+0x1a>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_sbrk_r+0x1a>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	200009ec 	.word	0x200009ec

08006350 <memcpy>:
 8006350:	440a      	add	r2, r1
 8006352:	4291      	cmp	r1, r2
 8006354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006358:	d100      	bne.n	800635c <memcpy+0xc>
 800635a:	4770      	bx	lr
 800635c:	b510      	push	{r4, lr}
 800635e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006366:	4291      	cmp	r1, r2
 8006368:	d1f9      	bne.n	800635e <memcpy+0xe>
 800636a:	bd10      	pop	{r4, pc}

0800636c <_realloc_r>:
 800636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006370:	4680      	mov	r8, r0
 8006372:	4614      	mov	r4, r2
 8006374:	460e      	mov	r6, r1
 8006376:	b921      	cbnz	r1, 8006382 <_realloc_r+0x16>
 8006378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800637c:	4611      	mov	r1, r2
 800637e:	f7ff bb17 	b.w	80059b0 <_malloc_r>
 8006382:	b92a      	cbnz	r2, 8006390 <_realloc_r+0x24>
 8006384:	f7ff faa8 	bl	80058d8 <_free_r>
 8006388:	4625      	mov	r5, r4
 800638a:	4628      	mov	r0, r5
 800638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006390:	f000 f81b 	bl	80063ca <_malloc_usable_size_r>
 8006394:	4284      	cmp	r4, r0
 8006396:	4607      	mov	r7, r0
 8006398:	d802      	bhi.n	80063a0 <_realloc_r+0x34>
 800639a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800639e:	d812      	bhi.n	80063c6 <_realloc_r+0x5a>
 80063a0:	4621      	mov	r1, r4
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fb04 	bl	80059b0 <_malloc_r>
 80063a8:	4605      	mov	r5, r0
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d0ed      	beq.n	800638a <_realloc_r+0x1e>
 80063ae:	42bc      	cmp	r4, r7
 80063b0:	4622      	mov	r2, r4
 80063b2:	4631      	mov	r1, r6
 80063b4:	bf28      	it	cs
 80063b6:	463a      	movcs	r2, r7
 80063b8:	f7ff ffca 	bl	8006350 <memcpy>
 80063bc:	4631      	mov	r1, r6
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff fa8a 	bl	80058d8 <_free_r>
 80063c4:	e7e1      	b.n	800638a <_realloc_r+0x1e>
 80063c6:	4635      	mov	r5, r6
 80063c8:	e7df      	b.n	800638a <_realloc_r+0x1e>

080063ca <_malloc_usable_size_r>:
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	1f18      	subs	r0, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bfbc      	itt	lt
 80063d4:	580b      	ldrlt	r3, [r1, r0]
 80063d6:	18c0      	addlt	r0, r0, r3
 80063d8:	4770      	bx	lr
	...

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
