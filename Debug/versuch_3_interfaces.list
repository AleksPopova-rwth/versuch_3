
versuch_3_interfaces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005564  08005564  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800556c  0800556c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005574  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000009cc  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a28  20000a28  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130d2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b7  00000000  00000000  0001a15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  0001c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c33  00000000  00000000  0001d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026282  00000000  00000000  0001e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c34  00000000  00000000  0004456d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8fb3  00000000  00000000  000581a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141154  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004854  00000000  00000000  00141198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001459ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080054f4 	.word	0x080054f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080054f4 	.word	0x080054f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
 800058c:	4613      	mov	r3, r2
 800058e:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e010      	b.n	80005b8 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6858      	ldr	r0, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	23c8      	movs	r3, #200	@ 0xc8
 80005a2:	2201      	movs	r2, #1
 80005a4:	f002 fb5c 	bl	8002c60 <HAL_I2C_IsDeviceReady>
 80005a8:	4603      	mov	r3, r0
 80005aa:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d006      	beq.n	80005c0 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3301      	adds	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	ddeb      	ble.n	8000596 <_LCD_SendInternal+0x16>
 80005be:	e000      	b.n	80005c2 <_LCD_SendInternal+0x42>
            break;
 80005c0:	bf00      	nop
    }
    if(res!=HAL_OK) {
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <_LCD_SendInternal+0x4c>
    	return res;
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	e04b      	b.n	8000664 <_LCD_SendInternal+0xe4>
    }


    uint8_t up = data & 0xF0;
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	f023 030f 	bic.w	r3, r3, #15
 80005d2:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	011b      	lsls	r3, r3, #4
 80005d8:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7a1b      	ldrb	r3, [r3, #8]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <_LCD_SendInternal+0x66>
 80005e2:	2308      	movs	r3, #8
 80005e4:	e000      	b.n	80005e8 <_LCD_SendInternal+0x68>
 80005e6:	2300      	movs	r3, #0
 80005e8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 80005ea:	7bfa      	ldrb	r2, [r7, #15]
 80005ec:	78bb      	ldrb	r3, [r7, #2]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	7b7b      	ldrb	r3, [r7, #13]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8000600:	7bfa      	ldrb	r2, [r7, #15]
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	4313      	orrs	r3, r2
 8000606:	b2da      	uxtb	r2, r3
 8000608:	7b7b      	ldrb	r3, [r7, #13]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8000610:	7bba      	ldrb	r2, [r7, #14]
 8000612:	78bb      	ldrb	r3, [r7, #2]
 8000614:	4313      	orrs	r3, r2
 8000616:	b2da      	uxtb	r2, r3
 8000618:	7b7b      	ldrb	r3, [r7, #13]
 800061a:	4313      	orrs	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	4313      	orrs	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	4313      	orrs	r3, r2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr),LCD_I2C_TIMEOUT);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6858      	ldr	r0, [r3, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	23c8      	movs	r3, #200	@ 0xc8
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2304      	movs	r3, #4
 800064a:	f002 fa0b 	bl	8002a64 <HAL_I2C_Master_Transmit>
 800064e:	4603      	mov	r3, r0
 8000650:	75fb      	strb	r3, [r7, #23]
    if ( res != HAL_OK) {
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <_LCD_SendInternal+0xdc>
    	return res;
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	e003      	b.n	8000664 <_LCD_SendInternal+0xe4>
    }

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 800065c:	2005      	movs	r0, #5
 800065e:	f000 fec1 	bl	80013e4 <HAL_Delay>
    return res;
 8000662:	7dfb      	ldrb	r3, [r7, #23]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ff7e 	bl	8000580 <_LCD_SendInternal>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff6d 	bl	8000580 <_LCD_SendInternal>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 80006ba:	e00f      	b.n	80006dc <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffe3 	bl	800068e <_LCD_SendData>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <LCD_Print+0x26>
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	e007      	b.n	80006e6 <LCD_Print+0x36>
        str++;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
    while(*str) {
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1eb      	bne.n	80006bc <LCD_Print+0xc>
    }
    return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 80006fc:	2130      	movs	r1, #48	@ 0x30
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff ffb4 	bl	800066c <_LCD_SendCommand>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <LCD_Begin+0x24>
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	e01c      	b.n	800074c <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 8000712:	2102      	movs	r1, #2
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ffa9 	bl	800066c <_LCD_SendCommand>
 800071a:	4603      	mov	r3, r0
 800071c:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <LCD_Begin+0x3a>
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	e011      	b.n	800074c <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8000728:	210c      	movs	r1, #12
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff9e 	bl	800066c <_LCD_SendCommand>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <LCD_Begin+0x50>
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	e006      	b.n	800074c <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 800073e:	2101      	movs	r1, #1
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff93 	bl	800066c <_LCD_SendCommand>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
    return status;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d802      	bhi.n	8000770 <LCD_SetCursor+0x1c>
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d901      	bls.n	8000774 <LCD_SetCursor+0x20>
		return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	e010      	b.n	8000796 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <LCD_SetCursor+0x2a>
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	e000      	b.n	8000780 <LCD_SetCursor+0x2c>
 800077e:	23c0      	movs	r3, #192	@ 0xc0
 8000780:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	78bb      	ldrb	r3, [r7, #2]
 8000786:	4413      	add	r3, r2
 8000788:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff6c 	bl	800066c <_LCD_SendCommand>
 8000794:	4603      	mov	r3, r0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <LCD_Printf>:

HAL_StatusTypeDef LCD_Printf(LCD_HandleTypeDef *dev, const char *format, ...) {
 800079e:	b40e      	push	{r1, r2, r3}
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b089      	sub	sp, #36	@ 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	char lcd_buffer[COLUMNS + 1];
	va_list args;
	va_start(args, format);
 80007a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007ac:	60bb      	str	r3, [r7, #8]
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
 80007ae:	f107 000c 	add.w	r0, r7, #12
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007b6:	2111      	movs	r1, #17
 80007b8:	f004 fa0e 	bl	8004bd8 <vsniprintf>
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff74 	bl	80006b0 <LCD_Print>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	@ 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d4:	b003      	add	sp, #12
 80007d6:	4770      	bx	lr

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fd8f 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f86b 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e6:	f000 fa0b 	bl	8000c00 <MX_GPIO_Init>
  MX_ETH_Init();
 80007ea:	f000 f923 	bl	8000a34 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ee:	f000 f9af 	bl	8000b50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f2:	f000 f9d7 	bl	8000ba4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80007f6:	f000 f8cb 	bl	8000990 <MX_ADC1_Init>
  MX_I2C2_Init();
 80007fa:	f000 f969 	bl	8000ad0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  LCD_HandleTypeDef lcd;
  lcd.i2c = &hi2c2;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <main+0xc8>)
 8000800:	63bb      	str	r3, [r7, #56]	@ 0x38
  lcd.i2c_addr = LCD_DEFAULT_ADDR;
 8000802:	234e      	movs	r3, #78	@ 0x4e
 8000804:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  lcd.backlight_enable = true;
 8000808:	2301      	movs	r3, #1
 800080a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef status = LCD_Begin(&lcd);
 800080e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff6b 	bl	80006ee <LCD_Begin>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800081e:	4821      	ldr	r0, [pc, #132]	@ (80008a4 <main+0xcc>)
 8000820:	f000 fe48 	bl	80014b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <main+0xcc>)
 800082a:	f000 ff15 	bl	8001658 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 800082e:	481d      	ldr	r0, [pc, #116]	@ (80008a4 <main+0xcc>)
 8000830:	f000 ff9d 	bl	800176e <HAL_ADC_GetValue>
 8000834:	4603      	mov	r3, r0
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <main+0xd0>)
 800083a:	801a      	strh	r2, [r3, #0]
	  sprintf(msg,"%hu\r\n",raw);
 800083c:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <main+0xd0>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	491a      	ldr	r1, [pc, #104]	@ (80008ac <main+0xd4>)
 8000844:	481a      	ldr	r0, [pc, #104]	@ (80008b0 <main+0xd8>)
 8000846:	f004 f97b 	bl	8004b40 <siprintf>
	  //HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg),HAL_MAX_DELAY);
	  if( raw > 2048){
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <main+0xd0>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000852:	d905      	bls.n	8000860 <main+0x88>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <main+0xdc>)
 800085a:	f001 ffa5 	bl	80027a8 <HAL_GPIO_WritePin>
 800085e:	e004      	b.n	800086a <main+0x92>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2101      	movs	r1, #1
 8000864:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <main+0xdc>)
 8000866:	f001 ff9f 	bl	80027a8 <HAL_GPIO_WritePin>
	  }
	  char lcdBuf[50];
	  sprintf(lcdBuf,"%d", raw);
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <main+0xd0>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	463b      	mov	r3, r7
 8000872:	4911      	ldr	r1, [pc, #68]	@ (80008b8 <main+0xe0>)
 8000874:	4618      	mov	r0, r3
 8000876:	f004 f963 	bl	8004b40 <siprintf>
	  LCD_SetCursor(&lcd, 0,0);
 800087a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff66 	bl	8000754 <LCD_SetCursor>
	  LCD_Printf(&lcd, msg);
 8000888:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800088c:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <main+0xd8>)
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff85 	bl	800079e <LCD_Printf>
	  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000898:	f000 fda4 	bl	80013e4 <HAL_Delay>
  {
 800089c:	e7bf      	b.n	800081e <main+0x46>
 800089e:	bf00      	nop
 80008a0:	20000350 	.word	0x20000350
 80008a4:	20000258 	.word	0x20000258
 80008a8:	20000078 	.word	0x20000078
 80008ac:	0800550c 	.word	0x0800550c
 80008b0:	2000007c 	.word	0x2000007c
 80008b4:	40020400 	.word	0x40020400
 80008b8:	08005514 	.word	0x08005514

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	@ 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 f992 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <SystemClock_Config+0xd0>)
 8000906:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800091c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000930:	23a8      	movs	r3, #168	@ 0xa8
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000938:	2307      	movs	r3, #7
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fea1 	bl	8003688 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800094c:	f000 fa14 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2105      	movs	r1, #5
 800096e:	4618      	mov	r0, r3
 8000970:	f003 f902 	bl	8003b78 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800097a:	f000 f9fd 	bl	8000d78 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_ADC1_Init+0xa0>)
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009f2:	f000 fd1b 	bl	800142c <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 f9bc 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_ADC1_Init+0x98>)
 8000a12:	f000 feb9 	bl	8001788 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 f9ac 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000258 	.word	0x20000258
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a3a:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <MX_ETH_Init+0x88>)
 8000a3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a4c:	22e1      	movs	r2, #225	@ 0xe1
 8000a4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <MX_ETH_Init+0x90>)
 8000a74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a78:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <MX_ETH_Init+0x94>)
 8000a7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a7e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a86:	f001 f993 	bl	8001db0 <HAL_ETH_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 f972 	bl	8000d78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a94:	2238      	movs	r2, #56	@ 0x38
 8000a96:	2100      	movs	r1, #0
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_ETH_Init+0x98>)
 8000a9a:	f004 f8ab 	bl	8004bf4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aa0:	2221      	movs	r2, #33	@ 0x21
 8000aa2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aa6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000aaa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002a0 	.word	0x200002a0
 8000abc:	40028000 	.word	0x40028000
 8000ac0:	200008d0 	.word	0x200008d0
 8000ac4:	200001b8 	.word	0x200001b8
 8000ac8:	20000118 	.word	0x20000118
 8000acc:	200000e0 	.word	0x200000e0

08000ad0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <MX_I2C2_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <MX_I2C2_Init+0x7c>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b0e:	f001 fe65 	bl	80027dc <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 f92e 	bl	8000d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b20:	f002 fc27 	bl	8003372 <HAL_I2CEx_ConfigAnalogFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b2a:	f000 f925 	bl	8000d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b32:	f002 fc5a 	bl	80033ea <HAL_I2CEx_ConfigDigitalFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b3c:	f000 f91c 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000350 	.word	0x20000350
 8000b48:	40005800 	.word	0x40005800
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_USART3_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b88:	f003 fa16 	bl	8003fb8 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 f8f1 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200003a4 	.word	0x200003a4
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be8:	f002 fc3e 	bl	8003468 <HAL_PCD_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f8c1 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200003ec 	.word	0x200003ec

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	4b53      	ldr	r3, [pc, #332]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a52      	ldr	r2, [pc, #328]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b50      	ldr	r3, [pc, #320]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	4b4c      	ldr	r3, [pc, #304]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b45      	ldr	r3, [pc, #276]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a44      	ldr	r2, [pc, #272]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b42      	ldr	r3, [pc, #264]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a3d      	ldr	r2, [pc, #244]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a36      	ldr	r2, [pc, #216]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b34      	ldr	r3, [pc, #208]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a2f      	ldr	r2, [pc, #188]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_GPIO_Init+0x168>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ce0:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <MX_GPIO_Init+0x16c>)
 8000ce2:	f001 fd61 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2140      	movs	r1, #64	@ 0x40
 8000cea:	4821      	ldr	r0, [pc, #132]	@ (8000d70 <MX_GPIO_Init+0x170>)
 8000cec:	f001 fd5c 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	481b      	ldr	r0, [pc, #108]	@ (8000d74 <MX_GPIO_Init+0x174>)
 8000d08:	f001 fba2 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <MX_GPIO_Init+0x16c>)
 8000d26:	f001 fb93 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d2a:	2340      	movs	r3, #64	@ 0x40
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <MX_GPIO_Init+0x170>)
 8000d42:	f001 fb85 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_GPIO_Init+0x170>)
 8000d5a:	f001 fb79 	bl	8002450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	@ 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40021800 	.word	0x40021800
 8000d74:	40020800 	.word	0x40020800

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <HAL_ADC_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d127      	bne.n	8000e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_ADC_MspInit+0x84>)
 8000e42:	f001 fb05 	bl	8002450 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	@ 0x38
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a55      	ldr	r2, [pc, #340]	@ (8000fd0 <HAL_ETH_MspInit+0x174>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f040 80a4 	bne.w	8000fc8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
 8000e84:	4b53      	ldr	r3, [pc, #332]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	4a52      	ldr	r2, [pc, #328]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e90:	4b50      	ldr	r3, [pc, #320]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ea6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	4b45      	ldr	r3, [pc, #276]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a44      	ldr	r2, [pc, #272]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec8:	4b42      	ldr	r3, [pc, #264]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f00:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a28      	ldr	r2, [pc, #160]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f44:	2332      	movs	r3, #50	@ 0x32
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	@ (8000fd8 <HAL_ETH_MspInit+0x17c>)
 8000f60:	f001 fa76 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f64:	2386      	movs	r3, #134	@ 0x86
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <HAL_ETH_MspInit+0x180>)
 8000f80:	f001 fa66 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f96:	230b      	movs	r3, #11
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <HAL_ETH_MspInit+0x184>)
 8000fa2:	f001 fa55 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fa6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb8:	230b      	movs	r3, #11
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <HAL_ETH_MspInit+0x188>)
 8000fc4:	f001 fa44 	bl	8002450 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	@ 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40028000 	.word	0x40028000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40021800 	.word	0x40021800

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001026:	2303      	movs	r3, #3
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001036:	2304      	movs	r3, #4
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <HAL_I2C_MspInit+0x8c>)
 8001042:	f001 fa05 	bl	8002450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005800 	.word	0x40005800
 8001070:	40023800 	.word	0x40023800
 8001074:	40021400 	.word	0x40021400

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12c      	bne.n	80010f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_UART_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e4:	2307      	movs	r3, #7
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_UART_MspInit+0x8c>)
 80010f0:	f001 f9ae 	bl	8002450 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40004800 	.word	0x40004800
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001128:	d13f      	bne.n	80011aa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001146:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001158:	230a      	movs	r3, #10
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <HAL_PCD_MspInit+0xb0>)
 8001164:	f001 f974 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <HAL_PCD_MspInit+0xb0>)
 800117e:	f001 f967 	bl	8002450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	6353      	str	r3, [r2, #52]	@ 0x34
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_PCD_MspInit+0xac>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f8c7 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 fcda 	bl	8004c04 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20030000 	.word	0x20030000
 800127c:	00000400 	.word	0x00000400
 8001280:	200008d8 	.word	0x200008d8
 8001284:	20000a28 	.word	0x20000a28

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	@ (80012ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012da:	f003 fc99 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fa7b 	bl	80007d8 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012f0:	08005574 	.word	0x08005574
  ldr r2, =_sbss
 80012f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012f8:	20000a28 	.word	0x20000a28

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <HAL_Init+0x40>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <HAL_Init+0x40>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_Init+0x40>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 fd0d 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fd26 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fd17 	bl	8001d96 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 fced 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	@ (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	200008dc 	.word	0x200008dc

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200008dc 	.word	0x200008dc

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e033      	b.n	80014aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fcc2 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001472:	f023 0302 	bic.w	r3, r3, #2
 8001476:	f043 0202 	orr.w	r2, r3, #2
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fab4 	bl	80019ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
 800149a:	e001      	b.n	80014a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Start+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0b2      	b.n	8001634 <HAL_ADC_Start+0x180>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d018      	beq.n	8001516 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014f4:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <HAL_ADC_Start+0x18c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_ADC_Start+0x190>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9a      	lsrs	r2, r3, #18
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d17a      	bne.n	800161a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800154e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800155e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001562:	d106      	bne.n	8001572 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	f023 0206 	bic.w	r2, r3, #6
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001570:	e002      	b.n	8001578 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001580:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_ADC_Start+0x194>)
 8001582:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800158c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2b00      	cmp	r3, #0
 8001598:	d12a      	bne.n	80015f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2b      	ldr	r2, [pc, #172]	@ (800164c <HAL_ADC_Start+0x198>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d015      	beq.n	80015d0 <HAL_ADC_Start+0x11c>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a29      	ldr	r2, [pc, #164]	@ (8001650 <HAL_ADC_Start+0x19c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d105      	bne.n	80015ba <HAL_ADC_Start+0x106>
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <HAL_ADC_Start+0x194>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a25      	ldr	r2, [pc, #148]	@ (8001654 <HAL_ADC_Start+0x1a0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d136      	bne.n	8001632 <HAL_ADC_Start+0x17e>
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_ADC_Start+0x194>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d130      	bne.n	8001632 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d129      	bne.n	8001632 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	e020      	b.n	8001632 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a15      	ldr	r2, [pc, #84]	@ (800164c <HAL_ADC_Start+0x198>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d11b      	bne.n	8001632 <HAL_ADC_Start+0x17e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d114      	bne.n	8001632 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00b      	b.n	8001632 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f043 0210 	orr.w	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000000 	.word	0x20000000
 8001644:	431bde83 	.word	0x431bde83
 8001648:	40012300 	.word	0x40012300
 800164c:	40012000 	.word	0x40012000
 8001650:	40012100 	.word	0x40012100
 8001654:	40012200 	.word	0x40012200

08001658 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001674:	d113      	bne.n	800169e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001684:	d10b      	bne.n	800169e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e063      	b.n	8001766 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800169e:	f7ff fe95 	bl	80013cc <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016a4:	e021      	b.n	80016ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d01d      	beq.n	80016ea <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_ADC_PollForConversion+0x6c>
 80016b4:	f7ff fe8a 	bl	80013cc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d212      	bcs.n	80016ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d00b      	beq.n	80016ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e03d      	b.n	8001766 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d1d6      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0212 	mvn.w	r2, #18
 8001700:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d123      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11f      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800173c:	2b00      	cmp	r3, #0
 800173e:	d111      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1c>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e113      	b.n	80019cc <HAL_ADC_ConfigChannel+0x244>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d925      	bls.n	8001800 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68d9      	ldr	r1, [r3, #12]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3b1e      	subs	r3, #30
 80017ca:	2207      	movs	r2, #7
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43da      	mvns	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	400a      	ands	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68d9      	ldr	r1, [r3, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4403      	add	r3, r0
 80017f2:	3b1e      	subs	r3, #30
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	e022      	b.n	8001846 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6919      	ldr	r1, [r3, #16]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	2207      	movs	r2, #7
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	400a      	ands	r2, r1
 8001822:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	4603      	mov	r3, r0
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4403      	add	r3, r0
 800183c:	409a      	lsls	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d824      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b05      	subs	r3, #5
 8001860:	221f      	movs	r2, #31
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b05      	subs	r3, #5
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
 8001896:	e04c      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b0c      	cmp	r3, #12
 800189e:	d824      	bhi.n	80018ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b23      	subs	r3, #35	@ 0x23
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43da      	mvns	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	400a      	ands	r2, r1
 80018c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b23      	subs	r3, #35	@ 0x23
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e8:	e023      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3b41      	subs	r3, #65	@ 0x41
 80018fc:	221f      	movs	r2, #31
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b41      	subs	r3, #65	@ 0x41
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001932:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_ADC_ConfigChannel+0x250>)
 8001934:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <HAL_ADC_ConfigChannel+0x254>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d10f      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1d8>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b12      	cmp	r3, #18
 8001946:	d10b      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_ADC_ConfigChannel+0x254>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12b      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x23a>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <HAL_ADC_ConfigChannel+0x258>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <HAL_ADC_ConfigChannel+0x1f4>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b11      	cmp	r3, #17
 800197a:	d122      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_ADC_ConfigChannel+0x258>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d111      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_ADC_ConfigChannel+0x25c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a11      	ldr	r2, [pc, #68]	@ (80019e8 <HAL_ADC_ConfigChannel+0x260>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9a      	lsrs	r2, r3, #18
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	40012000 	.word	0x40012000
 80019e0:	10000012 	.word	0x10000012
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83

080019ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f4:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <ADC_Init+0x1f0>)
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	021a      	lsls	r2, r3, #8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6899      	ldr	r1, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	4a58      	ldr	r2, [pc, #352]	@ (8001be0 <ADC_Init+0x1f4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e00f      	b.n	8001aea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ae8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0202 	bic.w	r2, r2, #2
 8001af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6899      	ldr	r1, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e1b      	ldrb	r3, [r3, #24]
 8001b04:	005a      	lsls	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01b      	beq.n	8001b50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6859      	ldr	r1, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	3b01      	subs	r3, #1
 8001b44:	035a      	lsls	r2, r3, #13
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	e007      	b.n	8001b60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	051a      	lsls	r2, r3, #20
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ba2:	025a      	lsls	r2, r3, #9
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6899      	ldr	r1, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	029a      	lsls	r2, r3, #10
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40012300 	.word	0x40012300
 8001be0:	0f000001 	.word	0x0f000001

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff47 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff5c 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff8e 	bl	8001c9c <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffb0 	bl	8001d04 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e08a      	b.n	8001ed8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2223      	movs	r2, #35	@ 0x23
 8001dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f841 	bl	8000e5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_ETH_Init+0x130>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee0 <HAL_ETH_Init+0x130>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <HAL_ETH_Init+0x130>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_ETH_Init+0x134>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_ETH_Init+0x134>)
 8001dfc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e00:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e02:	4b38      	ldr	r3, [pc, #224]	@ (8001ee4 <HAL_ETH_Init+0x134>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4936      	ldr	r1, [pc, #216]	@ (8001ee4 <HAL_ETH_Init+0x134>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_ETH_Init+0x134>)
 8001e12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2c:	f7ff face 	bl	80013cc <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e32:	e011      	b.n	8001e58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e34:	f7ff faca 	bl	80013cc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e42:	d909      	bls.n	8001e58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	22e0      	movs	r2, #224	@ 0xe0
 8001e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e03f      	b.n	8001ed8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e4      	bne.n	8001e34 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f97a 	bl	8002164 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fa25 	bl	80022c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa7b 	bl	8002372 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f9e3 	bl	8002250 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eae:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ec2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800

08001ee8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <ETH_SetMACConfig+0x164>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7b9b      	ldrb	r3, [r3, #14]
 8001f06:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	7c12      	ldrb	r2, [r2, #16]
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	d102      	bne.n	8001f16 <ETH_SetMACConfig+0x2e>
 8001f10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f14:	e000      	b.n	8001f18 <ETH_SetMACConfig+0x30>
 8001f16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	7c52      	ldrb	r2, [r2, #17]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetMACConfig+0x40>
 8001f22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f26:	e000      	b.n	8001f2a <ETH_SetMACConfig+0x42>
 8001f28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7fdb      	ldrb	r3, [r3, #31]
 8001f36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	7f92      	ldrb	r2, [r2, #30]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d102      	bne.n	8001f4e <ETH_SetMACConfig+0x66>
 8001f48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x68>
 8001f4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7f1b      	ldrb	r3, [r3, #28]
 8001f56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	791b      	ldrb	r3, [r3, #4]
 8001f64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f6e:	2a00      	cmp	r2, #0
 8001f70:	d102      	bne.n	8001f78 <ETH_SetMACConfig+0x90>
 8001f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f76:	e000      	b.n	8001f7a <ETH_SetMACConfig+0x92>
 8001f78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	7bdb      	ldrb	r3, [r3, #15]
 8001f80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f92:	4313      	orrs	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fa1a 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d101      	bne.n	8001fde <ETH_SetMACConfig+0xf6>
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	e000      	b.n	8001fe0 <ETH_SetMACConfig+0xf8>
 8001fde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fe0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fe6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	d101      	bne.n	8001ff6 <ETH_SetMACConfig+0x10e>
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	e000      	b.n	8001ff8 <ETH_SetMACConfig+0x110>
 8001ff6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002000:	2a01      	cmp	r2, #1
 8002002:	d101      	bne.n	8002008 <ETH_SetMACConfig+0x120>
 8002004:	2204      	movs	r2, #4
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x122>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800200a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002012:	2a01      	cmp	r2, #1
 8002014:	d101      	bne.n	800201a <ETH_SetMACConfig+0x132>
 8002016:	2202      	movs	r2, #2
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0x134>
 800201a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800201c:	4313      	orrs	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff f9d5 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	fd20810f 	.word	0xfd20810f

08002050 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4b3d      	ldr	r3, [pc, #244]	@ (8002160 <ETH_SetDMAConfig+0x110>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7b1b      	ldrb	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <ETH_SetDMAConfig+0x2c>
 8002076:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800207a:	e000      	b.n	800207e <ETH_SetDMAConfig+0x2e>
 800207c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	7b5b      	ldrb	r3, [r3, #13]
 8002082:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002084:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	7f52      	ldrb	r2, [r2, #29]
 800208a:	2a00      	cmp	r2, #0
 800208c:	d102      	bne.n	8002094 <ETH_SetDMAConfig+0x44>
 800208e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002092:	e000      	b.n	8002096 <ETH_SetDMAConfig+0x46>
 8002094:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002096:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	7b9b      	ldrb	r3, [r3, #14]
 800209c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800209e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7f1b      	ldrb	r3, [r3, #28]
 80020aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7f9b      	ldrb	r3, [r3, #30]
 80020b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020c4:	4313      	orrs	r3, r2
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff f97c 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f4:	461a      	mov	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002104:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800210a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002110:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002118:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800211a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002122:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002128:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002132:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002136:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002144:	2001      	movs	r0, #1
 8002146:	f7ff f94d 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	f8de3f23 	.word	0xf8de3f23

08002164 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0a6      	sub	sp, #152	@ 0x98
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021a6:	2300      	movs	r3, #0
 80021a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fe7f 	bl	8001ee8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002216:	2301      	movs	r3, #1
 8002218:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800221a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800221e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002220:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002224:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800222a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff05 	bl	8002050 <ETH_SetDMAConfig>
}
 8002246:	bf00      	nop
 8002248:	3798      	adds	r7, #152	@ 0x98
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3305      	adds	r3, #5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	3204      	adds	r2, #4
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <ETH_MACAddressConfig+0x68>)
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3303      	adds	r3, #3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	061a      	lsls	r2, r3, #24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3302      	adds	r3, #2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	4313      	orrs	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <ETH_MACAddressConfig+0x6c>)
 80022a2:	4413      	add	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40028040 	.word	0x40028040
 80022bc:	40028044 	.word	0x40028044

080022c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e03e      	b.n	800234c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	3206      	adds	r2, #6
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d80c      	bhi.n	8002330 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e004      	b.n	800233a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3301      	adds	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d9bd      	bls.n	80022ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002364:	611a      	str	r2, [r3, #16]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e048      	b.n	8002412 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	3212      	adds	r2, #18
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d80c      	bhi.n	8002402 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6919      	ldr	r1, [r3, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	e004      	b.n	800240c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d9b3      	bls.n	8002380 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002442:	60da      	str	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e177      	b.n	800275c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8166 	bne.w	8002756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d005      	beq.n	80024a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d130      	bne.n	8002504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 0201 	and.w	r2, r3, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d017      	beq.n	8002540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d123      	bne.n	8002594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80c0 	beq.w	8002756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	4a65      	ldr	r2, [pc, #404]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e6:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f2:	4a61      	ldr	r2, [pc, #388]	@ (8002778 <HAL_GPIO_Init+0x328>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_GPIO_Init+0x32c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d037      	beq.n	800268e <HAL_GPIO_Init+0x23e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a57      	ldr	r2, [pc, #348]	@ (8002780 <HAL_GPIO_Init+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d031      	beq.n	800268a <HAL_GPIO_Init+0x23a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a56      	ldr	r2, [pc, #344]	@ (8002784 <HAL_GPIO_Init+0x334>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02b      	beq.n	8002686 <HAL_GPIO_Init+0x236>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a55      	ldr	r2, [pc, #340]	@ (8002788 <HAL_GPIO_Init+0x338>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d025      	beq.n	8002682 <HAL_GPIO_Init+0x232>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a54      	ldr	r2, [pc, #336]	@ (800278c <HAL_GPIO_Init+0x33c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01f      	beq.n	800267e <HAL_GPIO_Init+0x22e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a53      	ldr	r2, [pc, #332]	@ (8002790 <HAL_GPIO_Init+0x340>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x22a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_GPIO_Init+0x344>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x226>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	@ (8002798 <HAL_GPIO_Init+0x348>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x222>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_GPIO_Init+0x34c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x21e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	@ (80027a0 <HAL_GPIO_Init+0x350>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x21a>
 8002666:	2309      	movs	r3, #9
 8002668:	e012      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800266a:	230a      	movs	r3, #10
 800266c:	e010      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800266e:	2308      	movs	r3, #8
 8002670:	e00e      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002672:	2307      	movs	r3, #7
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002676:	2306      	movs	r3, #6
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4935      	ldr	r1, [pc, #212]	@ (8002778 <HAL_GPIO_Init+0x328>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002702:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002726:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f ae84 	bls.w	800246c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40013800 	.word	0x40013800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40021400 	.word	0x40021400
 8002794:	40021800 	.word	0x40021800
 8002798:	40021c00 	.word	0x40021c00
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022400 	.word	0x40022400
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c4:	e003      	b.n	80027ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e12b      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fbf0 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	@ 0x24
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800282e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800283e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002840:	f001 fb92 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a81      	ldr	r2, [pc, #516]	@ (8002a50 <HAL_I2C_Init+0x274>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d807      	bhi.n	8002860 <HAL_I2C_Init+0x84>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a80      	ldr	r2, [pc, #512]	@ (8002a54 <HAL_I2C_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e006      	b.n	800286e <HAL_I2C_Init+0x92>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a7d      	ldr	r2, [pc, #500]	@ (8002a58 <HAL_I2C_Init+0x27c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	bf94      	ite	ls
 8002868:	2301      	movls	r3, #1
 800286a:	2300      	movhi	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e7      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a78      	ldr	r2, [pc, #480]	@ (8002a5c <HAL_I2C_Init+0x280>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a50 <HAL_I2C_Init+0x274>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d802      	bhi.n	80028b0 <HAL_I2C_Init+0xd4>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e009      	b.n	80028c4 <HAL_I2C_Init+0xe8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a69      	ldr	r2, [pc, #420]	@ (8002a60 <HAL_I2C_Init+0x284>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	3301      	adds	r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	495c      	ldr	r1, [pc, #368]	@ (8002a50 <HAL_I2C_Init+0x274>)
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d819      	bhi.n	8002918 <HAL_I2C_Init+0x13c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e59      	subs	r1, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028f8:	400b      	ands	r3, r1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_I2C_Init+0x138>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e59      	subs	r1, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb1 f3f3 	udiv	r3, r1, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	e051      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002914:	2304      	movs	r3, #4
 8002916:	e04f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_I2C_Init+0x168>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_I2C_Init+0x18e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x196>
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_I2C_Init+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e58      	subs	r0, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	440b      	add	r3, r1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6911      	ldr	r1, [r2, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000186a0 	.word	0x000186a0
 8002a54:	001e847f 	.word	0x001e847f
 8002a58:	003d08ff 	.word	0x003d08ff
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7fe fca8 	bl	80013cc <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80e0 	bne.w	8002c4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	4970      	ldr	r1, [pc, #448]	@ (8002c58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fa92 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0d3      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0x50>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0cc      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2221      	movs	r2, #33	@ 0x21
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2210      	movs	r2, #16
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a50      	ldr	r2, [pc, #320]	@ (8002c5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f9ca 	bl	8002ebc <I2C_MasterRequestWrite>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e08d      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b48:	e066      	b.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb50 	bl	80031f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x188>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fb47 	bl	8003284 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01a      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d194      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000

08002c60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7fe fbac 	bl	80013cc <HAL_GetTick>
 8002c74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 8111 	bne.w	8002eaa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4988      	ldr	r1, [pc, #544]	@ (8002eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f994 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e104      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_IsDeviceReady+0x50>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e0fd      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2224      	movs	r2, #36	@ 0x24
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a70      	ldr	r2, [pc, #448]	@ (8002eb8 <HAL_I2C_IsDeviceReady+0x258>)
 8002cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f952 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d30:	d103      	bne.n	8002d3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0b6      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb3d 	bl	80013cc <HAL_GetTick>
 8002d52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d82:	e025      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe fb22 	bl	80013cc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <HAL_I2C_IsDeviceReady+0x13a>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22a0      	movs	r2, #160	@ 0xa0
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dda:	d005      	beq.n	8002de8 <HAL_I2C_IsDeviceReady+0x188>
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_I2C_IsDeviceReady+0x188>
 8002de2:	7dbb      	ldrb	r3, [r7, #22]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0cd      	beq.n	8002d84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d129      	bne.n	8002e52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2319      	movs	r3, #25
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4921      	ldr	r1, [pc, #132]	@ (8002eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8c6 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e036      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e02c      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2319      	movs	r3, #25
 8002e72:	2201      	movs	r2, #1
 8002e74:	490f      	ldr	r1, [pc, #60]	@ (8002eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8a2 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e012      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f4ff af32 	bcc.w	8002cfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00100002 	.word	0x00100002
 8002eb8:	ffff0000 	.word	0xffff0000

08002ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d006      	beq.n	8002ee6 <I2C_MasterRequestWrite+0x2a>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d003      	beq.n	8002ee6 <I2C_MasterRequestWrite+0x2a>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee4:	d108      	bne.n	8002ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e00b      	b.n	8002f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d107      	bne.n	8002f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f84f 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f36:	d103      	bne.n	8002f40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e035      	b.n	8002fb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f4c:	d108      	bne.n	8002f60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	e01b      	b.n	8002f98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f60:	897b      	ldrh	r3, [r7, #10]
 8002f62:	11db      	asrs	r3, r3, #7
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 0306 	and.w	r3, r3, #6
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f063 030f 	orn	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	490e      	ldr	r1, [pc, #56]	@ (8002fb8 <I2C_MasterRequestWrite+0xfc>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f898 	bl	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e010      	b.n	8002fb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <I2C_MasterRequestWrite+0x100>)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f888 	bl	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	00010008 	.word	0x00010008
 8002fbc:	00010002 	.word	0x00010002

08002fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd0:	e048      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d044      	beq.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe f9f7 	bl	80013cc <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d139      	bne.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	e00c      	b.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e023      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0c1b      	lsrs	r3, r3, #16
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10d      	bne.n	800308a <I2C_WaitOnFlagUntilTimeout+0xca>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	e00c      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	43da      	mvns	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d093      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c2:	e071      	b.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d2:	d123      	bne.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e067      	b.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d041      	beq.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe f952 	bl	80013cc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d136      	bne.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10c      	bne.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e00b      	b.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	43da      	mvns	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e021      	b.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10c      	bne.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e00b      	b.n	80031e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f af6d 	bne.w	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003200:	e034      	b.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f886 	bl	8003314 <I2C_IsAcknowledgeFailed>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e034      	b.n	800327c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d028      	beq.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe f8d7 	bl	80013cc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11d      	bne.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b80      	cmp	r3, #128	@ 0x80
 800323c:	d016      	beq.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e007      	b.n	800327c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b80      	cmp	r3, #128	@ 0x80
 8003278:	d1c3      	bne.n	8003202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003290:	e034      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f83e 	bl	8003314 <I2C_IsAcknowledgeFailed>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e034      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d028      	beq.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe f88f 	bl	80013cc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11d      	bne.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d016      	beq.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e007      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d1c3      	bne.n	8003292 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d11b      	bne.n	8003364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d129      	bne.n	80033dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	@ 0x24
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0210 	bic.w	r2, r2, #16
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	d12a      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	f023 030f 	bic.w	r3, r3, #15
 800342a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b29a      	uxth	r2, r3
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	4313      	orrs	r3, r2
 8003434:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	89fa      	ldrh	r2, [r7, #14]
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e101      	b.n	800367e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fd fe37 	bl	8001108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 f8a7 	bl	8004608 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7c1a      	ldrb	r2, [r3, #16]
 80034c2:	f88d 2000 	strb.w	r2, [sp]
 80034c6:	3304      	adds	r3, #4
 80034c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ca:	f001 f839 	bl	8004540 <USB_CoreInit>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ce      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f89f 	bl	800462a <USB_SetCurrentMode>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0bf      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e04a      	b.n	800359a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3315      	adds	r3, #21
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3314      	adds	r3, #20
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	b298      	uxth	r0, r3
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332e      	adds	r3, #46	@ 0x2e
 8003540:	4602      	mov	r2, r0
 8003542:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3318      	adds	r3, #24
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	331c      	adds	r3, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3320      	adds	r3, #32
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3324      	adds	r3, #36	@ 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	3301      	adds	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3af      	bcc.n	8003504 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e044      	b.n	8003634 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3301      	adds	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	791b      	ldrb	r3, [r3, #4]
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3b5      	bcc.n	80035aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7c1a      	ldrb	r2, [r3, #16]
 8003646:	f88d 2000 	strb.w	r2, [sp]
 800364a:	3304      	adds	r3, #4
 800364c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364e:	f001 f839 	bl	80046c4 <USB_DevInit>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00c      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fa01 	bl	8004a7e <USB_DevDisconnect>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e267      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d075      	beq.n	8003792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036a6:	4b88      	ldr	r3, [pc, #544]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00c      	beq.n	80036cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b85      	ldr	r3, [pc, #532]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d112      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036be:	4b82      	ldr	r3, [pc, #520]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	4b7e      	ldr	r3, [pc, #504]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05b      	beq.n	8003790 <HAL_RCC_OscConfig+0x108>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d157      	bne.n	8003790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e242      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ec:	d106      	bne.n	80036fc <HAL_RCC_OscConfig+0x74>
 80036ee:	4b76      	ldr	r3, [pc, #472]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a75      	ldr	r2, [pc, #468]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e01d      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003704:	d10c      	bne.n	8003720 <HAL_RCC_OscConfig+0x98>
 8003706:	4b70      	ldr	r3, [pc, #448]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6f      	ldr	r2, [pc, #444]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4b6d      	ldr	r3, [pc, #436]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6c      	ldr	r2, [pc, #432]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 8003720:	4b69      	ldr	r3, [pc, #420]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a68      	ldr	r2, [pc, #416]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b66      	ldr	r3, [pc, #408]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a65      	ldr	r2, [pc, #404]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fe44 	bl	80013cc <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd fe40 	bl	80013cc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	@ 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e207      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b5b      	ldr	r3, [pc, #364]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0xc0>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fe30 	bl	80013cc <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7fd fe2c 	bl	80013cc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	@ 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1f3      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	4b51      	ldr	r3, [pc, #324]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0xe8>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d063      	beq.n	8003866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800379e:	4b4a      	ldr	r3, [pc, #296]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d11c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b44      	ldr	r3, [pc, #272]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1c7      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4937      	ldr	r1, [pc, #220]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	e03a      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f8:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <HAL_RCC_OscConfig+0x244>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fde5 	bl	80013cc <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003806:	f7fd fde1 	bl	80013cc <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1a8      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b28      	ldr	r3, [pc, #160]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4925      	ldr	r1, [pc, #148]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_OscConfig+0x244>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fdc4 	bl	80013cc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003848:	f7fd fdc0 	bl	80013cc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e187      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d036      	beq.n	80038e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <HAL_RCC_OscConfig+0x248>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd fda4 	bl	80013cc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003888:	f7fd fda0 	bl	80013cc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e167      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCC_OscConfig+0x240>)
 800389c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x200>
 80038a6:	e01b      	b.n	80038e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <HAL_RCC_OscConfig+0x248>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fd fd8d 	bl	80013cc <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	e00e      	b.n	80038d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fd fd89 	bl	80013cc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d907      	bls.n	80038d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e150      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	42470000 	.word	0x42470000
 80038d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ea      	bne.n	80038b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8097 	beq.w	8003a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4b81      	ldr	r3, [pc, #516]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	4b7d      	ldr	r3, [pc, #500]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	4a7c      	ldr	r2, [pc, #496]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	@ 0x40
 800390e:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b77      	ldr	r3, [pc, #476]	@ (8003afc <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d118      	bne.n	800395c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392a:	4b74      	ldr	r3, [pc, #464]	@ (8003afc <HAL_RCC_OscConfig+0x474>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a73      	ldr	r2, [pc, #460]	@ (8003afc <HAL_RCC_OscConfig+0x474>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fd fd49 	bl	80013cc <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393e:	f7fd fd45 	bl	80013cc <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e10c      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	4b6a      	ldr	r3, [pc, #424]	@ (8003afc <HAL_RCC_OscConfig+0x474>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x2ea>
 8003964:	4b64      	ldr	r3, [pc, #400]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003968:	4a63      	ldr	r2, [pc, #396]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003970:	e01c      	b.n	80039ac <HAL_RCC_OscConfig+0x324>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x30c>
 800397a:	4b5f      	ldr	r3, [pc, #380]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5e      	ldr	r2, [pc, #376]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	4b5c      	ldr	r3, [pc, #368]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	4a5b      	ldr	r2, [pc, #364]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	@ 0x70
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x324>
 8003994:	4b58      	ldr	r3, [pc, #352]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a57      	ldr	r2, [pc, #348]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a0:	4b55      	ldr	r3, [pc, #340]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	4a54      	ldr	r2, [pc, #336]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f023 0304 	bic.w	r3, r3, #4
 80039aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d015      	beq.n	80039e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fd0a 	bl	80013cc <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fd06 	bl	80013cc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e0cb      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ee      	beq.n	80039bc <HAL_RCC_OscConfig+0x334>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fd fcf4 	bl	80013cc <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f7fd fcf0 	bl	80013cc <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e0b5      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fe:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ee      	bne.n	80039e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4b39      	ldr	r3, [pc, #228]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a1 	beq.w	8003b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a26:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d05c      	beq.n	8003aec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d141      	bne.n	8003abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b31      	ldr	r3, [pc, #196]	@ (8003b00 <HAL_RCC_OscConfig+0x478>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd fcc4 	bl	80013cc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd fcc0 	bl	80013cc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e087      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	4b27      	ldr	r3, [pc, #156]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	491b      	ldr	r1, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a90:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <HAL_RCC_OscConfig+0x478>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fd fc99 	bl	80013cc <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd fc95 	bl	80013cc <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e05c      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab0:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x416>
 8003abc:	e054      	b.n	8003b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_RCC_OscConfig+0x478>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fc82 	bl	80013cc <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fc7e 	bl	80013cc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e045      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x444>
 8003aea:	e03d      	b.n	8003b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e038      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000
 8003b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x4ec>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d028      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d121      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d11a      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d111      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cc      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b68      	ldr	r3, [pc, #416]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d90c      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b65      	ldr	r3, [pc, #404]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0b8      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bcc:	4b59      	ldr	r3, [pc, #356]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a58      	ldr	r2, [pc, #352]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be4:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a52      	ldr	r2, [pc, #328]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b50      	ldr	r3, [pc, #320]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	494d      	ldr	r1, [pc, #308]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d044      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d119      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e07f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b3f      	ldr	r3, [pc, #252]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b3b      	ldr	r3, [pc, #236]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e067      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c56:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4934      	ldr	r1, [pc, #208]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fd fbb0 	bl	80013cc <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd fbac 	bl	80013cc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e04f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 020c 	and.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1eb      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b25      	ldr	r3, [pc, #148]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d20c      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b20      	ldr	r3, [pc, #128]	@ (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e032      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4916      	ldr	r1, [pc, #88]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cea:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	490e      	ldr	r1, [pc, #56]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfe:	f000 f821 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	490a      	ldr	r1, [pc, #40]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	5ccb      	ldrb	r3, [r1, r3]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	4a09      	ldr	r2, [pc, #36]	@ (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fb10 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08005518 	.word	0x08005518
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b094      	sub	sp, #80	@ 0x50
 8003d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5c:	4b79      	ldr	r3, [pc, #484]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d00d      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x40>
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	f200 80e1 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d76:	e0db      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4b73      	ldr	r3, [pc, #460]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d7c:	e0db      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7e:	4b73      	ldr	r3, [pc, #460]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d82:	e0d8      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d84:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	2200      	movs	r2, #0
 8003da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4621      	mov	r1, r4
 8003dd0:	1a51      	subs	r1, r2, r1
 8003dd2:	6139      	str	r1, [r7, #16]
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df2:	4651      	mov	r1, sl
 8003df4:	018a      	lsls	r2, r1, #6
 8003df6:	4651      	mov	r1, sl
 8003df8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e16:	4690      	mov	r8, r2
 8003e18:	4699      	mov	r9, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	eb18 0303 	adds.w	r3, r8, r3
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	462b      	mov	r3, r5
 8003e24:	eb49 0303 	adc.w	r3, r9, r3
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e36:	4629      	mov	r1, r5
 8003e38:	024b      	lsls	r3, r1, #9
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e40:	4621      	mov	r1, r4
 8003e42:	024a      	lsls	r2, r1, #9
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e54:	f7fc fa1c 	bl	8000290 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e60:	e058      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e62:	4b38      	ldr	r3, [pc, #224]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0159      	lsls	r1, r3, #5
 8003e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8e:	0150      	lsls	r0, r2, #5
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4641      	mov	r1, r8
 8003e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb45 0303 	adc.w	r3, r5, r3
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eea:	4629      	mov	r1, r5
 8003eec:	028b      	lsls	r3, r1, #10
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	028a      	lsls	r2, r1, #10
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f08:	f7fc f9c2 	bl	8000290 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3750      	adds	r7, #80	@ 0x50
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	007a1200 	.word	0x007a1200

08003f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000000 	.word	0x20000000

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f6c:	f7ff fff0 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	@ (8003f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	08005528 	.word	0x08005528

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff ffdc 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0b5b      	lsrs	r3, r3, #13
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	@ (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08005528 	.word	0x08005528

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e042      	b.n	8004050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd f84a 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	@ 0x24
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f82b 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b0c0      	sub	sp, #256	@ 0x100
 800405e:	af00      	add	r7, sp, #0
 8004060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	ea40 0301 	orr.w	r3, r0, r1
 8004080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040b0:	f021 010c 	bic.w	r1, r1, #12
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040be:	430b      	orrs	r3, r1
 80040c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	6999      	ldr	r1, [r3, #24]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	ea40 0301 	orr.w	r3, r0, r1
 80040de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004324 <UART_SetConfig+0x2cc>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <UART_SetConfig+0xa0>
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004328 <UART_SetConfig+0x2d0>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7ff ff4a 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80040fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004100:	e003      	b.n	800410a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004102:	f7ff ff31 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8004106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	f040 810c 	bne.w	8004330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	1891      	adds	r1, r2, r2
 8004130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004132:	415b      	adcs	r3, r3
 8004134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800413a:	4621      	mov	r1, r4
 800413c:	eb12 0801 	adds.w	r8, r2, r1
 8004140:	4629      	mov	r1, r5
 8004142:	eb43 0901 	adc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004168:	462b      	mov	r3, r5
 800416a:	eb49 0303 	adc.w	r3, r9, r3
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800417e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	18db      	adds	r3, r3, r3
 800418a:	653b      	str	r3, [r7, #80]	@ 0x50
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	@ 0x54
 8004194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800419c:	f7fc f878 	bl	8000290 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b61      	ldr	r3, [pc, #388]	@ (800432c <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041c8:	415b      	adcs	r3, r3
 80041ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041d0:	4641      	mov	r1, r8
 80041d2:	eb12 0a01 	adds.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0b01 	adc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f0:	4692      	mov	sl, r2
 80041f2:	469b      	mov	fp, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	eb1a 0303 	adds.w	r3, sl, r3
 80041fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041fe:	464b      	mov	r3, r9
 8004200:	eb4b 0303 	adc.w	r3, fp, r3
 8004204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800421c:	460b      	mov	r3, r1
 800421e:	18db      	adds	r3, r3, r3
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40
 8004222:	4613      	mov	r3, r2
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800422e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004232:	f7fc f82d 	bl	8000290 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4611      	mov	r1, r2
 800423c:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <UART_SetConfig+0x2d4>)
 800423e:	fba3 2301 	umull	r2, r3, r3, r1
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2264      	movs	r2, #100	@ 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004252:	4b36      	ldr	r3, [pc, #216]	@ (800432c <UART_SetConfig+0x2d4>)
 8004254:	fba3 2302 	umull	r2, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004260:	441c      	add	r4, r3
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800426c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800427c:	415b      	adcs	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6339      	str	r1, [r7, #48]	@ 0x30
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b8:	464b      	mov	r3, r9
 80042ba:	460a      	mov	r2, r1
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d8:	460b      	mov	r3, r1
 80042da:	18db      	adds	r3, r3, r3
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042de:	4613      	mov	r3, r2
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ee:	f7fb ffcf 	bl	8000290 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <UART_SetConfig+0x2d4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	@ 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3332      	adds	r3, #50	@ 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	@ (800432c <UART_SetConfig+0x2d4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 0207 	and.w	r2, r3, #7
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004320:	e106      	b.n	8004530 <UART_SetConfig+0x4d8>
 8004322:	bf00      	nop
 8004324:	40011000 	.word	0x40011000
 8004328:	40011400 	.word	0x40011400
 800432c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800433a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800433e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6239      	str	r1, [r7, #32]
 800434a:	415b      	adcs	r3, r3
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
 800434e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004352:	4641      	mov	r1, r8
 8004354:	1854      	adds	r4, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0501 	adc.w	r5, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004378:	464b      	mov	r3, r9
 800437a:	eb45 0303 	adc.w	r3, r5, r3
 800437e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800439e:	4629      	mov	r1, r5
 80043a0:	008b      	lsls	r3, r1, #2
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a8:	4621      	mov	r1, r4
 80043aa:	008a      	lsls	r2, r1, #2
 80043ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043b0:	f7fb ff6e 	bl	8000290 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b60      	ldr	r3, [pc, #384]	@ (800453c <UART_SetConfig+0x4e4>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011c      	lsls	r4, r3, #4
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	61b9      	str	r1, [r7, #24]
 80043dc:	415b      	adcs	r3, r3
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6139      	str	r1, [r7, #16]
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800442e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800443c:	4649      	mov	r1, r9
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004446:	4641      	mov	r1, r8
 8004448:	008a      	lsls	r2, r1, #2
 800444a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800444e:	f7fb ff1f 	bl	8000290 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b38      	ldr	r3, [pc, #224]	@ (800453c <UART_SetConfig+0x4e4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	@ 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	@ 0x32
 800446c:	4a33      	ldr	r2, [pc, #204]	@ (800453c <UART_SetConfig+0x4e4>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004478:	441c      	add	r4, r3
 800447a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447e:	2200      	movs	r2, #0
 8004480:	673b      	str	r3, [r7, #112]	@ 0x70
 8004482:	677a      	str	r2, [r7, #116]	@ 0x74
 8004484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	1891      	adds	r1, r2, r2
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	415b      	adcs	r3, r3
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004498:	4641      	mov	r1, r8
 800449a:	1851      	adds	r1, r2, r1
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	4649      	mov	r1, r9
 80044a0:	414b      	adcs	r3, r1
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044b0:	4659      	mov	r1, fp
 80044b2:	00cb      	lsls	r3, r1, #3
 80044b4:	4651      	mov	r1, sl
 80044b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ba:	4651      	mov	r1, sl
 80044bc:	00ca      	lsls	r2, r1, #3
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	4642      	mov	r2, r8
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ca:	464b      	mov	r3, r9
 80044cc:	460a      	mov	r2, r1
 80044ce:	eb42 0303 	adc.w	r3, r2, r3
 80044d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044de:	667a      	str	r2, [r7, #100]	@ 0x64
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044ec:	4649      	mov	r1, r9
 80044ee:	008b      	lsls	r3, r1, #2
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f6:	4641      	mov	r1, r8
 80044f8:	008a      	lsls	r2, r1, #2
 80044fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044fe:	f7fb fec7 	bl	8000290 <__aeabi_uldivmod>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <UART_SetConfig+0x4e4>)
 8004508:	fba3 1302 	umull	r1, r3, r3, r2
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	2164      	movs	r1, #100	@ 0x64
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	3332      	adds	r3, #50	@ 0x32
 800451a:	4a08      	ldr	r2, [pc, #32]	@ (800453c <UART_SetConfig+0x4e4>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4422      	add	r2, r4
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004536:	46bd      	mov	sp, r7
 8004538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004540:	b084      	sub	sp, #16
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	f107 001c 	add.w	r0, r7, #28
 800454e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004552:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004556:	2b01      	cmp	r3, #1
 8004558:	d123      	bne.n	80045a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800456e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004582:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 faa0 	bl	8004adc <USB_CoreReset>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	e01b      	b.n	80045da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa94 	bl	8004adc <USB_CoreReset>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80045cc:	e005      	b.n	80045da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045da:	7fbb      	ldrb	r3, [r7, #30]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10b      	bne.n	80045f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f043 0206 	orr.w	r2, r3, #6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004604:	b004      	add	sp, #16
 8004606:	4770      	bx	lr

08004608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f023 0201 	bic.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d115      	bne.n	8004678 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004658:	200a      	movs	r0, #10
 800465a:	f7fc fec3 	bl	80013e4 <HAL_Delay>
      ms += 10U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	330a      	adds	r3, #10
 8004662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa2b 	bl	8004ac0 <USB_GetMode>
 800466a:	4603      	mov	r3, r0
 800466c:	2b01      	cmp	r3, #1
 800466e:	d01e      	beq.n	80046ae <USB_SetCurrentMode+0x84>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2bc7      	cmp	r3, #199	@ 0xc7
 8004674:	d9f0      	bls.n	8004658 <USB_SetCurrentMode+0x2e>
 8004676:	e01a      	b.n	80046ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d115      	bne.n	80046aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800468a:	200a      	movs	r0, #10
 800468c:	f7fc feaa 	bl	80013e4 <HAL_Delay>
      ms += 10U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	330a      	adds	r3, #10
 8004694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa12 	bl	8004ac0 <USB_GetMode>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <USB_SetCurrentMode+0x84>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80046a6:	d9f0      	bls.n	800468a <USB_SetCurrentMode+0x60>
 80046a8:	e001      	b.n	80046ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e005      	b.n	80046ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80046b2:	d101      	bne.n	80046b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c4:	b084      	sub	sp, #16
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e009      	b.n	80046f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3340      	adds	r3, #64	@ 0x40
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b0e      	cmp	r3, #14
 80046fc:	d9f2      	bls.n	80046e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11c      	bne.n	8004740 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	@ 0x38
 800473e:	e00b      	b.n	8004758 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800475e:	461a      	mov	r2, r3
 8004760:	2300      	movs	r3, #0
 8004762:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004764:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004768:	2b01      	cmp	r3, #1
 800476a:	d10d      	bne.n	8004788 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800476c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004774:	2100      	movs	r1, #0
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f968 	bl	8004a4c <USB_SetDevSpeed>
 800477c:	e008      	b.n	8004790 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800477e:	2101      	movs	r1, #1
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f963 	bl	8004a4c <USB_SetDevSpeed>
 8004786:	e003      	b.n	8004790 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004788:	2103      	movs	r1, #3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f95e 	bl	8004a4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004790:	2110      	movs	r1, #16
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8fa 	bl	800498c <USB_FlushTxFifo>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f924 	bl	80049f0 <USB_FlushRxFifo>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c4:	461a      	mov	r2, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d0:	461a      	mov	r2, r3
 80047d2:	2300      	movs	r3, #0
 80047d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e043      	b.n	8004864 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047f2:	d118      	bne.n	8004826 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004806:	461a      	mov	r2, r3
 8004808:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e013      	b.n	8004838 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e008      	b.n	8004838 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004844:	461a      	mov	r2, r3
 8004846:	2300      	movs	r3, #0
 8004848:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004856:	461a      	mov	r2, r3
 8004858:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800485c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3301      	adds	r3, #1
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004868:	461a      	mov	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4293      	cmp	r3, r2
 800486e:	d3b5      	bcc.n	80047dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e043      	b.n	80048fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800488c:	d118      	bne.n	80048c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e013      	b.n	80048d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e008      	b.n	80048d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f0:	461a      	mov	r2, r3
 80048f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3301      	adds	r3, #1
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004902:	461a      	mov	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4293      	cmp	r3, r2
 8004908:	d3b5      	bcc.n	8004876 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800491c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800492a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800492c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f043 0210 	orr.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <USB_DevInit+0x2c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800494c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f043 0208 	orr.w	r2, r3, #8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004960:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004984:	b004      	add	sp, #16
 8004986:	4770      	bx	lr
 8004988:	803c3800 	.word	0x803c3800

0800498c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a6:	d901      	bls.n	80049ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e01b      	b.n	80049e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	daf2      	bge.n	800499a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	019b      	lsls	r3, r3, #6
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049d0:	d901      	bls.n	80049d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e006      	b.n	80049e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d0f0      	beq.n	80049c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a08:	d901      	bls.n	8004a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e018      	b.n	8004a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	daf2      	bge.n	80049fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a2c:	d901      	bls.n	8004a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e006      	b.n	8004a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d0f0      	beq.n	8004a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a98:	f023 0303 	bic.w	r3, r3, #3
 8004a9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004af4:	d901      	bls.n	8004afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e01b      	b.n	8004b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	daf2      	bge.n	8004ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b1e:	d901      	bls.n	8004b24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e006      	b.n	8004b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d0f0      	beq.n	8004b12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <siprintf>:
 8004b40:	b40e      	push	{r1, r2, r3}
 8004b42:	b500      	push	{lr}
 8004b44:	b09c      	sub	sp, #112	@ 0x70
 8004b46:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b48:	9002      	str	r0, [sp, #8]
 8004b4a:	9006      	str	r0, [sp, #24]
 8004b4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b50:	4809      	ldr	r0, [pc, #36]	@ (8004b78 <siprintf+0x38>)
 8004b52:	9107      	str	r1, [sp, #28]
 8004b54:	9104      	str	r1, [sp, #16]
 8004b56:	4909      	ldr	r1, [pc, #36]	@ (8004b7c <siprintf+0x3c>)
 8004b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b5c:	9105      	str	r1, [sp, #20]
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	a902      	add	r1, sp, #8
 8004b64:	f000 f9ce 	bl	8004f04 <_svfiprintf_r>
 8004b68:	9b02      	ldr	r3, [sp, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	b01c      	add	sp, #112	@ 0x70
 8004b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b74:	b003      	add	sp, #12
 8004b76:	4770      	bx	lr
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	ffff0208 	.word	0xffff0208

08004b80 <_vsniprintf_r>:
 8004b80:	b530      	push	{r4, r5, lr}
 8004b82:	4614      	mov	r4, r2
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	b09b      	sub	sp, #108	@ 0x6c
 8004b88:	4605      	mov	r5, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	da05      	bge.n	8004b9a <_vsniprintf_r+0x1a>
 8004b8e:	238b      	movs	r3, #139	@ 0x8b
 8004b90:	6003      	str	r3, [r0, #0]
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	b01b      	add	sp, #108	@ 0x6c
 8004b98:	bd30      	pop	{r4, r5, pc}
 8004b9a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004ba2:	bf14      	ite	ne
 8004ba4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ba8:	4623      	moveq	r3, r4
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bb2:	9100      	str	r1, [sp, #0]
 8004bb4:	9104      	str	r1, [sp, #16]
 8004bb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004bba:	4669      	mov	r1, sp
 8004bbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004bbe:	f000 f9a1 	bl	8004f04 <_svfiprintf_r>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	bfbc      	itt	lt
 8004bc6:	238b      	movlt	r3, #139	@ 0x8b
 8004bc8:	602b      	strlt	r3, [r5, #0]
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d0e3      	beq.n	8004b96 <_vsniprintf_r+0x16>
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e7df      	b.n	8004b96 <_vsniprintf_r+0x16>
	...

08004bd8 <vsniprintf>:
 8004bd8:	b507      	push	{r0, r1, r2, lr}
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	460a      	mov	r2, r1
 8004be0:	4601      	mov	r1, r0
 8004be2:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <vsniprintf+0x18>)
 8004be4:	6800      	ldr	r0, [r0, #0]
 8004be6:	f7ff ffcb 	bl	8004b80 <_vsniprintf_r>
 8004bea:	b003      	add	sp, #12
 8004bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bf0:	2000000c 	.word	0x2000000c

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	@ (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	@ (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	@ (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	@ (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	@ (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 fc66 	bl	80054f4 <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	0800556c 	.word	0x0800556c
 8004c4c:	0800556c 	.word	0x0800556c
 8004c50:	0800556c 	.word	0x0800556c
 8004c54:	08005570 	.word	0x08005570

08004c58 <__retarget_lock_acquire_recursive>:
 8004c58:	4770      	bx	lr

08004c5a <__retarget_lock_release_recursive>:
 8004c5a:	4770      	bx	lr

08004c5c <_free_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d041      	beq.n	8004ce8 <_free_r+0x8c>
 8004c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c68:	1f0c      	subs	r4, r1, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfb8      	it	lt
 8004c6e:	18e4      	addlt	r4, r4, r3
 8004c70:	f000 f8e0 	bl	8004e34 <__malloc_lock>
 8004c74:	4a1d      	ldr	r2, [pc, #116]	@ (8004cec <_free_r+0x90>)
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	b933      	cbnz	r3, 8004c88 <_free_r+0x2c>
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	6014      	str	r4, [r2, #0]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c84:	f000 b8dc 	b.w	8004e40 <__malloc_unlock>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d908      	bls.n	8004c9e <_free_r+0x42>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	1821      	adds	r1, r4, r0
 8004c90:	428b      	cmp	r3, r1
 8004c92:	bf01      	itttt	eq
 8004c94:	6819      	ldreq	r1, [r3, #0]
 8004c96:	685b      	ldreq	r3, [r3, #4]
 8004c98:	1809      	addeq	r1, r1, r0
 8004c9a:	6021      	streq	r1, [r4, #0]
 8004c9c:	e7ed      	b.n	8004c7a <_free_r+0x1e>
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b10b      	cbz	r3, 8004ca8 <_free_r+0x4c>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d9fa      	bls.n	8004c9e <_free_r+0x42>
 8004ca8:	6811      	ldr	r1, [r2, #0]
 8004caa:	1850      	adds	r0, r2, r1
 8004cac:	42a0      	cmp	r0, r4
 8004cae:	d10b      	bne.n	8004cc8 <_free_r+0x6c>
 8004cb0:	6820      	ldr	r0, [r4, #0]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	1850      	adds	r0, r2, r1
 8004cb6:	4283      	cmp	r3, r0
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	d1e0      	bne.n	8004c7e <_free_r+0x22>
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	4408      	add	r0, r1
 8004cc4:	6010      	str	r0, [r2, #0]
 8004cc6:	e7da      	b.n	8004c7e <_free_r+0x22>
 8004cc8:	d902      	bls.n	8004cd0 <_free_r+0x74>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	e7d6      	b.n	8004c7e <_free_r+0x22>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	1821      	adds	r1, r4, r0
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf04      	itt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	bf04      	itt	eq
 8004ce0:	1809      	addeq	r1, r1, r0
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	6054      	str	r4, [r2, #4]
 8004ce6:	e7ca      	b.n	8004c7e <_free_r+0x22>
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
 8004cea:	bf00      	nop
 8004cec:	20000a24 	.word	0x20000a24

08004cf0 <sbrk_aligned>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8004d30 <sbrk_aligned+0x40>)
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6831      	ldr	r1, [r6, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b911      	cbnz	r1, 8004d02 <sbrk_aligned+0x12>
 8004cfc:	f000 fba6 	bl	800544c <_sbrk_r>
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 fba1 	bl	800544c <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d103      	bne.n	8004d16 <sbrk_aligned+0x26>
 8004d0e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d12:	4620      	mov	r0, r4
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	1cc4      	adds	r4, r0, #3
 8004d18:	f024 0403 	bic.w	r4, r4, #3
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d0f8      	beq.n	8004d12 <sbrk_aligned+0x22>
 8004d20:	1a21      	subs	r1, r4, r0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fb92 	bl	800544c <_sbrk_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d1f2      	bne.n	8004d12 <sbrk_aligned+0x22>
 8004d2c:	e7ef      	b.n	8004d0e <sbrk_aligned+0x1e>
 8004d2e:	bf00      	nop
 8004d30:	20000a20 	.word	0x20000a20

08004d34 <_malloc_r>:
 8004d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d38:	1ccd      	adds	r5, r1, #3
 8004d3a:	f025 0503 	bic.w	r5, r5, #3
 8004d3e:	3508      	adds	r5, #8
 8004d40:	2d0c      	cmp	r5, #12
 8004d42:	bf38      	it	cc
 8004d44:	250c      	movcc	r5, #12
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	4606      	mov	r6, r0
 8004d4a:	db01      	blt.n	8004d50 <_malloc_r+0x1c>
 8004d4c:	42a9      	cmp	r1, r5
 8004d4e:	d904      	bls.n	8004d5a <_malloc_r+0x26>
 8004d50:	230c      	movs	r3, #12
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e30 <_malloc_r+0xfc>
 8004d5e:	f000 f869 	bl	8004e34 <__malloc_lock>
 8004d62:	f8d8 3000 	ldr.w	r3, [r8]
 8004d66:	461c      	mov	r4, r3
 8004d68:	bb44      	cbnz	r4, 8004dbc <_malloc_r+0x88>
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f7ff ffbf 	bl	8004cf0 <sbrk_aligned>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	4604      	mov	r4, r0
 8004d76:	d158      	bne.n	8004e2a <_malloc_r+0xf6>
 8004d78:	f8d8 4000 	ldr.w	r4, [r8]
 8004d7c:	4627      	mov	r7, r4
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d143      	bne.n	8004e0a <_malloc_r+0xd6>
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d04b      	beq.n	8004e1e <_malloc_r+0xea>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	eb04 0903 	add.w	r9, r4, r3
 8004d90:	f000 fb5c 	bl	800544c <_sbrk_r>
 8004d94:	4581      	cmp	r9, r0
 8004d96:	d142      	bne.n	8004e1e <_malloc_r+0xea>
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	1a6d      	subs	r5, r5, r1
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7ff ffa6 	bl	8004cf0 <sbrk_aligned>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d03a      	beq.n	8004e1e <_malloc_r+0xea>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	442b      	add	r3, r5
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	f8d8 3000 	ldr.w	r3, [r8]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	bb62      	cbnz	r2, 8004e10 <_malloc_r+0xdc>
 8004db6:	f8c8 7000 	str.w	r7, [r8]
 8004dba:	e00f      	b.n	8004ddc <_malloc_r+0xa8>
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	1b52      	subs	r2, r2, r5
 8004dc0:	d420      	bmi.n	8004e04 <_malloc_r+0xd0>
 8004dc2:	2a0b      	cmp	r2, #11
 8004dc4:	d917      	bls.n	8004df6 <_malloc_r+0xc2>
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	6025      	str	r5, [r4, #0]
 8004dcc:	bf18      	it	ne
 8004dce:	6059      	strne	r1, [r3, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	bf08      	it	eq
 8004dd4:	f8c8 1000 	streq.w	r1, [r8]
 8004dd8:	5162      	str	r2, [r4, r5]
 8004dda:	604b      	str	r3, [r1, #4]
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f82f 	bl	8004e40 <__malloc_unlock>
 8004de2:	f104 000b 	add.w	r0, r4, #11
 8004de6:	1d23      	adds	r3, r4, #4
 8004de8:	f020 0007 	bic.w	r0, r0, #7
 8004dec:	1ac2      	subs	r2, r0, r3
 8004dee:	bf1c      	itt	ne
 8004df0:	1a1b      	subne	r3, r3, r0
 8004df2:	50a3      	strne	r3, [r4, r2]
 8004df4:	e7af      	b.n	8004d56 <_malloc_r+0x22>
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	bf0c      	ite	eq
 8004dfc:	f8c8 2000 	streq.w	r2, [r8]
 8004e00:	605a      	strne	r2, [r3, #4]
 8004e02:	e7eb      	b.n	8004ddc <_malloc_r+0xa8>
 8004e04:	4623      	mov	r3, r4
 8004e06:	6864      	ldr	r4, [r4, #4]
 8004e08:	e7ae      	b.n	8004d68 <_malloc_r+0x34>
 8004e0a:	463c      	mov	r4, r7
 8004e0c:	687f      	ldr	r7, [r7, #4]
 8004e0e:	e7b6      	b.n	8004d7e <_malloc_r+0x4a>
 8004e10:	461a      	mov	r2, r3
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d1fb      	bne.n	8004e10 <_malloc_r+0xdc>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6053      	str	r3, [r2, #4]
 8004e1c:	e7de      	b.n	8004ddc <_malloc_r+0xa8>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f80c 	bl	8004e40 <__malloc_unlock>
 8004e28:	e794      	b.n	8004d54 <_malloc_r+0x20>
 8004e2a:	6005      	str	r5, [r0, #0]
 8004e2c:	e7d6      	b.n	8004ddc <_malloc_r+0xa8>
 8004e2e:	bf00      	nop
 8004e30:	20000a24 	.word	0x20000a24

08004e34 <__malloc_lock>:
 8004e34:	4801      	ldr	r0, [pc, #4]	@ (8004e3c <__malloc_lock+0x8>)
 8004e36:	f7ff bf0f 	b.w	8004c58 <__retarget_lock_acquire_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	20000a1c 	.word	0x20000a1c

08004e40 <__malloc_unlock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_unlock+0x8>)
 8004e42:	f7ff bf0a 	b.w	8004c5a <__retarget_lock_release_recursive>
 8004e46:	bf00      	nop
 8004e48:	20000a1c 	.word	0x20000a1c

08004e4c <__ssputs_r>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	688e      	ldr	r6, [r1, #8]
 8004e52:	461f      	mov	r7, r3
 8004e54:	42be      	cmp	r6, r7
 8004e56:	680b      	ldr	r3, [r1, #0]
 8004e58:	4682      	mov	sl, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4690      	mov	r8, r2
 8004e5e:	d82d      	bhi.n	8004ebc <__ssputs_r+0x70>
 8004e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e68:	d026      	beq.n	8004eb8 <__ssputs_r+0x6c>
 8004e6a:	6965      	ldr	r5, [r4, #20]
 8004e6c:	6909      	ldr	r1, [r1, #16]
 8004e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e72:	eba3 0901 	sub.w	r9, r3, r1
 8004e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e7a:	1c7b      	adds	r3, r7, #1
 8004e7c:	444b      	add	r3, r9
 8004e7e:	106d      	asrs	r5, r5, #1
 8004e80:	429d      	cmp	r5, r3
 8004e82:	bf38      	it	cc
 8004e84:	461d      	movcc	r5, r3
 8004e86:	0553      	lsls	r3, r2, #21
 8004e88:	d527      	bpl.n	8004eda <__ssputs_r+0x8e>
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7ff ff52 	bl	8004d34 <_malloc_r>
 8004e90:	4606      	mov	r6, r0
 8004e92:	b360      	cbz	r0, 8004eee <__ssputs_r+0xa2>
 8004e94:	6921      	ldr	r1, [r4, #16]
 8004e96:	464a      	mov	r2, r9
 8004e98:	f000 fae8 	bl	800546c <memcpy>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6126      	str	r6, [r4, #16]
 8004eaa:	6165      	str	r5, [r4, #20]
 8004eac:	444e      	add	r6, r9
 8004eae:	eba5 0509 	sub.w	r5, r5, r9
 8004eb2:	6026      	str	r6, [r4, #0]
 8004eb4:	60a5      	str	r5, [r4, #8]
 8004eb6:	463e      	mov	r6, r7
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d900      	bls.n	8004ebe <__ssputs_r+0x72>
 8004ebc:	463e      	mov	r6, r7
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	f000 faa8 	bl	8005418 <memmove>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	1b9b      	subs	r3, r3, r6
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4433      	add	r3, r6
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	462a      	mov	r2, r5
 8004edc:	f000 fad4 	bl	8005488 <_realloc_r>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1e0      	bne.n	8004ea8 <__ssputs_r+0x5c>
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	4650      	mov	r0, sl
 8004eea:	f7ff feb7 	bl	8004c5c <_free_r>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e7e9      	b.n	8004ed6 <__ssputs_r+0x8a>
	...

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	b09d      	sub	sp, #116	@ 0x74
 8004f10:	4607      	mov	r7, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	d510      	bpl.n	8004f3a <_svfiprintf_r+0x36>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b973      	cbnz	r3, 8004f3a <_svfiprintf_r+0x36>
 8004f1c:	2140      	movs	r1, #64	@ 0x40
 8004f1e:	f7ff ff09 	bl	8004d34 <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b930      	cbnz	r0, 8004f36 <_svfiprintf_r+0x32>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	b01d      	add	sp, #116	@ 0x74
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f36:	2340      	movs	r3, #64	@ 0x40
 8004f38:	616b      	str	r3, [r5, #20]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3e:	2320      	movs	r3, #32
 8004f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f48:	2330      	movs	r3, #48	@ 0x30
 8004f4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050e8 <_svfiprintf_r+0x1e4>
 8004f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f52:	f04f 0901 	mov.w	r9, #1
 8004f56:	4623      	mov	r3, r4
 8004f58:	469a      	mov	sl, r3
 8004f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5e:	b10a      	cbz	r2, 8004f64 <_svfiprintf_r+0x60>
 8004f60:	2a25      	cmp	r2, #37	@ 0x25
 8004f62:	d1f9      	bne.n	8004f58 <_svfiprintf_r+0x54>
 8004f64:	ebba 0b04 	subs.w	fp, sl, r4
 8004f68:	d00b      	beq.n	8004f82 <_svfiprintf_r+0x7e>
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4638      	mov	r0, r7
 8004f72:	f7ff ff6b 	bl	8004e4c <__ssputs_r>
 8004f76:	3001      	adds	r0, #1
 8004f78:	f000 80a7 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f7e:	445a      	add	r2, fp
 8004f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f82:	f89a 3000 	ldrb.w	r3, [sl]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 809f 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f96:	f10a 0a01 	add.w	sl, sl, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9307      	str	r3, [sp, #28]
 8004f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fac:	484e      	ldr	r0, [pc, #312]	@ (80050e8 <_svfiprintf_r+0x1e4>)
 8004fae:	f7fb f91f 	bl	80001f0 <memchr>
 8004fb2:	9a04      	ldr	r2, [sp, #16]
 8004fb4:	b9d8      	cbnz	r0, 8004fee <_svfiprintf_r+0xea>
 8004fb6:	06d0      	lsls	r0, r2, #27
 8004fb8:	bf44      	itt	mi
 8004fba:	2320      	movmi	r3, #32
 8004fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc0:	0711      	lsls	r1, r2, #28
 8004fc2:	bf44      	itt	mi
 8004fc4:	232b      	movmi	r3, #43	@ 0x2b
 8004fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd0:	d015      	beq.n	8004ffe <_svfiprintf_r+0xfa>
 8004fd2:	9a07      	ldr	r2, [sp, #28]
 8004fd4:	4654      	mov	r4, sl
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f04f 0c0a 	mov.w	ip, #10
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe2:	3b30      	subs	r3, #48	@ 0x30
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	d94b      	bls.n	8005080 <_svfiprintf_r+0x17c>
 8004fe8:	b1b0      	cbz	r0, 8005018 <_svfiprintf_r+0x114>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e014      	b.n	8005018 <_svfiprintf_r+0x114>
 8004fee:	eba0 0308 	sub.w	r3, r0, r8
 8004ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	46a2      	mov	sl, r4
 8004ffc:	e7d2      	b.n	8004fa4 <_svfiprintf_r+0xa0>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	1d19      	adds	r1, r3, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	9103      	str	r1, [sp, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbb      	ittet	lt
 800500a:	425b      	neglt	r3, r3
 800500c:	f042 0202 	orrlt.w	r2, r2, #2
 8005010:	9307      	strge	r3, [sp, #28]
 8005012:	9307      	strlt	r3, [sp, #28]
 8005014:	bfb8      	it	lt
 8005016:	9204      	strlt	r2, [sp, #16]
 8005018:	7823      	ldrb	r3, [r4, #0]
 800501a:	2b2e      	cmp	r3, #46	@ 0x2e
 800501c:	d10a      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501e:	7863      	ldrb	r3, [r4, #1]
 8005020:	2b2a      	cmp	r3, #42	@ 0x2a
 8005022:	d132      	bne.n	800508a <_svfiprintf_r+0x186>
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	9203      	str	r2, [sp, #12]
 800502c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005030:	3402      	adds	r4, #2
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050f8 <_svfiprintf_r+0x1f4>
 8005038:	7821      	ldrb	r1, [r4, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4650      	mov	r0, sl
 800503e:	f7fb f8d7 	bl	80001f0 <memchr>
 8005042:	b138      	cbz	r0, 8005054 <_svfiprintf_r+0x150>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	4082      	lsls	r2, r0
 800504e:	4313      	orrs	r3, r2
 8005050:	3401      	adds	r4, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005058:	4824      	ldr	r0, [pc, #144]	@ (80050ec <_svfiprintf_r+0x1e8>)
 800505a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800505e:	2206      	movs	r2, #6
 8005060:	f7fb f8c6 	bl	80001f0 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d036      	beq.n	80050d6 <_svfiprintf_r+0x1d2>
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <_svfiprintf_r+0x1ec>)
 800506a:	bb1b      	cbnz	r3, 80050b4 <_svfiprintf_r+0x1b0>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	3308      	adds	r3, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507a:	4433      	add	r3, r6
 800507c:	9309      	str	r3, [sp, #36]	@ 0x24
 800507e:	e76a      	b.n	8004f56 <_svfiprintf_r+0x52>
 8005080:	fb0c 3202 	mla	r2, ip, r2, r3
 8005084:	460c      	mov	r4, r1
 8005086:	2001      	movs	r0, #1
 8005088:	e7a8      	b.n	8004fdc <_svfiprintf_r+0xd8>
 800508a:	2300      	movs	r3, #0
 800508c:	3401      	adds	r4, #1
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0c0a 	mov.w	ip, #10
 8005096:	4620      	mov	r0, r4
 8005098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509c:	3a30      	subs	r2, #48	@ 0x30
 800509e:	2a09      	cmp	r2, #9
 80050a0:	d903      	bls.n	80050aa <_svfiprintf_r+0x1a6>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c6      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a6:	9105      	str	r1, [sp, #20]
 80050a8:	e7c4      	b.n	8005034 <_svfiprintf_r+0x130>
 80050aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ae:	4604      	mov	r4, r0
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7f0      	b.n	8005096 <_svfiprintf_r+0x192>
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050bc:	a904      	add	r1, sp, #16
 80050be:	4638      	mov	r0, r7
 80050c0:	f3af 8000 	nop.w
 80050c4:	1c42      	adds	r2, r0, #1
 80050c6:	4606      	mov	r6, r0
 80050c8:	d1d6      	bne.n	8005078 <_svfiprintf_r+0x174>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	065b      	lsls	r3, r3, #25
 80050ce:	f53f af2d 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050d4:	e72c      	b.n	8004f30 <_svfiprintf_r+0x2c>
 80050d6:	ab03      	add	r3, sp, #12
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	462a      	mov	r2, r5
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050de:	a904      	add	r1, sp, #16
 80050e0:	4638      	mov	r0, r7
 80050e2:	f000 f879 	bl	80051d8 <_printf_i>
 80050e6:	e7ed      	b.n	80050c4 <_svfiprintf_r+0x1c0>
 80050e8:	08005530 	.word	0x08005530
 80050ec:	0800553a 	.word	0x0800553a
 80050f0:	00000000 	.word	0x00000000
 80050f4:	08004e4d 	.word	0x08004e4d
 80050f8:	08005536 	.word	0x08005536

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4616      	mov	r6, r2
 8005102:	4698      	mov	r8, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005118:	4607      	mov	r7, r0
 800511a:	460c      	mov	r4, r1
 800511c:	b10a      	cbz	r2, 8005122 <_printf_common+0x26>
 800511e:	3301      	adds	r3, #1
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	6833      	ldrmi	r3, [r6, #0]
 800512a:	3302      	addmi	r3, #2
 800512c:	6033      	strmi	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	f015 0506 	ands.w	r5, r5, #6
 8005134:	d106      	bne.n	8005144 <_printf_common+0x48>
 8005136:	f104 0a19 	add.w	sl, r4, #25
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	42ab      	cmp	r3, r5
 8005142:	dc26      	bgt.n	8005192 <_printf_common+0x96>
 8005144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	3b00      	subs	r3, #0
 800514c:	bf18      	it	ne
 800514e:	2301      	movne	r3, #1
 8005150:	0692      	lsls	r2, r2, #26
 8005152:	d42b      	bmi.n	80051ac <_printf_common+0xb0>
 8005154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005158:	4641      	mov	r1, r8
 800515a:	4638      	mov	r0, r7
 800515c:	47c8      	blx	r9
 800515e:	3001      	adds	r0, #1
 8005160:	d01e      	beq.n	80051a0 <_printf_common+0xa4>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf02      	ittt	eq
 800516e:	68e5      	ldreq	r5, [r4, #12]
 8005170:	6833      	ldreq	r3, [r6, #0]
 8005172:	1aed      	subeq	r5, r5, r3
 8005174:	68a3      	ldr	r3, [r4, #8]
 8005176:	bf0c      	ite	eq
 8005178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800517c:	2500      	movne	r5, #0
 800517e:	4293      	cmp	r3, r2
 8005180:	bfc4      	itt	gt
 8005182:	1a9b      	subgt	r3, r3, r2
 8005184:	18ed      	addgt	r5, r5, r3
 8005186:	2600      	movs	r6, #0
 8005188:	341a      	adds	r4, #26
 800518a:	42b5      	cmp	r5, r6
 800518c:	d11a      	bne.n	80051c4 <_printf_common+0xc8>
 800518e:	2000      	movs	r0, #0
 8005190:	e008      	b.n	80051a4 <_printf_common+0xa8>
 8005192:	2301      	movs	r3, #1
 8005194:	4652      	mov	r2, sl
 8005196:	4641      	mov	r1, r8
 8005198:	4638      	mov	r0, r7
 800519a:	47c8      	blx	r9
 800519c:	3001      	adds	r0, #1
 800519e:	d103      	bne.n	80051a8 <_printf_common+0xac>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7c6      	b.n	800513a <_printf_common+0x3e>
 80051ac:	18e1      	adds	r1, r4, r3
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	2030      	movs	r0, #48	@ 0x30
 80051b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b6:	4422      	add	r2, r4
 80051b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051c0:	3302      	adds	r3, #2
 80051c2:	e7c7      	b.n	8005154 <_printf_common+0x58>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4622      	mov	r2, r4
 80051c8:	4641      	mov	r1, r8
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c8      	blx	r9
 80051ce:	3001      	adds	r0, #1
 80051d0:	d0e6      	beq.n	80051a0 <_printf_common+0xa4>
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7d9      	b.n	800518a <_printf_common+0x8e>
	...

080051d8 <_printf_i>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	7e0f      	ldrb	r7, [r1, #24]
 80051de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051e0:	2f78      	cmp	r7, #120	@ 0x78
 80051e2:	4691      	mov	r9, r2
 80051e4:	4680      	mov	r8, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	469a      	mov	sl, r3
 80051ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ee:	d807      	bhi.n	8005200 <_printf_i+0x28>
 80051f0:	2f62      	cmp	r7, #98	@ 0x62
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x32>
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	f000 80d2 	beq.w	800539e <_printf_i+0x1c6>
 80051fa:	2f58      	cmp	r7, #88	@ 0x58
 80051fc:	f000 80b9 	beq.w	8005372 <_printf_i+0x19a>
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005208:	e03a      	b.n	8005280 <_printf_i+0xa8>
 800520a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520e:	2b15      	cmp	r3, #21
 8005210:	d8f6      	bhi.n	8005200 <_printf_i+0x28>
 8005212:	a101      	add	r1, pc, #4	@ (adr r1, 8005218 <_printf_i+0x40>)
 8005214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005218:	08005271 	.word	0x08005271
 800521c:	08005285 	.word	0x08005285
 8005220:	08005201 	.word	0x08005201
 8005224:	08005201 	.word	0x08005201
 8005228:	08005201 	.word	0x08005201
 800522c:	08005201 	.word	0x08005201
 8005230:	08005285 	.word	0x08005285
 8005234:	08005201 	.word	0x08005201
 8005238:	08005201 	.word	0x08005201
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	08005385 	.word	0x08005385
 8005248:	080052af 	.word	0x080052af
 800524c:	0800533f 	.word	0x0800533f
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	080053a7 	.word	0x080053a7
 800525c:	08005201 	.word	0x08005201
 8005260:	080052af 	.word	0x080052af
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	08005347 	.word	0x08005347
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800527c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005280:	2301      	movs	r3, #1
 8005282:	e09d      	b.n	80053c0 <_printf_i+0x1e8>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	0606      	lsls	r6, r0, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xbc>
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	e003      	b.n	800529c <_printf_i+0xc4>
 8005294:	0645      	lsls	r5, r0, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xb8>
 8005298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xd0>
 80052a0:	232d      	movs	r3, #45	@ 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a8:	4859      	ldr	r0, [pc, #356]	@ (8005410 <_printf_i+0x238>)
 80052aa:	230a      	movs	r3, #10
 80052ac:	e011      	b.n	80052d2 <_printf_i+0xfa>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	0608      	lsls	r0, r1, #24
 80052b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b8:	d402      	bmi.n	80052c0 <_printf_i+0xe8>
 80052ba:	0649      	lsls	r1, r1, #25
 80052bc:	bf48      	it	mi
 80052be:	b2ad      	uxthmi	r5, r5
 80052c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052c2:	4853      	ldr	r0, [pc, #332]	@ (8005410 <_printf_i+0x238>)
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	bf14      	ite	ne
 80052c8:	230a      	movne	r3, #10
 80052ca:	2308      	moveq	r3, #8
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052d2:	6866      	ldr	r6, [r4, #4]
 80052d4:	60a6      	str	r6, [r4, #8]
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	bfa2      	ittt	ge
 80052da:	6821      	ldrge	r1, [r4, #0]
 80052dc:	f021 0104 	bicge.w	r1, r1, #4
 80052e0:	6021      	strge	r1, [r4, #0]
 80052e2:	b90d      	cbnz	r5, 80052e8 <_printf_i+0x110>
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	d04b      	beq.n	8005380 <_printf_i+0x1a8>
 80052e8:	4616      	mov	r6, r2
 80052ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ee:	fb03 5711 	mls	r7, r3, r1, r5
 80052f2:	5dc7      	ldrb	r7, [r0, r7]
 80052f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f8:	462f      	mov	r7, r5
 80052fa:	42bb      	cmp	r3, r7
 80052fc:	460d      	mov	r5, r1
 80052fe:	d9f4      	bls.n	80052ea <_printf_i+0x112>
 8005300:	2b08      	cmp	r3, #8
 8005302:	d10b      	bne.n	800531c <_printf_i+0x144>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	07df      	lsls	r7, r3, #31
 8005308:	d508      	bpl.n	800531c <_printf_i+0x144>
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	6861      	ldr	r1, [r4, #4]
 800530e:	4299      	cmp	r1, r3
 8005310:	bfde      	ittt	le
 8005312:	2330      	movle	r3, #48	@ 0x30
 8005314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800531c:	1b92      	subs	r2, r2, r6
 800531e:	6122      	str	r2, [r4, #16]
 8005320:	f8cd a000 	str.w	sl, [sp]
 8005324:	464b      	mov	r3, r9
 8005326:	aa03      	add	r2, sp, #12
 8005328:	4621      	mov	r1, r4
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fee6 	bl	80050fc <_printf_common>
 8005330:	3001      	adds	r0, #1
 8005332:	d14a      	bne.n	80053ca <_printf_i+0x1f2>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	b004      	add	sp, #16
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	f043 0320 	orr.w	r3, r3, #32
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	4833      	ldr	r0, [pc, #204]	@ (8005414 <_printf_i+0x23c>)
 8005348:	2778      	movs	r7, #120	@ 0x78
 800534a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	6831      	ldr	r1, [r6, #0]
 8005352:	061f      	lsls	r7, r3, #24
 8005354:	f851 5b04 	ldr.w	r5, [r1], #4
 8005358:	d402      	bmi.n	8005360 <_printf_i+0x188>
 800535a:	065f      	lsls	r7, r3, #25
 800535c:	bf48      	it	mi
 800535e:	b2ad      	uxthmi	r5, r5
 8005360:	6031      	str	r1, [r6, #0]
 8005362:	07d9      	lsls	r1, r3, #31
 8005364:	bf44      	itt	mi
 8005366:	f043 0320 	orrmi.w	r3, r3, #32
 800536a:	6023      	strmi	r3, [r4, #0]
 800536c:	b11d      	cbz	r5, 8005376 <_printf_i+0x19e>
 800536e:	2310      	movs	r3, #16
 8005370:	e7ac      	b.n	80052cc <_printf_i+0xf4>
 8005372:	4827      	ldr	r0, [pc, #156]	@ (8005410 <_printf_i+0x238>)
 8005374:	e7e9      	b.n	800534a <_printf_i+0x172>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f023 0320 	bic.w	r3, r3, #32
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	e7f6      	b.n	800536e <_printf_i+0x196>
 8005380:	4616      	mov	r6, r2
 8005382:	e7bd      	b.n	8005300 <_printf_i+0x128>
 8005384:	6833      	ldr	r3, [r6, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	6961      	ldr	r1, [r4, #20]
 800538a:	1d18      	adds	r0, r3, #4
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	062e      	lsls	r6, r5, #24
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	d501      	bpl.n	8005398 <_printf_i+0x1c0>
 8005394:	6019      	str	r1, [r3, #0]
 8005396:	e002      	b.n	800539e <_printf_i+0x1c6>
 8005398:	0668      	lsls	r0, r5, #25
 800539a:	d5fb      	bpl.n	8005394 <_printf_i+0x1bc>
 800539c:	8019      	strh	r1, [r3, #0]
 800539e:	2300      	movs	r3, #0
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	4616      	mov	r6, r2
 80053a4:	e7bc      	b.n	8005320 <_printf_i+0x148>
 80053a6:	6833      	ldr	r3, [r6, #0]
 80053a8:	1d1a      	adds	r2, r3, #4
 80053aa:	6032      	str	r2, [r6, #0]
 80053ac:	681e      	ldr	r6, [r3, #0]
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	2100      	movs	r1, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7fa ff1c 	bl	80001f0 <memchr>
 80053b8:	b108      	cbz	r0, 80053be <_printf_i+0x1e6>
 80053ba:	1b80      	subs	r0, r0, r6
 80053bc:	6060      	str	r0, [r4, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	2300      	movs	r3, #0
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c8:	e7aa      	b.n	8005320 <_printf_i+0x148>
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	4632      	mov	r2, r6
 80053ce:	4649      	mov	r1, r9
 80053d0:	4640      	mov	r0, r8
 80053d2:	47d0      	blx	sl
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0ad      	beq.n	8005334 <_printf_i+0x15c>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	079b      	lsls	r3, r3, #30
 80053dc:	d413      	bmi.n	8005406 <_printf_i+0x22e>
 80053de:	68e0      	ldr	r0, [r4, #12]
 80053e0:	9b03      	ldr	r3, [sp, #12]
 80053e2:	4298      	cmp	r0, r3
 80053e4:	bfb8      	it	lt
 80053e6:	4618      	movlt	r0, r3
 80053e8:	e7a6      	b.n	8005338 <_printf_i+0x160>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4632      	mov	r2, r6
 80053ee:	4649      	mov	r1, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	47d0      	blx	sl
 80053f4:	3001      	adds	r0, #1
 80053f6:	d09d      	beq.n	8005334 <_printf_i+0x15c>
 80053f8:	3501      	adds	r5, #1
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	9903      	ldr	r1, [sp, #12]
 80053fe:	1a5b      	subs	r3, r3, r1
 8005400:	42ab      	cmp	r3, r5
 8005402:	dcf2      	bgt.n	80053ea <_printf_i+0x212>
 8005404:	e7eb      	b.n	80053de <_printf_i+0x206>
 8005406:	2500      	movs	r5, #0
 8005408:	f104 0619 	add.w	r6, r4, #25
 800540c:	e7f5      	b.n	80053fa <_printf_i+0x222>
 800540e:	bf00      	nop
 8005410:	08005541 	.word	0x08005541
 8005414:	08005552 	.word	0x08005552

08005418 <memmove>:
 8005418:	4288      	cmp	r0, r1
 800541a:	b510      	push	{r4, lr}
 800541c:	eb01 0402 	add.w	r4, r1, r2
 8005420:	d902      	bls.n	8005428 <memmove+0x10>
 8005422:	4284      	cmp	r4, r0
 8005424:	4623      	mov	r3, r4
 8005426:	d807      	bhi.n	8005438 <memmove+0x20>
 8005428:	1e43      	subs	r3, r0, #1
 800542a:	42a1      	cmp	r1, r4
 800542c:	d008      	beq.n	8005440 <memmove+0x28>
 800542e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005436:	e7f8      	b.n	800542a <memmove+0x12>
 8005438:	4402      	add	r2, r0
 800543a:	4601      	mov	r1, r0
 800543c:	428a      	cmp	r2, r1
 800543e:	d100      	bne.n	8005442 <memmove+0x2a>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800544a:	e7f7      	b.n	800543c <memmove+0x24>

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fb fee0 	bl	800121c <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000a18 	.word	0x20000a18

0800546c <memcpy>:
 800546c:	440a      	add	r2, r1
 800546e:	4291      	cmp	r1, r2
 8005470:	f100 33ff 	add.w	r3, r0, #4294967295
 8005474:	d100      	bne.n	8005478 <memcpy+0xc>
 8005476:	4770      	bx	lr
 8005478:	b510      	push	{r4, lr}
 800547a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005482:	4291      	cmp	r1, r2
 8005484:	d1f9      	bne.n	800547a <memcpy+0xe>
 8005486:	bd10      	pop	{r4, pc}

08005488 <_realloc_r>:
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	4680      	mov	r8, r0
 800548e:	4615      	mov	r5, r2
 8005490:	460c      	mov	r4, r1
 8005492:	b921      	cbnz	r1, 800549e <_realloc_r+0x16>
 8005494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4611      	mov	r1, r2
 800549a:	f7ff bc4b 	b.w	8004d34 <_malloc_r>
 800549e:	b92a      	cbnz	r2, 80054ac <_realloc_r+0x24>
 80054a0:	f7ff fbdc 	bl	8004c5c <_free_r>
 80054a4:	2400      	movs	r4, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ac:	f000 f81a 	bl	80054e4 <_malloc_usable_size_r>
 80054b0:	4285      	cmp	r5, r0
 80054b2:	4606      	mov	r6, r0
 80054b4:	d802      	bhi.n	80054bc <_realloc_r+0x34>
 80054b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054ba:	d8f4      	bhi.n	80054a6 <_realloc_r+0x1e>
 80054bc:	4629      	mov	r1, r5
 80054be:	4640      	mov	r0, r8
 80054c0:	f7ff fc38 	bl	8004d34 <_malloc_r>
 80054c4:	4607      	mov	r7, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0ec      	beq.n	80054a4 <_realloc_r+0x1c>
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	462a      	mov	r2, r5
 80054ce:	4621      	mov	r1, r4
 80054d0:	bf28      	it	cs
 80054d2:	4632      	movcs	r2, r6
 80054d4:	f7ff ffca 	bl	800546c <memcpy>
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fbbe 	bl	8004c5c <_free_r>
 80054e0:	463c      	mov	r4, r7
 80054e2:	e7e0      	b.n	80054a6 <_realloc_r+0x1e>

080054e4 <_malloc_usable_size_r>:
 80054e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e8:	1f18      	subs	r0, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfbc      	itt	lt
 80054ee:	580b      	ldrlt	r3, [r1, r0]
 80054f0:	18c0      	addlt	r0, r0, r3
 80054f2:	4770      	bx	lr

080054f4 <_init>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr

08005500 <_fini>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr
